/*
 * tinybms.h
 *
 *  Created on: Jul 15, 2019
 *      Author: A.SaleH
 */

#ifndef TINYBMS_H_
#define TINYBMS_H_

#define BMS_CMD_READ_VOLTAGE 0x14
#define BMS_CMD_READ_CURRENT 0x15
#define BMS_CMD_READ_STATUS 0x18

#define BMS_REG_CELL1_V 0
#define BMS_REG_CELL2_V 1
#define BMS_REG_CELL3_V 2
#define BMS_REG_CELL4_V 3
#define BMS_REG_CELL5_V 4
#define BMS_REG_CELL6_V 5
#define BMS_REG_CELL7_V 6
#define BMS_REG_CELL8_V 7
#define BMS_REG_CELL9_V 8
#define BMS_REG_CELL10_V 9
#define BMS_REG_CELL11_V 10
#define BMS_REG_CELL12_V 11
#define BMS_REG_CELL13_V 12
#define BMS_REG_CELL14_V 13
#define BMS_REG_CELL15_V 14
#define BMS_REG_CELL16_V 15

#define BMS_REG_LIFETIME_CNT 32
#define BMS_REG_TIME_LEFT 34

#define BMS_REG_PACK_VOLTAGE 36
#define BMS_REG_PACK_CURRENT 38

#define BMS_REG_MIN_CELL_VOLTAGE 40
#define BMS_REG_MAX_CELL_VOLTAGE 41

#define BMS_REG_TMP1 42
#define BMS_REG_TMP2 43

#define BMS_REG_DISTANCE_LEFT 44

#define BMS_REG_SOC 46

#define BMS_REG_BMS_TMP 48

#define BMS_REG_STATUS 50

#define BMS_REG_BALANCING_DECISION 51
#define BMS_REG_BALANCING_REAL 52

#define BMS_REG_NUMBER_CELLS 53

#define BMS_REG_SPEED 54
#define BMS_REG_TOTAL_DISTANCE 100

#define BMS_REG_MAX_DISCHARGE_CURR 102
#define BMS_REG_MAX_CHARGE_CURR 103
#define BMS_REG_MAX_CELL_DIFF 104
#define BMS_REG_UNDERVOLTAGE_CNT 105
#define BMS_REG_OVERVOLTAGE_CNT 106
#define BMS_REG_DISCHARGE_OVERCURRENT_CNT 107
#define BMS_REG_CHARGE_OVERCURRENT_CNT 108
#define BMS_REG_OVERHEAT_CNT 109
#define BMS_REG_CHARGING_CNT 111
#define BMS_REG_FULL_CHARGE_CNT 112

#define BMS_REG_MIN_MAX_TMP 113

#define BMS_REG_LASTRESET_LASTWAKEUP 114
#define BMS_REG_LAST_CLEARED 116

#define BMS_REG_EVENTS_BEGIN 200
#define BMS_REG_EVENTS_END 297

#define BMS_REG_CELL_FULLCHARGE_VOLTAGE 300
#define BMS_REG_CELL_FULLDISCHARGE_VOLTAGE 301

#define BMS_REG_EARLY_BALANCY_THRESHOLD 303
#define BMS_REG_CHARGE_FINISHED_CURRENT 304

#define BMS_REG_BATTERY_CAPACITY 306
#define BMS_REG_SERIES_CELLS_NO 307
#define BMS_REG_ALLOW_DISBALANCE 308

#define BMS_REG_PULSES_PER_UNIT 312
#define BMS_REG_DISTANCE_UNIT 314

#define BMS_REG_OVERVOLTAGE_CUTOFF 315
#define BMS_REG_UNDERVOLTAGE_CUTOFF 316
#define BMS_REG_DISCHARGE_OVERCURRENT_CUTOFF 317
#define BMS_REG_CHARGE_OVERCURRENT_CUTOFF 318
#define BMS_REG_OVERHEAT_CUTOFF 319
#define BMS_REG_UNDERHEAT_CUTOFF 320

#define BMS_REG_CHARGER_TYPE 330
#define BMS_REG_LOAD_SWITCH_TYPE 331
#define BMS_REG_AUTO_RECOVERY 332
#define BMS_REG_CHARGER_SWITCH_TYPE 333
#define BMS_REG_IGNITION 334
#define BMS_REG_CHARGER_DETECTION 335
#define BMS_REG_SPEED_SENSOR 336
#define BMS_REG_PRECHARGE_PIN 337
#define BMS_REG_PRECHARGE_DURATION 338
#define BMS_REG_TMP_SENSOR_TYPE 339
#define BMS_REG_OP_MODE 340
#define BMS_REG_SINGLE_PORT_SWITCH_TYPE 341
#define BMS_REG_BROADCAST_TIME 342
#define BMS_REG_PROTOCOL 343

#define BMS_REG_HARDWARE_VERSION 500
#define BMS_REG_FIRMWARE_PUBLIC_VERSION 501
#define BMS_REG_FIRMWARE_INTERNAL_VERSION 502
#define BMS_REG_BOOTLOADER_VERSION 503
#define BMS_REG_SERIAL_NUMBER 504

#define BMS_EVENT_UNDERVOLTAGE_CUTOFF 0x02
#define BMS_EVENT_OVERVOLTAGE_CUTOFF 0x03
#define BMS_EVENT_OVERTEMPERATURE_CUTOFF 0x04
#define BMS_EVENT_DISCHARGE_OVERCURRENT_CUTOFF 0x05
#define BMS_EVENT_CHARGE_OVERCURRENT_CUTOFF 0x06
#define BMS_EVENT_REGEN_OVERCURRENT_CUTOFF 0x07
#define BMS_EVENT_LOWTEMPERATURE_CUTOFF 0x0A
#define BMS_EVENT_CHARGER_SWITCH_ERROR 0x0B
#define BMS_EVENT_LOAD_SWITCH_ERROR 0x0C
#define BMS_EVENT_SINGLEPORT_SWITCH_ERROR 0x0D
#define BMS_EVENT_EXT_CURR_SENSOR_DISCONNECTED 0x0E
#define BMS_EVENT_EXT_CURR_SENSOR_CONNECTED 0x0F

#define BMS_EVENT_FULLY_DISCHARGE_CUTOFF 0x31
#define BMS_EVENT_LOWTMP_CHARGE_CUTOFF 0x37
#define BMS_EVENT_CHARGER_VOLTAGE_HIGH 0x38
#define BMS_EVENT_CHARGER_VOLTAGE_LOW 0x39

#define BMS_EVENT_SYSTEM_STARTED 0x61
#define BMS_EVENT_CHARGING_STARTED 0x62
#define BMS_EVENT_CHARGING_DONE 0x63
#define BMS_EVENT_CHARGER_CONNECTED 0x64
#define BMS_EVENT_CHARGER_DISCONNECTED 0x65
#define BMS_EVENT_DUALPORT_ACTIVATED 0x66
#define BMS_EVENT_SINGLEPORT_ACTIVATED 0x67

#define BMS_EVENT_REC_OVERTEMPERATURE_FAULT 0x73
#define BMS_EVENT_REC_LOWTEMPERATURE_WARN 0x74
#define BMS_EVENT_REC_LOWTEMPERATURE_FAULT 0x75
#define BMS_EVENT_REC_CHARGE_OVERCURRENT 0x76
#define BMS_EVENT_REC_DISCHARGE_OVERCURRENT 0x77
#define BMS_EVENT_REC_REGEN_OVERCURRENT 0x78
#define BMS_EVENT_REC_OVERVOLTAGE 0x79
#define BMS_EVENT_REC_FULLY_DISCHARGE 0x7A
#define BMS_EVENT_REC_UNDERVOLTAGE 0x7B
#define BMS_EVENT_REC_EXT_CURR_SENSOR_CONNECTED 0x7C
#define BMS_EVENT_REC_EXT_CURR_SENSOR_DISCONNECTED 0x7D

typedef enum{
	BMS_Charging,
	BMS_Fully_Charged,
	BMS_Discharging,
	BMS_Regeneration,
	BMS_Idle,
	BMS_Fault,
}BMS_status_t;

typedef enum{
	ACK,
	CMD_ERROR,
	CRC_ERROR
}BMS_Response_t

uint16_t BMS_CRC16(const uint8_t* data, uint16_t length);
BMS_Response_t BMS_CMD(const uint8_t CMD, const uint8_t* parameters);
BMS_Response_t BMS_read_reg_block(uint16_t addr, uint32_t no_regs, uint8_t* data);
BMS_Response_t BMS_write_reg_block(uint16_t addr,uint32_t no_regs, uint8_t* data);

BMS_Response_t BMS_read_reg(uint16_t* addrs, uint8_t* data);
BMS_Response_t BMS_write_reg(uint16_t* addrs, uint8_t* data);

BMS_Response_t BMS_reset();
BMS_Response_t BMS_read_newest_events(uint32_t* bms_timestamps, uint32_t* event_timestamps, uin8_t* events_ids);
BMS_Response_t BMS_read_all_events(uint32_t* bms_timestamps, uint32_t* event_timestamps, uin8_t* events_ids);

BMS_Response_t BMS_read_pack_voltage(uint16_t* voltage);
BMS_Response_t BMS_read_pack_current(uint16_t* current);

BMS_Response_t BMS_read_bms_status(uint16_t* status);
BMS_Response_t BMS_read_SOCs(uint32_t* SOC);

BMS_Response_t BMS_read_cells_voltagse(uint16_t* voltages);
#endif /* TINYBMS_H_ */
