
EV_ECU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082ec  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  080084bc  080084bc  000184bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008668  08008668  00018668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008670  08008670  00018670  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08008674  08008674  00018674  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000000  08008678  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000434  20000070  080086e8  00020070  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200004a4  080086e8  000204a4  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002640a  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000463b  00000000  00000000  000464aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000014b8  00000000  00000000  0004aae8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000012c0  00000000  00000000  0004bfa0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00027583  00000000  00000000  0004d260  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000132b6  00000000  00000000  000747e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000d7a92  00000000  00000000  00087a99  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0015f52b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005c14  00000000  00000000  0015f5a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stab         00000084  00000000  00000000  001651bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      00000117  00000000  00000000  00165240  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080084a4 	.word	0x080084a4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	080084a4 	.word	0x080084a4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b97a 	b.w	80005bc <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	468c      	mov	ip, r1
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	9e08      	ldr	r6, [sp, #32]
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d151      	bne.n	8000394 <__udivmoddi4+0xb4>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d96d      	bls.n	80003d2 <__udivmoddi4+0xf2>
 80002f6:	fab2 fe82 	clz	lr, r2
 80002fa:	f1be 0f00 	cmp.w	lr, #0
 80002fe:	d00b      	beq.n	8000318 <__udivmoddi4+0x38>
 8000300:	f1ce 0c20 	rsb	ip, lr, #32
 8000304:	fa01 f50e 	lsl.w	r5, r1, lr
 8000308:	fa20 fc0c 	lsr.w	ip, r0, ip
 800030c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000310:	ea4c 0c05 	orr.w	ip, ip, r5
 8000314:	fa00 f40e 	lsl.w	r4, r0, lr
 8000318:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800031c:	0c25      	lsrs	r5, r4, #16
 800031e:	fbbc f8fa 	udiv	r8, ip, sl
 8000322:	fa1f f987 	uxth.w	r9, r7
 8000326:	fb0a cc18 	mls	ip, sl, r8, ip
 800032a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800032e:	fb08 f309 	mul.w	r3, r8, r9
 8000332:	42ab      	cmp	r3, r5
 8000334:	d90a      	bls.n	800034c <__udivmoddi4+0x6c>
 8000336:	19ed      	adds	r5, r5, r7
 8000338:	f108 32ff 	add.w	r2, r8, #4294967295
 800033c:	f080 8123 	bcs.w	8000586 <__udivmoddi4+0x2a6>
 8000340:	42ab      	cmp	r3, r5
 8000342:	f240 8120 	bls.w	8000586 <__udivmoddi4+0x2a6>
 8000346:	f1a8 0802 	sub.w	r8, r8, #2
 800034a:	443d      	add	r5, r7
 800034c:	1aed      	subs	r5, r5, r3
 800034e:	b2a4      	uxth	r4, r4
 8000350:	fbb5 f0fa 	udiv	r0, r5, sl
 8000354:	fb0a 5510 	mls	r5, sl, r0, r5
 8000358:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800035c:	fb00 f909 	mul.w	r9, r0, r9
 8000360:	45a1      	cmp	r9, r4
 8000362:	d909      	bls.n	8000378 <__udivmoddi4+0x98>
 8000364:	19e4      	adds	r4, r4, r7
 8000366:	f100 33ff 	add.w	r3, r0, #4294967295
 800036a:	f080 810a 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800036e:	45a1      	cmp	r9, r4
 8000370:	f240 8107 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000374:	3802      	subs	r0, #2
 8000376:	443c      	add	r4, r7
 8000378:	eba4 0409 	sub.w	r4, r4, r9
 800037c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000380:	2100      	movs	r1, #0
 8000382:	2e00      	cmp	r6, #0
 8000384:	d061      	beq.n	800044a <__udivmoddi4+0x16a>
 8000386:	fa24 f40e 	lsr.w	r4, r4, lr
 800038a:	2300      	movs	r3, #0
 800038c:	6034      	str	r4, [r6, #0]
 800038e:	6073      	str	r3, [r6, #4]
 8000390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000394:	428b      	cmp	r3, r1
 8000396:	d907      	bls.n	80003a8 <__udivmoddi4+0xc8>
 8000398:	2e00      	cmp	r6, #0
 800039a:	d054      	beq.n	8000446 <__udivmoddi4+0x166>
 800039c:	2100      	movs	r1, #0
 800039e:	e886 0021 	stmia.w	r6, {r0, r5}
 80003a2:	4608      	mov	r0, r1
 80003a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a8:	fab3 f183 	clz	r1, r3
 80003ac:	2900      	cmp	r1, #0
 80003ae:	f040 808e 	bne.w	80004ce <__udivmoddi4+0x1ee>
 80003b2:	42ab      	cmp	r3, r5
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xdc>
 80003b6:	4282      	cmp	r2, r0
 80003b8:	f200 80fa 	bhi.w	80005b0 <__udivmoddi4+0x2d0>
 80003bc:	1a84      	subs	r4, r0, r2
 80003be:	eb65 0503 	sbc.w	r5, r5, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	46ac      	mov	ip, r5
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d03f      	beq.n	800044a <__udivmoddi4+0x16a>
 80003ca:	e886 1010 	stmia.w	r6, {r4, ip}
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	b912      	cbnz	r2, 80003da <__udivmoddi4+0xfa>
 80003d4:	2701      	movs	r7, #1
 80003d6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003da:	fab7 fe87 	clz	lr, r7
 80003de:	f1be 0f00 	cmp.w	lr, #0
 80003e2:	d134      	bne.n	800044e <__udivmoddi4+0x16e>
 80003e4:	1beb      	subs	r3, r5, r7
 80003e6:	0c3a      	lsrs	r2, r7, #16
 80003e8:	fa1f fc87 	uxth.w	ip, r7
 80003ec:	2101      	movs	r1, #1
 80003ee:	fbb3 f8f2 	udiv	r8, r3, r2
 80003f2:	0c25      	lsrs	r5, r4, #16
 80003f4:	fb02 3318 	mls	r3, r2, r8, r3
 80003f8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003fc:	fb0c f308 	mul.w	r3, ip, r8
 8000400:	42ab      	cmp	r3, r5
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x134>
 8000404:	19ed      	adds	r5, r5, r7
 8000406:	f108 30ff 	add.w	r0, r8, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x132>
 800040c:	42ab      	cmp	r3, r5
 800040e:	f200 80d1 	bhi.w	80005b4 <__udivmoddi4+0x2d4>
 8000412:	4680      	mov	r8, r0
 8000414:	1aed      	subs	r5, r5, r3
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb5 f0f2 	udiv	r0, r5, r2
 800041c:	fb02 5510 	mls	r5, r2, r0, r5
 8000420:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000424:	fb0c fc00 	mul.w	ip, ip, r0
 8000428:	45a4      	cmp	ip, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x15c>
 800042c:	19e4      	adds	r4, r4, r7
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x15a>
 8000434:	45a4      	cmp	ip, r4
 8000436:	f200 80b8 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 040c 	sub.w	r4, r4, ip
 8000440:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000444:	e79d      	b.n	8000382 <__udivmoddi4+0xa2>
 8000446:	4631      	mov	r1, r6
 8000448:	4630      	mov	r0, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1ce 0420 	rsb	r4, lr, #32
 8000452:	fa05 f30e 	lsl.w	r3, r5, lr
 8000456:	fa07 f70e 	lsl.w	r7, r7, lr
 800045a:	fa20 f804 	lsr.w	r8, r0, r4
 800045e:	0c3a      	lsrs	r2, r7, #16
 8000460:	fa25 f404 	lsr.w	r4, r5, r4
 8000464:	ea48 0803 	orr.w	r8, r8, r3
 8000468:	fbb4 f1f2 	udiv	r1, r4, r2
 800046c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000470:	fb02 4411 	mls	r4, r2, r1, r4
 8000474:	fa1f fc87 	uxth.w	ip, r7
 8000478:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800047c:	fb01 f30c 	mul.w	r3, r1, ip
 8000480:	42ab      	cmp	r3, r5
 8000482:	fa00 f40e 	lsl.w	r4, r0, lr
 8000486:	d909      	bls.n	800049c <__udivmoddi4+0x1bc>
 8000488:	19ed      	adds	r5, r5, r7
 800048a:	f101 30ff 	add.w	r0, r1, #4294967295
 800048e:	f080 808a 	bcs.w	80005a6 <__udivmoddi4+0x2c6>
 8000492:	42ab      	cmp	r3, r5
 8000494:	f240 8087 	bls.w	80005a6 <__udivmoddi4+0x2c6>
 8000498:	3902      	subs	r1, #2
 800049a:	443d      	add	r5, r7
 800049c:	1aeb      	subs	r3, r5, r3
 800049e:	fa1f f588 	uxth.w	r5, r8
 80004a2:	fbb3 f0f2 	udiv	r0, r3, r2
 80004a6:	fb02 3310 	mls	r3, r2, r0, r3
 80004aa:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004ae:	fb00 f30c 	mul.w	r3, r0, ip
 80004b2:	42ab      	cmp	r3, r5
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x1e6>
 80004b6:	19ed      	adds	r5, r5, r7
 80004b8:	f100 38ff 	add.w	r8, r0, #4294967295
 80004bc:	d26f      	bcs.n	800059e <__udivmoddi4+0x2be>
 80004be:	42ab      	cmp	r3, r5
 80004c0:	d96d      	bls.n	800059e <__udivmoddi4+0x2be>
 80004c2:	3802      	subs	r0, #2
 80004c4:	443d      	add	r5, r7
 80004c6:	1aeb      	subs	r3, r5, r3
 80004c8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004cc:	e78f      	b.n	80003ee <__udivmoddi4+0x10e>
 80004ce:	f1c1 0720 	rsb	r7, r1, #32
 80004d2:	fa22 f807 	lsr.w	r8, r2, r7
 80004d6:	408b      	lsls	r3, r1
 80004d8:	fa05 f401 	lsl.w	r4, r5, r1
 80004dc:	ea48 0303 	orr.w	r3, r8, r3
 80004e0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004e4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004e8:	40fd      	lsrs	r5, r7
 80004ea:	ea4e 0e04 	orr.w	lr, lr, r4
 80004ee:	fbb5 f9fc 	udiv	r9, r5, ip
 80004f2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004f6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004fa:	fa1f f883 	uxth.w	r8, r3
 80004fe:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000502:	fb09 f408 	mul.w	r4, r9, r8
 8000506:	42ac      	cmp	r4, r5
 8000508:	fa02 f201 	lsl.w	r2, r2, r1
 800050c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000510:	d908      	bls.n	8000524 <__udivmoddi4+0x244>
 8000512:	18ed      	adds	r5, r5, r3
 8000514:	f109 30ff 	add.w	r0, r9, #4294967295
 8000518:	d243      	bcs.n	80005a2 <__udivmoddi4+0x2c2>
 800051a:	42ac      	cmp	r4, r5
 800051c:	d941      	bls.n	80005a2 <__udivmoddi4+0x2c2>
 800051e:	f1a9 0902 	sub.w	r9, r9, #2
 8000522:	441d      	add	r5, r3
 8000524:	1b2d      	subs	r5, r5, r4
 8000526:	fa1f fe8e 	uxth.w	lr, lr
 800052a:	fbb5 f0fc 	udiv	r0, r5, ip
 800052e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000532:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000536:	fb00 f808 	mul.w	r8, r0, r8
 800053a:	45a0      	cmp	r8, r4
 800053c:	d907      	bls.n	800054e <__udivmoddi4+0x26e>
 800053e:	18e4      	adds	r4, r4, r3
 8000540:	f100 35ff 	add.w	r5, r0, #4294967295
 8000544:	d229      	bcs.n	800059a <__udivmoddi4+0x2ba>
 8000546:	45a0      	cmp	r8, r4
 8000548:	d927      	bls.n	800059a <__udivmoddi4+0x2ba>
 800054a:	3802      	subs	r0, #2
 800054c:	441c      	add	r4, r3
 800054e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000552:	eba4 0408 	sub.w	r4, r4, r8
 8000556:	fba0 8902 	umull	r8, r9, r0, r2
 800055a:	454c      	cmp	r4, r9
 800055c:	46c6      	mov	lr, r8
 800055e:	464d      	mov	r5, r9
 8000560:	d315      	bcc.n	800058e <__udivmoddi4+0x2ae>
 8000562:	d012      	beq.n	800058a <__udivmoddi4+0x2aa>
 8000564:	b156      	cbz	r6, 800057c <__udivmoddi4+0x29c>
 8000566:	ebba 030e 	subs.w	r3, sl, lr
 800056a:	eb64 0405 	sbc.w	r4, r4, r5
 800056e:	fa04 f707 	lsl.w	r7, r4, r7
 8000572:	40cb      	lsrs	r3, r1
 8000574:	431f      	orrs	r7, r3
 8000576:	40cc      	lsrs	r4, r1
 8000578:	6037      	str	r7, [r6, #0]
 800057a:	6074      	str	r4, [r6, #4]
 800057c:	2100      	movs	r1, #0
 800057e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000582:	4618      	mov	r0, r3
 8000584:	e6f8      	b.n	8000378 <__udivmoddi4+0x98>
 8000586:	4690      	mov	r8, r2
 8000588:	e6e0      	b.n	800034c <__udivmoddi4+0x6c>
 800058a:	45c2      	cmp	sl, r8
 800058c:	d2ea      	bcs.n	8000564 <__udivmoddi4+0x284>
 800058e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000592:	eb69 0503 	sbc.w	r5, r9, r3
 8000596:	3801      	subs	r0, #1
 8000598:	e7e4      	b.n	8000564 <__udivmoddi4+0x284>
 800059a:	4628      	mov	r0, r5
 800059c:	e7d7      	b.n	800054e <__udivmoddi4+0x26e>
 800059e:	4640      	mov	r0, r8
 80005a0:	e791      	b.n	80004c6 <__udivmoddi4+0x1e6>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e7be      	b.n	8000524 <__udivmoddi4+0x244>
 80005a6:	4601      	mov	r1, r0
 80005a8:	e778      	b.n	800049c <__udivmoddi4+0x1bc>
 80005aa:	3802      	subs	r0, #2
 80005ac:	443c      	add	r4, r7
 80005ae:	e745      	b.n	800043c <__udivmoddi4+0x15c>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e708      	b.n	80003c6 <__udivmoddi4+0xe6>
 80005b4:	f1a8 0802 	sub.w	r8, r8, #2
 80005b8:	443d      	add	r5, r7
 80005ba:	e72b      	b.n	8000414 <__udivmoddi4+0x134>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005c4:	4a0e      	ldr	r2, [pc, #56]	; (8000600 <HAL_Init+0x40>)
 80005c6:	4b0e      	ldr	r3, [pc, #56]	; (8000600 <HAL_Init+0x40>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005d0:	4a0b      	ldr	r2, [pc, #44]	; (8000600 <HAL_Init+0x40>)
 80005d2:	4b0b      	ldr	r3, [pc, #44]	; (8000600 <HAL_Init+0x40>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005dc:	4a08      	ldr	r2, [pc, #32]	; (8000600 <HAL_Init+0x40>)
 80005de:	4b08      	ldr	r3, [pc, #32]	; (8000600 <HAL_Init+0x40>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005e8:	2003      	movs	r0, #3
 80005ea:	f000 ff5b 	bl	80014a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ee:	2000      	movs	r0, #0
 80005f0:	f000 f808 	bl	8000604 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005f4:	f006 fc86 	bl	8006f04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005f8:	2300      	movs	r3, #0
}
 80005fa:	4618      	mov	r0, r3
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40023c00 	.word	0x40023c00

08000604 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800060c:	4b12      	ldr	r3, [pc, #72]	; (8000658 <HAL_InitTick+0x54>)
 800060e:	681a      	ldr	r2, [r3, #0]
 8000610:	4b12      	ldr	r3, [pc, #72]	; (800065c <HAL_InitTick+0x58>)
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	4619      	mov	r1, r3
 8000616:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800061a:	fbb3 f3f1 	udiv	r3, r3, r1
 800061e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000622:	4618      	mov	r0, r3
 8000624:	f000 ff73 	bl	800150e <HAL_SYSTICK_Config>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800062e:	2301      	movs	r3, #1
 8000630:	e00e      	b.n	8000650 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	2b0f      	cmp	r3, #15
 8000636:	d80a      	bhi.n	800064e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000638:	2200      	movs	r2, #0
 800063a:	6879      	ldr	r1, [r7, #4]
 800063c:	f04f 30ff 	mov.w	r0, #4294967295
 8000640:	f000 ff3b 	bl	80014ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000644:	4a06      	ldr	r2, [pc, #24]	; (8000660 <HAL_InitTick+0x5c>)
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800064a:	2300      	movs	r3, #0
 800064c:	e000      	b.n	8000650 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800064e:	2301      	movs	r3, #1
}
 8000650:	4618      	mov	r0, r3
 8000652:	3708      	adds	r7, #8
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	20000008 	.word	0x20000008
 800065c:	20000004 	.word	0x20000004
 8000660:	20000000 	.word	0x20000000

08000664 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000668:	4b06      	ldr	r3, [pc, #24]	; (8000684 <HAL_IncTick+0x20>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	461a      	mov	r2, r3
 800066e:	4b06      	ldr	r3, [pc, #24]	; (8000688 <HAL_IncTick+0x24>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	4413      	add	r3, r2
 8000674:	4a04      	ldr	r2, [pc, #16]	; (8000688 <HAL_IncTick+0x24>)
 8000676:	6013      	str	r3, [r2, #0]
}
 8000678:	bf00      	nop
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	20000004 	.word	0x20000004
 8000688:	200000a4 	.word	0x200000a4

0800068c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  return uwTick;
 8000690:	4b03      	ldr	r3, [pc, #12]	; (80006a0 <HAL_GetTick+0x14>)
 8000692:	681b      	ldr	r3, [r3, #0]
}
 8000694:	4618      	mov	r0, r3
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	200000a4 	.word	0x200000a4

080006a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b084      	sub	sp, #16
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006ac:	f7ff ffee 	bl	800068c <HAL_GetTick>
 80006b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006bc:	d005      	beq.n	80006ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80006be:	4b09      	ldr	r3, [pc, #36]	; (80006e4 <HAL_Delay+0x40>)
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	461a      	mov	r2, r3
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	4413      	add	r3, r2
 80006c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80006ca:	bf00      	nop
 80006cc:	f7ff ffde 	bl	800068c <HAL_GetTick>
 80006d0:	4602      	mov	r2, r0
 80006d2:	68bb      	ldr	r3, [r7, #8]
 80006d4:	1ad2      	subs	r2, r2, r3
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	429a      	cmp	r2, r3
 80006da:	d3f7      	bcc.n	80006cc <HAL_Delay+0x28>
  {
  }
}
 80006dc:	bf00      	nop
 80006de:	3710      	adds	r7, #16
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	20000004 	.word	0x20000004

080006e8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80006f0:	2300      	movs	r3, #0
 80006f2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d101      	bne.n	80006fe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80006fa:	2301      	movs	r3, #1
 80006fc:	e033      	b.n	8000766 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000702:	2b00      	cmp	r3, #0
 8000704:	d109      	bne.n	800071a <HAL_ADC_Init+0x32>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	2200      	movs	r2, #0
 800070a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	2200      	movs	r2, #0
 8000710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000714:	6878      	ldr	r0, [r7, #4]
 8000716:	f005 fdcf 	bl	80062b8 <HAL_ADC_MspInit>
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800071e:	f003 0310 	and.w	r3, r3, #16
 8000722:	2b00      	cmp	r3, #0
 8000724:	d118      	bne.n	8000758 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800072a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800072e:	f023 0302 	bic.w	r3, r3, #2
 8000732:	f043 0202 	orr.w	r2, r3, #2
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800073a:	6878      	ldr	r0, [r7, #4]
 800073c:	f000 fb70 	bl	8000e20 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	2200      	movs	r2, #0
 8000744:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800074a:	f023 0303 	bic.w	r3, r3, #3
 800074e:	f043 0201 	orr.w	r2, r3, #1
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	641a      	str	r2, [r3, #64]	; 0x40
 8000756:	e001      	b.n	800075c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000758:	2301      	movs	r3, #1
 800075a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	2200      	movs	r2, #0
 8000760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000764:	7bfb      	ldrb	r3, [r7, #15]
}
 8000766:	4618      	mov	r0, r3
 8000768:	3710      	adds	r7, #16
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}

0800076e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800076e:	b580      	push	{r7, lr}
 8000770:	b084      	sub	sp, #16
 8000772:	af00      	add	r7, sp, #0
 8000774:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8000776:	2300      	movs	r3, #0
 8000778:	60fb      	str	r3, [r7, #12]
 800077a:	2300      	movs	r3, #0
 800077c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	f003 0302 	and.w	r3, r3, #2
 8000788:	2b02      	cmp	r3, #2
 800078a:	bf0c      	ite	eq
 800078c:	2301      	moveq	r3, #1
 800078e:	2300      	movne	r3, #0
 8000790:	b2db      	uxtb	r3, r3
 8000792:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	685b      	ldr	r3, [r3, #4]
 800079a:	f003 0320 	and.w	r3, r3, #32
 800079e:	2b20      	cmp	r3, #32
 80007a0:	bf0c      	ite	eq
 80007a2:	2301      	moveq	r3, #1
 80007a4:	2300      	movne	r3, #0
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d049      	beq.n	8000844 <HAL_ADC_IRQHandler+0xd6>
 80007b0:	68bb      	ldr	r3, [r7, #8]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d046      	beq.n	8000844 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ba:	f003 0310 	and.w	r3, r3, #16
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d105      	bne.n	80007ce <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	689b      	ldr	r3, [r3, #8]
 80007d4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d12b      	bne.n	8000834 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d127      	bne.n	8000834 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007ea:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d006      	beq.n	8000800 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	689b      	ldr	r3, [r3, #8]
 80007f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d119      	bne.n	8000834 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	687a      	ldr	r2, [r7, #4]
 8000806:	6812      	ldr	r2, [r2, #0]
 8000808:	6852      	ldr	r2, [r2, #4]
 800080a:	f022 0220 	bic.w	r2, r2, #32
 800080e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000814:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000820:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000824:	2b00      	cmp	r3, #0
 8000826:	d105      	bne.n	8000834 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082c:	f043 0201 	orr.w	r2, r3, #1
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Conversion complete callback */ 
    HAL_ADC_ConvCpltCallback(hadc);
 8000834:	6878      	ldr	r0, [r7, #4]
 8000836:	f006 f901 	bl	8006a3c <HAL_ADC_ConvCpltCallback>
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	f06f 0212 	mvn.w	r2, #18
 8000842:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	f003 0304 	and.w	r3, r3, #4
 800084e:	2b04      	cmp	r3, #4
 8000850:	bf0c      	ite	eq
 8000852:	2301      	moveq	r3, #1
 8000854:	2300      	movne	r3, #0
 8000856:	b2db      	uxtb	r3, r3
 8000858:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	685b      	ldr	r3, [r3, #4]
 8000860:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000864:	2b80      	cmp	r3, #128	; 0x80
 8000866:	bf0c      	ite	eq
 8000868:	2301      	moveq	r3, #1
 800086a:	2300      	movne	r3, #0
 800086c:	b2db      	uxtb	r3, r3
 800086e:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d057      	beq.n	8000926 <HAL_ADC_IRQHandler+0x1b8>
 8000876:	68bb      	ldr	r3, [r7, #8]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d054      	beq.n	8000926 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000880:	f003 0310 	and.w	r3, r3, #16
 8000884:	2b00      	cmp	r3, #0
 8000886:	d105      	bne.n	8000894 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	689b      	ldr	r3, [r3, #8]
 800089a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d139      	bne.n	8000916 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008a8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d006      	beq.n	80008be <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	689b      	ldr	r3, [r3, #8]
 80008b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d12b      	bne.n	8000916 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	685b      	ldr	r3, [r3, #4]
 80008c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d124      	bne.n	8000916 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	689b      	ldr	r3, [r3, #8]
 80008d2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d11d      	bne.n	8000916 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	699b      	ldr	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d119      	bne.n	8000916 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	687a      	ldr	r2, [r7, #4]
 80008e8:	6812      	ldr	r2, [r2, #0]
 80008ea:	6852      	ldr	r2, [r2, #4]
 80008ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80008f0:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000902:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000906:	2b00      	cmp	r3, #0
 8000908:	d105      	bne.n	8000916 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090e:	f043 0201 	orr.w	r2, r3, #1
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }

    /* Conversion complete callback */ 
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000916:	6878      	ldr	r0, [r7, #4]
 8000918:	f000 fbf4 	bl	8001104 <HAL_ADCEx_InjectedConvCpltCallback>
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	f06f 020c 	mvn.w	r2, #12
 8000924:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	f003 0301 	and.w	r3, r3, #1
 8000930:	2b01      	cmp	r3, #1
 8000932:	bf0c      	ite	eq
 8000934:	2301      	moveq	r3, #1
 8000936:	2300      	movne	r3, #0
 8000938:	b2db      	uxtb	r3, r3
 800093a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	685b      	ldr	r3, [r3, #4]
 8000942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000946:	2b40      	cmp	r3, #64	; 0x40
 8000948:	bf0c      	ite	eq
 800094a:	2301      	moveq	r3, #1
 800094c:	2300      	movne	r3, #0
 800094e:	b2db      	uxtb	r3, r3
 8000950:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d017      	beq.n	8000988 <HAL_ADC_IRQHandler+0x21a>
 8000958:	68bb      	ldr	r3, [r7, #8]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d014      	beq.n	8000988 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	f003 0301 	and.w	r3, r3, #1
 8000968:	2b01      	cmp	r3, #1
 800096a:	d10d      	bne.n	8000988 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000970:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000978:	6878      	ldr	r0, [r7, #4]
 800097a:	f000 f915 	bl	8000ba8 <HAL_ADC_LevelOutOfWindowCallback>
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	f06f 0201 	mvn.w	r2, #1
 8000986:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	f003 0320 	and.w	r3, r3, #32
 8000992:	2b20      	cmp	r3, #32
 8000994:	bf0c      	ite	eq
 8000996:	2301      	moveq	r3, #1
 8000998:	2300      	movne	r3, #0
 800099a:	b2db      	uxtb	r3, r3
 800099c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	685b      	ldr	r3, [r3, #4]
 80009a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80009a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80009ac:	bf0c      	ite	eq
 80009ae:	2301      	moveq	r3, #1
 80009b0:	2300      	movne	r3, #0
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d015      	beq.n	80009e8 <HAL_ADC_IRQHandler+0x27a>
 80009bc:	68bb      	ldr	r3, [r7, #8]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d012      	beq.n	80009e8 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009c6:	f043 0202 	orr.w	r2, r3, #2
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	f06f 0220 	mvn.w	r2, #32
 80009d6:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADC_ErrorCallback(hadc);
 80009d8:	6878      	ldr	r0, [r7, #4]
 80009da:	f000 f8ef 	bl	8000bbc <HAL_ADC_ErrorCallback>
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	f06f 0220 	mvn.w	r2, #32
 80009e6:	601a      	str	r2, [r3, #0]
  }
}
 80009e8:	bf00      	nop
 80009ea:	3710      	adds	r7, #16
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}

080009f0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b086      	sub	sp, #24
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	60f8      	str	r0, [r7, #12]
 80009f8:	60b9      	str	r1, [r7, #8]
 80009fa:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80009fc:	2300      	movs	r3, #0
 80009fe:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000a06:	2b01      	cmp	r3, #1
 8000a08:	d101      	bne.n	8000a0e <HAL_ADC_Start_DMA+0x1e>
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	e0b0      	b.n	8000b70 <HAL_ADC_Start_DMA+0x180>
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	2201      	movs	r2, #1
 8000a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	689b      	ldr	r3, [r3, #8]
 8000a1c:	f003 0301 	and.w	r3, r3, #1
 8000a20:	2b01      	cmp	r3, #1
 8000a22:	d018      	beq.n	8000a56 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	68fa      	ldr	r2, [r7, #12]
 8000a2a:	6812      	ldr	r2, [r2, #0]
 8000a2c:	6892      	ldr	r2, [r2, #8]
 8000a2e:	f042 0201 	orr.w	r2, r2, #1
 8000a32:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000a34:	4b50      	ldr	r3, [pc, #320]	; (8000b78 <HAL_ADC_Start_DMA+0x188>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a50      	ldr	r2, [pc, #320]	; (8000b7c <HAL_ADC_Start_DMA+0x18c>)
 8000a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a3e:	0c9a      	lsrs	r2, r3, #18
 8000a40:	4613      	mov	r3, r2
 8000a42:	005b      	lsls	r3, r3, #1
 8000a44:	4413      	add	r3, r2
 8000a46:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8000a48:	e002      	b.n	8000a50 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8000a4a:	693b      	ldr	r3, [r7, #16]
 8000a4c:	3b01      	subs	r3, #1
 8000a4e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8000a50:	693b      	ldr	r3, [r7, #16]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d1f9      	bne.n	8000a4a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	689b      	ldr	r3, [r3, #8]
 8000a5c:	f003 0301 	and.w	r3, r3, #1
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	f000 8084 	beq.w	8000b6e <HAL_ADC_Start_DMA+0x17e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000a6e:	f023 0301 	bic.w	r3, r3, #1
 8000a72:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	685b      	ldr	r3, [r3, #4]
 8000a80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d007      	beq.n	8000a98 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000a90:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d006      	beq.n	8000ab2 <HAL_ADC_Start_DMA+0xc2>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aa8:	f023 0206 	bic.w	r2, r3, #6
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	645a      	str	r2, [r3, #68]	; 0x44
 8000ab0:	e002      	b.n	8000ab8 <HAL_ADC_Start_DMA+0xc8>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	2200      	movs	r2, #0
 8000abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000ac0:	4b2f      	ldr	r3, [pc, #188]	; (8000b80 <HAL_ADC_Start_DMA+0x190>)
 8000ac2:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ac8:	4a2e      	ldr	r2, [pc, #184]	; (8000b84 <HAL_ADC_Start_DMA+0x194>)
 8000aca:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ad0:	4a2d      	ldr	r2, [pc, #180]	; (8000b88 <HAL_ADC_Start_DMA+0x198>)
 8000ad2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ad8:	4a2c      	ldr	r2, [pc, #176]	; (8000b8c <HAL_ADC_Start_DMA+0x19c>)
 8000ada:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000ae4:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	68fa      	ldr	r2, [r7, #12]
 8000aec:	6812      	ldr	r2, [r2, #0]
 8000aee:	6852      	ldr	r2, [r2, #4]
 8000af0:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8000af4:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	68fa      	ldr	r2, [r7, #12]
 8000afc:	6812      	ldr	r2, [r2, #0]
 8000afe:	6892      	ldr	r2, [r2, #8]
 8000b00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000b04:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	334c      	adds	r3, #76	; 0x4c
 8000b10:	4619      	mov	r1, r3
 8000b12:	68ba      	ldr	r2, [r7, #8]
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	f000 ff31 	bl	800197c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000b1a:	697b      	ldr	r3, [r7, #20]
 8000b1c:	685b      	ldr	r3, [r3, #4]
 8000b1e:	f003 031f 	and.w	r3, r3, #31
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d10f      	bne.n	8000b46 <HAL_ADC_Start_DMA+0x156>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	689b      	ldr	r3, [r3, #8]
 8000b2c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d11c      	bne.n	8000b6e <HAL_ADC_Start_DMA+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	68fa      	ldr	r2, [r7, #12]
 8000b3a:	6812      	ldr	r2, [r2, #0]
 8000b3c:	6892      	ldr	r2, [r2, #8]
 8000b3e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000b42:	609a      	str	r2, [r3, #8]
 8000b44:	e013      	b.n	8000b6e <HAL_ADC_Start_DMA+0x17e>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4a11      	ldr	r2, [pc, #68]	; (8000b90 <HAL_ADC_Start_DMA+0x1a0>)
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d10e      	bne.n	8000b6e <HAL_ADC_Start_DMA+0x17e>
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	689b      	ldr	r3, [r3, #8]
 8000b56:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d107      	bne.n	8000b6e <HAL_ADC_Start_DMA+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	68fa      	ldr	r2, [r7, #12]
 8000b64:	6812      	ldr	r2, [r2, #0]
 8000b66:	6892      	ldr	r2, [r2, #8]
 8000b68:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000b6c:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8000b6e:	2300      	movs	r3, #0
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	3718      	adds	r7, #24
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	20000008 	.word	0x20000008
 8000b7c:	431bde83 	.word	0x431bde83
 8000b80:	40012300 	.word	0x40012300
 8000b84:	08001015 	.word	0x08001015
 8000b88:	080010bb 	.word	0x080010bb
 8000b8c:	080010d7 	.word	0x080010d7
 8000b90:	40012000 	.word	0x40012000

08000b94 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8000b9c:	bf00      	nop
 8000b9e:	370c      	adds	r7, #12
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr

08000ba8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8000bb0:	bf00      	nop
 8000bb2:	370c      	adds	r7, #12
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr

08000bbc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8000bc4:	bf00      	nop
 8000bc6:	370c      	adds	r7, #12
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr

08000bd0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000bd0:	b490      	push	{r4, r7}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
 8000bd8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000be4:	2b01      	cmp	r3, #1
 8000be6:	d101      	bne.n	8000bec <HAL_ADC_ConfigChannel+0x1c>
 8000be8:	2302      	movs	r3, #2
 8000bea:	e109      	b.n	8000e00 <HAL_ADC_ConfigChannel+0x230>
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	2201      	movs	r2, #1
 8000bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	2b09      	cmp	r3, #9
 8000bfa:	d926      	bls.n	8000c4a <HAL_ADC_ConfigChannel+0x7a>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681a      	ldr	r2, [r3, #0]
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	68d9      	ldr	r1, [r3, #12]
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	b29b      	uxth	r3, r3
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	4603      	mov	r3, r0
 8000c10:	005b      	lsls	r3, r3, #1
 8000c12:	4403      	add	r3, r0
 8000c14:	3b1e      	subs	r3, #30
 8000c16:	2007      	movs	r0, #7
 8000c18:	fa00 f303 	lsl.w	r3, r0, r3
 8000c1c:	43db      	mvns	r3, r3
 8000c1e:	400b      	ands	r3, r1
 8000c20:	60d3      	str	r3, [r2, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681a      	ldr	r2, [r3, #0]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	68d9      	ldr	r1, [r3, #12]
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	6898      	ldr	r0, [r3, #8]
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	b29b      	uxth	r3, r3
 8000c36:	461c      	mov	r4, r3
 8000c38:	4623      	mov	r3, r4
 8000c3a:	005b      	lsls	r3, r3, #1
 8000c3c:	4423      	add	r3, r4
 8000c3e:	3b1e      	subs	r3, #30
 8000c40:	fa00 f303 	lsl.w	r3, r0, r3
 8000c44:	430b      	orrs	r3, r1
 8000c46:	60d3      	str	r3, [r2, #12]
 8000c48:	e023      	b.n	8000c92 <HAL_ADC_ConfigChannel+0xc2>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	6919      	ldr	r1, [r3, #16]
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	b29b      	uxth	r3, r3
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	005b      	lsls	r3, r3, #1
 8000c60:	4403      	add	r3, r0
 8000c62:	2007      	movs	r0, #7
 8000c64:	fa00 f303 	lsl.w	r3, r0, r3
 8000c68:	43db      	mvns	r3, r3
 8000c6a:	400b      	ands	r3, r1
 8000c6c:	6113      	str	r3, [r2, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681a      	ldr	r2, [r3, #0]
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	6919      	ldr	r1, [r3, #16]
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	6898      	ldr	r0, [r3, #8]
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	b29b      	uxth	r3, r3
 8000c82:	461c      	mov	r4, r3
 8000c84:	4623      	mov	r3, r4
 8000c86:	005b      	lsls	r3, r3, #1
 8000c88:	4423      	add	r3, r4
 8000c8a:	fa00 f303 	lsl.w	r3, r0, r3
 8000c8e:	430b      	orrs	r3, r1
 8000c90:	6113      	str	r3, [r2, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	2b06      	cmp	r3, #6
 8000c98:	d824      	bhi.n	8000ce4 <HAL_ADC_ConfigChannel+0x114>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	6819      	ldr	r1, [r3, #0]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	685a      	ldr	r2, [r3, #4]
 8000ca8:	4613      	mov	r3, r2
 8000caa:	009b      	lsls	r3, r3, #2
 8000cac:	4413      	add	r3, r2
 8000cae:	3b05      	subs	r3, #5
 8000cb0:	221f      	movs	r2, #31
 8000cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb6:	43db      	mvns	r3, r3
 8000cb8:	4003      	ands	r3, r0
 8000cba:	634b      	str	r3, [r1, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	6819      	ldr	r1, [r3, #0]
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	b29b      	uxth	r3, r3
 8000ccc:	461c      	mov	r4, r3
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	685a      	ldr	r2, [r3, #4]
 8000cd2:	4613      	mov	r3, r2
 8000cd4:	009b      	lsls	r3, r3, #2
 8000cd6:	4413      	add	r3, r2
 8000cd8:	3b05      	subs	r3, #5
 8000cda:	fa04 f303 	lsl.w	r3, r4, r3
 8000cde:	4303      	orrs	r3, r0
 8000ce0:	634b      	str	r3, [r1, #52]	; 0x34
 8000ce2:	e04c      	b.n	8000d7e <HAL_ADC_ConfigChannel+0x1ae>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	2b0c      	cmp	r3, #12
 8000cea:	d824      	bhi.n	8000d36 <HAL_ADC_ConfigChannel+0x166>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	6819      	ldr	r1, [r3, #0]
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	685a      	ldr	r2, [r3, #4]
 8000cfa:	4613      	mov	r3, r2
 8000cfc:	009b      	lsls	r3, r3, #2
 8000cfe:	4413      	add	r3, r2
 8000d00:	3b23      	subs	r3, #35	; 0x23
 8000d02:	221f      	movs	r2, #31
 8000d04:	fa02 f303 	lsl.w	r3, r2, r3
 8000d08:	43db      	mvns	r3, r3
 8000d0a:	4003      	ands	r3, r0
 8000d0c:	630b      	str	r3, [r1, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6819      	ldr	r1, [r3, #0]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	b29b      	uxth	r3, r3
 8000d1e:	461c      	mov	r4, r3
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	685a      	ldr	r2, [r3, #4]
 8000d24:	4613      	mov	r3, r2
 8000d26:	009b      	lsls	r3, r3, #2
 8000d28:	4413      	add	r3, r2
 8000d2a:	3b23      	subs	r3, #35	; 0x23
 8000d2c:	fa04 f303 	lsl.w	r3, r4, r3
 8000d30:	4303      	orrs	r3, r0
 8000d32:	630b      	str	r3, [r1, #48]	; 0x30
 8000d34:	e023      	b.n	8000d7e <HAL_ADC_ConfigChannel+0x1ae>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6819      	ldr	r1, [r3, #0]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	685a      	ldr	r2, [r3, #4]
 8000d44:	4613      	mov	r3, r2
 8000d46:	009b      	lsls	r3, r3, #2
 8000d48:	4413      	add	r3, r2
 8000d4a:	3b41      	subs	r3, #65	; 0x41
 8000d4c:	221f      	movs	r2, #31
 8000d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d52:	43db      	mvns	r3, r3
 8000d54:	4003      	ands	r3, r0
 8000d56:	62cb      	str	r3, [r1, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	6819      	ldr	r1, [r3, #0]
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	b29b      	uxth	r3, r3
 8000d68:	461c      	mov	r4, r3
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	685a      	ldr	r2, [r3, #4]
 8000d6e:	4613      	mov	r3, r2
 8000d70:	009b      	lsls	r3, r3, #2
 8000d72:	4413      	add	r3, r2
 8000d74:	3b41      	subs	r3, #65	; 0x41
 8000d76:	fa04 f303 	lsl.w	r3, r4, r3
 8000d7a:	4303      	orrs	r3, r0
 8000d7c:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000d7e:	4b23      	ldr	r3, [pc, #140]	; (8000e0c <HAL_ADC_ConfigChannel+0x23c>)
 8000d80:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4a22      	ldr	r2, [pc, #136]	; (8000e10 <HAL_ADC_ConfigChannel+0x240>)
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d109      	bne.n	8000da0 <HAL_ADC_ConfigChannel+0x1d0>
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	2b12      	cmp	r3, #18
 8000d92:	d105      	bne.n	8000da0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a1a      	ldr	r2, [pc, #104]	; (8000e10 <HAL_ADC_ConfigChannel+0x240>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d125      	bne.n	8000df6 <HAL_ADC_ConfigChannel+0x226>
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4a19      	ldr	r2, [pc, #100]	; (8000e14 <HAL_ADC_ConfigChannel+0x244>)
 8000db0:	4293      	cmp	r3, r2
 8000db2:	d003      	beq.n	8000dbc <HAL_ADC_ConfigChannel+0x1ec>
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	2b11      	cmp	r3, #17
 8000dba:	d11c      	bne.n	8000df6 <HAL_ADC_ConfigChannel+0x226>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a11      	ldr	r2, [pc, #68]	; (8000e14 <HAL_ADC_ConfigChannel+0x244>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d111      	bne.n	8000df6 <HAL_ADC_ConfigChannel+0x226>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000dd2:	4b11      	ldr	r3, [pc, #68]	; (8000e18 <HAL_ADC_ConfigChannel+0x248>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4a11      	ldr	r2, [pc, #68]	; (8000e1c <HAL_ADC_ConfigChannel+0x24c>)
 8000dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8000ddc:	0c9a      	lsrs	r2, r3, #18
 8000dde:	4613      	mov	r3, r2
 8000de0:	009b      	lsls	r3, r3, #2
 8000de2:	4413      	add	r3, r2
 8000de4:	005b      	lsls	r3, r3, #1
 8000de6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000de8:	e002      	b.n	8000df0 <HAL_ADC_ConfigChannel+0x220>
      {
        counter--;
 8000dea:	68bb      	ldr	r3, [r7, #8]
 8000dec:	3b01      	subs	r3, #1
 8000dee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d1f9      	bne.n	8000dea <HAL_ADC_ConfigChannel+0x21a>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	2200      	movs	r2, #0
 8000dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000dfe:	2300      	movs	r3, #0
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	3710      	adds	r7, #16
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bc90      	pop	{r4, r7}
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	40012300 	.word	0x40012300
 8000e10:	40012000 	.word	0x40012000
 8000e14:	10000012 	.word	0x10000012
 8000e18:	20000008 	.word	0x20000008
 8000e1c:	431bde83 	.word	0x431bde83

08000e20 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b085      	sub	sp, #20
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000e28:	4b78      	ldr	r3, [pc, #480]	; (800100c <ADC_Init+0x1ec>)
 8000e2a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	685a      	ldr	r2, [r3, #4]
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	431a      	orrs	r2, r3
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	687a      	ldr	r2, [r7, #4]
 8000e4c:	6812      	ldr	r2, [r2, #0]
 8000e4e:	6852      	ldr	r2, [r2, #4]
 8000e50:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000e54:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	687a      	ldr	r2, [r7, #4]
 8000e5c:	6812      	ldr	r2, [r2, #0]
 8000e5e:	6851      	ldr	r1, [r2, #4]
 8000e60:	687a      	ldr	r2, [r7, #4]
 8000e62:	6912      	ldr	r2, [r2, #16]
 8000e64:	0212      	lsls	r2, r2, #8
 8000e66:	430a      	orrs	r2, r1
 8000e68:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	687a      	ldr	r2, [r7, #4]
 8000e70:	6812      	ldr	r2, [r2, #0]
 8000e72:	6852      	ldr	r2, [r2, #4]
 8000e74:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000e78:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	687a      	ldr	r2, [r7, #4]
 8000e80:	6812      	ldr	r2, [r2, #0]
 8000e82:	6851      	ldr	r1, [r2, #4]
 8000e84:	687a      	ldr	r2, [r7, #4]
 8000e86:	6892      	ldr	r2, [r2, #8]
 8000e88:	430a      	orrs	r2, r1
 8000e8a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	687a      	ldr	r2, [r7, #4]
 8000e92:	6812      	ldr	r2, [r2, #0]
 8000e94:	6892      	ldr	r2, [r2, #8]
 8000e96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000e9a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	687a      	ldr	r2, [r7, #4]
 8000ea2:	6812      	ldr	r2, [r2, #0]
 8000ea4:	6891      	ldr	r1, [r2, #8]
 8000ea6:	687a      	ldr	r2, [r7, #4]
 8000ea8:	68d2      	ldr	r2, [r2, #12]
 8000eaa:	430a      	orrs	r2, r1
 8000eac:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eb2:	4a57      	ldr	r2, [pc, #348]	; (8001010 <ADC_Init+0x1f0>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d022      	beq.n	8000efe <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	687a      	ldr	r2, [r7, #4]
 8000ebe:	6812      	ldr	r2, [r2, #0]
 8000ec0:	6892      	ldr	r2, [r2, #8]
 8000ec2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000ec6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	687a      	ldr	r2, [r7, #4]
 8000ece:	6812      	ldr	r2, [r2, #0]
 8000ed0:	6891      	ldr	r1, [r2, #8]
 8000ed2:	687a      	ldr	r2, [r7, #4]
 8000ed4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8000ed6:	430a      	orrs	r2, r1
 8000ed8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	687a      	ldr	r2, [r7, #4]
 8000ee0:	6812      	ldr	r2, [r2, #0]
 8000ee2:	6892      	ldr	r2, [r2, #8]
 8000ee4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000ee8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	687a      	ldr	r2, [r7, #4]
 8000ef0:	6812      	ldr	r2, [r2, #0]
 8000ef2:	6891      	ldr	r1, [r2, #8]
 8000ef4:	687a      	ldr	r2, [r7, #4]
 8000ef6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000ef8:	430a      	orrs	r2, r1
 8000efa:	609a      	str	r2, [r3, #8]
 8000efc:	e00f      	b.n	8000f1e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	687a      	ldr	r2, [r7, #4]
 8000f04:	6812      	ldr	r2, [r2, #0]
 8000f06:	6892      	ldr	r2, [r2, #8]
 8000f08:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000f0c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	687a      	ldr	r2, [r7, #4]
 8000f14:	6812      	ldr	r2, [r2, #0]
 8000f16:	6892      	ldr	r2, [r2, #8]
 8000f18:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000f1c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	687a      	ldr	r2, [r7, #4]
 8000f24:	6812      	ldr	r2, [r2, #0]
 8000f26:	6892      	ldr	r2, [r2, #8]
 8000f28:	f022 0202 	bic.w	r2, r2, #2
 8000f2c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	687a      	ldr	r2, [r7, #4]
 8000f34:	6812      	ldr	r2, [r2, #0]
 8000f36:	6891      	ldr	r1, [r2, #8]
 8000f38:	687a      	ldr	r2, [r7, #4]
 8000f3a:	6992      	ldr	r2, [r2, #24]
 8000f3c:	0052      	lsls	r2, r2, #1
 8000f3e:	430a      	orrs	r2, r1
 8000f40:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6a1b      	ldr	r3, [r3, #32]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d01b      	beq.n	8000f82 <ADC_Init+0x162>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	687a      	ldr	r2, [r7, #4]
 8000f50:	6812      	ldr	r2, [r2, #0]
 8000f52:	6852      	ldr	r2, [r2, #4]
 8000f54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000f58:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	687a      	ldr	r2, [r7, #4]
 8000f60:	6812      	ldr	r2, [r2, #0]
 8000f62:	6852      	ldr	r2, [r2, #4]
 8000f64:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000f68:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	687a      	ldr	r2, [r7, #4]
 8000f70:	6812      	ldr	r2, [r2, #0]
 8000f72:	6851      	ldr	r1, [r2, #4]
 8000f74:	687a      	ldr	r2, [r7, #4]
 8000f76:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000f78:	3a01      	subs	r2, #1
 8000f7a:	0352      	lsls	r2, r2, #13
 8000f7c:	430a      	orrs	r2, r1
 8000f7e:	605a      	str	r2, [r3, #4]
 8000f80:	e007      	b.n	8000f92 <ADC_Init+0x172>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	687a      	ldr	r2, [r7, #4]
 8000f88:	6812      	ldr	r2, [r2, #0]
 8000f8a:	6852      	ldr	r2, [r2, #4]
 8000f8c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000f90:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	687a      	ldr	r2, [r7, #4]
 8000f98:	6812      	ldr	r2, [r2, #0]
 8000f9a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000f9c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000fa0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	687a      	ldr	r2, [r7, #4]
 8000fa8:	6812      	ldr	r2, [r2, #0]
 8000faa:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8000fac:	687a      	ldr	r2, [r7, #4]
 8000fae:	69d2      	ldr	r2, [r2, #28]
 8000fb0:	3a01      	subs	r2, #1
 8000fb2:	0512      	lsls	r2, r2, #20
 8000fb4:	430a      	orrs	r2, r1
 8000fb6:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	687a      	ldr	r2, [r7, #4]
 8000fbe:	6812      	ldr	r2, [r2, #0]
 8000fc0:	6892      	ldr	r2, [r2, #8]
 8000fc2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000fc6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	687a      	ldr	r2, [r7, #4]
 8000fce:	6812      	ldr	r2, [r2, #0]
 8000fd0:	6891      	ldr	r1, [r2, #8]
 8000fd2:	687a      	ldr	r2, [r7, #4]
 8000fd4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000fd6:	0252      	lsls	r2, r2, #9
 8000fd8:	430a      	orrs	r2, r1
 8000fda:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	687a      	ldr	r2, [r7, #4]
 8000fe2:	6812      	ldr	r2, [r2, #0]
 8000fe4:	6892      	ldr	r2, [r2, #8]
 8000fe6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000fea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	687a      	ldr	r2, [r7, #4]
 8000ff2:	6812      	ldr	r2, [r2, #0]
 8000ff4:	6891      	ldr	r1, [r2, #8]
 8000ff6:	687a      	ldr	r2, [r7, #4]
 8000ff8:	6952      	ldr	r2, [r2, #20]
 8000ffa:	0292      	lsls	r2, r2, #10
 8000ffc:	430a      	orrs	r2, r1
 8000ffe:	609a      	str	r2, [r3, #8]
}
 8001000:	bf00      	nop
 8001002:	3714      	adds	r7, #20
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	40012300 	.word	0x40012300
 8001010:	0f000001 	.word	0x0f000001

08001014 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001020:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001026:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800102a:	2b00      	cmp	r3, #0
 800102c:	d13c      	bne.n	80010a8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001032:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	689b      	ldr	r3, [r3, #8]
 8001040:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001044:	2b00      	cmp	r3, #0
 8001046:	d12b      	bne.n	80010a0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800104c:	2b00      	cmp	r3, #0
 800104e:	d127      	bne.n	80010a0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001056:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800105a:	2b00      	cmp	r3, #0
 800105c:	d006      	beq.n	800106c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	689b      	ldr	r3, [r3, #8]
 8001064:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001068:	2b00      	cmp	r3, #0
 800106a:	d119      	bne.n	80010a0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	68fa      	ldr	r2, [r7, #12]
 8001072:	6812      	ldr	r2, [r2, #0]
 8001074:	6852      	ldr	r2, [r2, #4]
 8001076:	f022 0220 	bic.w	r2, r2, #32
 800107a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001080:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001090:	2b00      	cmp	r3, #0
 8001092:	d105      	bne.n	80010a0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001098:	f043 0201 	orr.w	r2, r3, #1
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc);
 80010a0:	68f8      	ldr	r0, [r7, #12]
 80010a2:	f005 fccb 	bl	8006a3c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80010a6:	e004      	b.n	80010b2 <ADC_DMAConvCplt+0x9e>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	4798      	blx	r3
}
 80010b2:	bf00      	nop
 80010b4:	3710      	adds	r7, #16
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}

080010ba <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80010ba:	b580      	push	{r7, lr}
 80010bc:	b084      	sub	sp, #16
 80010be:	af00      	add	r7, sp, #0
 80010c0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010c6:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 80010c8:	68f8      	ldr	r0, [r7, #12]
 80010ca:	f7ff fd63 	bl	8000b94 <HAL_ADC_ConvHalfCpltCallback>
}
 80010ce:	bf00      	nop
 80010d0:	3710      	adds	r7, #16
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80010d6:	b580      	push	{r7, lr}
 80010d8:	b084      	sub	sp, #16
 80010da:	af00      	add	r7, sp, #0
 80010dc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010e2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	2240      	movs	r2, #64	; 0x40
 80010e8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ee:	f043 0204 	orr.w	r2, r3, #4
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	645a      	str	r2, [r3, #68]	; 0x44
  HAL_ADC_ErrorCallback(hadc); 
 80010f6:	68f8      	ldr	r0, [r7, #12]
 80010f8:	f7ff fd60 	bl	8000bbc <HAL_ADC_ErrorCallback>
}
 80010fc:	bf00      	nop
 80010fe:	3710      	adds	r7, #16
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}

08001104 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800110c:	bf00      	nop
 800110e:	370c      	adds	r7, #12
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr

08001118 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001120:	2300      	movs	r3, #0
 8001122:	60fb      	str	r3, [r7, #12]

  /* Check CAN handle */
  if (hcan == NULL)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d101      	bne.n	800112e <HAL_CAN_Init+0x16>
  {
    return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	e0ec      	b.n	8001308 <HAL_CAN_Init+0x1f0>
  assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

  if (hcan->State == HAL_CAN_STATE_RESET)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001134:	b2db      	uxtb	r3, r3
 8001136:	2b00      	cmp	r3, #0
 8001138:	d102      	bne.n	8001140 <HAL_CAN_Init+0x28>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f005 f9de 	bl	80064fc <HAL_CAN_MspInit>
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	687a      	ldr	r2, [r7, #4]
 8001146:	6812      	ldr	r2, [r2, #0]
 8001148:	6812      	ldr	r2, [r2, #0]
 800114a:	f022 0202 	bic.w	r2, r2, #2
 800114e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001150:	f7ff fa9c 	bl	800068c <HAL_GetTick>
 8001154:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != RESET)
 8001156:	e012      	b.n	800117e <HAL_CAN_Init+0x66>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001158:	f7ff fa98 	bl	800068c <HAL_GetTick>
 800115c:	4602      	mov	r2, r0
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	2b0a      	cmp	r3, #10
 8001164:	d90b      	bls.n	800117e <HAL_CAN_Init+0x66>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800116a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2205      	movs	r2, #5
 8001176:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800117a:	2301      	movs	r3, #1
 800117c:	e0c4      	b.n	8001308 <HAL_CAN_Init+0x1f0>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != RESET)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f003 0302 	and.w	r3, r3, #2
 8001188:	2b00      	cmp	r3, #0
 800118a:	d1e5      	bne.n	8001158 <HAL_CAN_Init+0x40>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	687a      	ldr	r2, [r7, #4]
 8001192:	6812      	ldr	r2, [r2, #0]
 8001194:	6812      	ldr	r2, [r2, #0]
 8001196:	f042 0201 	orr.w	r2, r2, #1
 800119a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800119c:	f7ff fa76 	bl	800068c <HAL_GetTick>
 80011a0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == RESET)
 80011a2:	e012      	b.n	80011ca <HAL_CAN_Init+0xb2>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80011a4:	f7ff fa72 	bl	800068c <HAL_GetTick>
 80011a8:	4602      	mov	r2, r0
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	2b0a      	cmp	r3, #10
 80011b0:	d90b      	bls.n	80011ca <HAL_CAN_Init+0xb2>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2205      	movs	r2, #5
 80011c2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	e09e      	b.n	8001308 <HAL_CAN_Init+0x1f0>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == RESET)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f003 0301 	and.w	r3, r3, #1
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d0e5      	beq.n	80011a4 <HAL_CAN_Init+0x8c>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	7e1b      	ldrb	r3, [r3, #24]
 80011dc:	2b01      	cmp	r3, #1
 80011de:	d108      	bne.n	80011f2 <HAL_CAN_Init+0xda>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	687a      	ldr	r2, [r7, #4]
 80011e6:	6812      	ldr	r2, [r2, #0]
 80011e8:	6812      	ldr	r2, [r2, #0]
 80011ea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	e007      	b.n	8001202 <HAL_CAN_Init+0xea>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	687a      	ldr	r2, [r7, #4]
 80011f8:	6812      	ldr	r2, [r2, #0]
 80011fa:	6812      	ldr	r2, [r2, #0]
 80011fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001200:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	7e5b      	ldrb	r3, [r3, #25]
 8001206:	2b01      	cmp	r3, #1
 8001208:	d108      	bne.n	800121c <HAL_CAN_Init+0x104>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	687a      	ldr	r2, [r7, #4]
 8001210:	6812      	ldr	r2, [r2, #0]
 8001212:	6812      	ldr	r2, [r2, #0]
 8001214:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001218:	601a      	str	r2, [r3, #0]
 800121a:	e007      	b.n	800122c <HAL_CAN_Init+0x114>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	687a      	ldr	r2, [r7, #4]
 8001222:	6812      	ldr	r2, [r2, #0]
 8001224:	6812      	ldr	r2, [r2, #0]
 8001226:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800122a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	7e9b      	ldrb	r3, [r3, #26]
 8001230:	2b01      	cmp	r3, #1
 8001232:	d108      	bne.n	8001246 <HAL_CAN_Init+0x12e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	687a      	ldr	r2, [r7, #4]
 800123a:	6812      	ldr	r2, [r2, #0]
 800123c:	6812      	ldr	r2, [r2, #0]
 800123e:	f042 0220 	orr.w	r2, r2, #32
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	e007      	b.n	8001256 <HAL_CAN_Init+0x13e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	687a      	ldr	r2, [r7, #4]
 800124c:	6812      	ldr	r2, [r2, #0]
 800124e:	6812      	ldr	r2, [r2, #0]
 8001250:	f022 0220 	bic.w	r2, r2, #32
 8001254:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	7edb      	ldrb	r3, [r3, #27]
 800125a:	2b01      	cmp	r3, #1
 800125c:	d108      	bne.n	8001270 <HAL_CAN_Init+0x158>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	687a      	ldr	r2, [r7, #4]
 8001264:	6812      	ldr	r2, [r2, #0]
 8001266:	6812      	ldr	r2, [r2, #0]
 8001268:	f022 0210 	bic.w	r2, r2, #16
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	e007      	b.n	8001280 <HAL_CAN_Init+0x168>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	687a      	ldr	r2, [r7, #4]
 8001276:	6812      	ldr	r2, [r2, #0]
 8001278:	6812      	ldr	r2, [r2, #0]
 800127a:	f042 0210 	orr.w	r2, r2, #16
 800127e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	7f1b      	ldrb	r3, [r3, #28]
 8001284:	2b01      	cmp	r3, #1
 8001286:	d108      	bne.n	800129a <HAL_CAN_Init+0x182>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	687a      	ldr	r2, [r7, #4]
 800128e:	6812      	ldr	r2, [r2, #0]
 8001290:	6812      	ldr	r2, [r2, #0]
 8001292:	f042 0208 	orr.w	r2, r2, #8
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	e007      	b.n	80012aa <HAL_CAN_Init+0x192>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	6812      	ldr	r2, [r2, #0]
 80012a2:	6812      	ldr	r2, [r2, #0]
 80012a4:	f022 0208 	bic.w	r2, r2, #8
 80012a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	7f5b      	ldrb	r3, [r3, #29]
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d108      	bne.n	80012c4 <HAL_CAN_Init+0x1ac>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	687a      	ldr	r2, [r7, #4]
 80012b8:	6812      	ldr	r2, [r2, #0]
 80012ba:	6812      	ldr	r2, [r2, #0]
 80012bc:	f042 0204 	orr.w	r2, r2, #4
 80012c0:	601a      	str	r2, [r3, #0]
 80012c2:	e007      	b.n	80012d4 <HAL_CAN_Init+0x1bc>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	687a      	ldr	r2, [r7, #4]
 80012ca:	6812      	ldr	r2, [r2, #0]
 80012cc:	6812      	ldr	r2, [r2, #0]
 80012ce:	f022 0204 	bic.w	r2, r2, #4
 80012d2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	687a      	ldr	r2, [r7, #4]
 80012da:	6891      	ldr	r1, [r2, #8]
 80012dc:	687a      	ldr	r2, [r7, #4]
 80012de:	68d2      	ldr	r2, [r2, #12]
 80012e0:	4311      	orrs	r1, r2
 80012e2:	687a      	ldr	r2, [r7, #4]
 80012e4:	6912      	ldr	r2, [r2, #16]
 80012e6:	4311      	orrs	r1, r2
 80012e8:	687a      	ldr	r2, [r7, #4]
 80012ea:	6952      	ldr	r2, [r2, #20]
 80012ec:	4311      	orrs	r1, r2
 80012ee:	687a      	ldr	r2, [r7, #4]
 80012f0:	6852      	ldr	r2, [r2, #4]
 80012f2:	3a01      	subs	r2, #1
 80012f4:	430a      	orrs	r2, r1
 80012f6:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2200      	movs	r2, #0
 80012fc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2201      	movs	r2, #1
 8001302:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001306:	2300      	movs	r3, #0
}
 8001308:	4618      	mov	r0, r3
 800130a:	3710      	adds	r7, #16
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}

08001310 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001310:	b480      	push	{r7}
 8001312:	b085      	sub	sp, #20
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	f003 0307 	and.w	r3, r3, #7
 800131e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001320:	4b0c      	ldr	r3, [pc, #48]	; (8001354 <NVIC_SetPriorityGrouping+0x44>)
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001326:	68ba      	ldr	r2, [r7, #8]
 8001328:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800132c:	4013      	ands	r3, r2
 800132e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001338:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800133c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001340:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001342:	4a04      	ldr	r2, [pc, #16]	; (8001354 <NVIC_SetPriorityGrouping+0x44>)
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	60d3      	str	r3, [r2, #12]
}
 8001348:	bf00      	nop
 800134a:	3714      	adds	r7, #20
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr
 8001354:	e000ed00 	.word	0xe000ed00

08001358 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800135c:	4b04      	ldr	r3, [pc, #16]	; (8001370 <NVIC_GetPriorityGrouping+0x18>)
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	0a1b      	lsrs	r3, r3, #8
 8001362:	f003 0307 	and.w	r3, r3, #7
}
 8001366:	4618      	mov	r0, r3
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr
 8001370:	e000ed00 	.word	0xe000ed00

08001374 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	4603      	mov	r3, r0
 800137c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800137e:	4909      	ldr	r1, [pc, #36]	; (80013a4 <NVIC_EnableIRQ+0x30>)
 8001380:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001384:	095b      	lsrs	r3, r3, #5
 8001386:	79fa      	ldrb	r2, [r7, #7]
 8001388:	f002 021f 	and.w	r2, r2, #31
 800138c:	2001      	movs	r0, #1
 800138e:	fa00 f202 	lsl.w	r2, r0, r2
 8001392:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001396:	bf00      	nop
 8001398:	370c      	adds	r7, #12
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	e000e100 	.word	0xe000e100

080013a8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4603      	mov	r3, r0
 80013b0:	6039      	str	r1, [r7, #0]
 80013b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80013b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	da0b      	bge.n	80013d4 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013bc:	490d      	ldr	r1, [pc, #52]	; (80013f4 <NVIC_SetPriority+0x4c>)
 80013be:	79fb      	ldrb	r3, [r7, #7]
 80013c0:	f003 030f 	and.w	r3, r3, #15
 80013c4:	3b04      	subs	r3, #4
 80013c6:	683a      	ldr	r2, [r7, #0]
 80013c8:	b2d2      	uxtb	r2, r2
 80013ca:	0112      	lsls	r2, r2, #4
 80013cc:	b2d2      	uxtb	r2, r2
 80013ce:	440b      	add	r3, r1
 80013d0:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013d2:	e009      	b.n	80013e8 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d4:	4908      	ldr	r1, [pc, #32]	; (80013f8 <NVIC_SetPriority+0x50>)
 80013d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013da:	683a      	ldr	r2, [r7, #0]
 80013dc:	b2d2      	uxtb	r2, r2
 80013de:	0112      	lsls	r2, r2, #4
 80013e0:	b2d2      	uxtb	r2, r2
 80013e2:	440b      	add	r3, r1
 80013e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80013e8:	bf00      	nop
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr
 80013f4:	e000ed00 	.word	0xe000ed00
 80013f8:	e000e100 	.word	0xe000e100

080013fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b089      	sub	sp, #36	; 0x24
 8001400:	af00      	add	r7, sp, #0
 8001402:	60f8      	str	r0, [r7, #12]
 8001404:	60b9      	str	r1, [r7, #8]
 8001406:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	f003 0307 	and.w	r3, r3, #7
 800140e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	f1c3 0307 	rsb	r3, r3, #7
 8001416:	2b04      	cmp	r3, #4
 8001418:	bf28      	it	cs
 800141a:	2304      	movcs	r3, #4
 800141c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	3304      	adds	r3, #4
 8001422:	2b06      	cmp	r3, #6
 8001424:	d902      	bls.n	800142c <NVIC_EncodePriority+0x30>
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	3b03      	subs	r3, #3
 800142a:	e000      	b.n	800142e <NVIC_EncodePriority+0x32>
 800142c:	2300      	movs	r3, #0
 800142e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001430:	2201      	movs	r2, #1
 8001432:	69bb      	ldr	r3, [r7, #24]
 8001434:	fa02 f303 	lsl.w	r3, r2, r3
 8001438:	1e5a      	subs	r2, r3, #1
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	401a      	ands	r2, r3
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001442:	2101      	movs	r1, #1
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	fa01 f303 	lsl.w	r3, r1, r3
 800144a:	1e59      	subs	r1, r3, #1
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001450:	4313      	orrs	r3, r2
         );
}
 8001452:	4618      	mov	r0, r3
 8001454:	3724      	adds	r7, #36	; 0x24
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
	...

08001460 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	3b01      	subs	r3, #1
 800146c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001470:	d301      	bcc.n	8001476 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001472:	2301      	movs	r3, #1
 8001474:	e00f      	b.n	8001496 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001476:	4a0a      	ldr	r2, [pc, #40]	; (80014a0 <SysTick_Config+0x40>)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	3b01      	subs	r3, #1
 800147c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800147e:	210f      	movs	r1, #15
 8001480:	f04f 30ff 	mov.w	r0, #4294967295
 8001484:	f7ff ff90 	bl	80013a8 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001488:	4b05      	ldr	r3, [pc, #20]	; (80014a0 <SysTick_Config+0x40>)
 800148a:	2200      	movs	r2, #0
 800148c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800148e:	4b04      	ldr	r3, [pc, #16]	; (80014a0 <SysTick_Config+0x40>)
 8001490:	2207      	movs	r2, #7
 8001492:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001494:	2300      	movs	r3, #0
}
 8001496:	4618      	mov	r0, r3
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	e000e010 	.word	0xe000e010

080014a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f7ff ff2f 	bl	8001310 <NVIC_SetPriorityGrouping>
}
 80014b2:	bf00      	nop
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b086      	sub	sp, #24
 80014be:	af00      	add	r7, sp, #0
 80014c0:	4603      	mov	r3, r0
 80014c2:	60b9      	str	r1, [r7, #8]
 80014c4:	607a      	str	r2, [r7, #4]
 80014c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014c8:	2300      	movs	r3, #0
 80014ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014cc:	f7ff ff44 	bl	8001358 <NVIC_GetPriorityGrouping>
 80014d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	68b9      	ldr	r1, [r7, #8]
 80014d6:	6978      	ldr	r0, [r7, #20]
 80014d8:	f7ff ff90 	bl	80013fc <NVIC_EncodePriority>
 80014dc:	4602      	mov	r2, r0
 80014de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014e2:	4611      	mov	r1, r2
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff ff5f 	bl	80013a8 <NVIC_SetPriority>
}
 80014ea:	bf00      	nop
 80014ec:	3718      	adds	r7, #24
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b082      	sub	sp, #8
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	4603      	mov	r3, r0
 80014fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff ff37 	bl	8001374 <NVIC_EnableIRQ>
}
 8001506:	bf00      	nop
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}

0800150e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800150e:	b580      	push	{r7, lr}
 8001510:	b082      	sub	sp, #8
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f7ff ffa2 	bl	8001460 <SysTick_Config>
 800151c:	4603      	mov	r3, r0
}
 800151e:	4618      	mov	r0, r3
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}

08001526 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8001526:	b580      	push	{r7, lr}
 8001528:	b082      	sub	sp, #8
 800152a:	af00      	add	r7, sp, #0
 800152c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d101      	bne.n	8001538 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001534:	2301      	movs	r3, #1
 8001536:	e014      	b.n	8001562 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	791b      	ldrb	r3, [r3, #4]
 800153c:	b2db      	uxtb	r3, r3
 800153e:	2b00      	cmp	r3, #0
 8001540:	d105      	bne.n	800154e <HAL_DAC_Init+0x28>
  {  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2200      	movs	r2, #0
 8001546:	715a      	strb	r2, [r3, #5]
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f005 f8bd 	bl	80066c8 <HAL_DAC_MspInit>
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2202      	movs	r2, #2
 8001552:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2200      	movs	r2, #0
 8001558:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2201      	movs	r2, #1
 800155e:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8001560:	2300      	movs	r3, #0
}
 8001562:	4618      	mov	r0, r3
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}

0800156a <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 800156a:	b480      	push	{r7}
 800156c:	b085      	sub	sp, #20
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]
 8001572:	6039      	str	r1, [r7, #0]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001574:	2300      	movs	r3, #0
 8001576:	60fb      	str	r3, [r7, #12]
 8001578:	2300      	movs	r3, #0
 800157a:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	795b      	ldrb	r3, [r3, #5]
 8001580:	2b01      	cmp	r3, #1
 8001582:	d101      	bne.n	8001588 <HAL_DAC_Start+0x1e>
 8001584:	2302      	movs	r3, #2
 8001586:	e051      	b.n	800162c <HAL_DAC_Start+0xc2>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2201      	movs	r2, #1
 800158c:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2202      	movs	r2, #2
 8001592:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	687a      	ldr	r2, [r7, #4]
 800159a:	6812      	ldr	r2, [r2, #0]
 800159c:	6811      	ldr	r1, [r2, #0]
 800159e:	2001      	movs	r0, #1
 80015a0:	683a      	ldr	r2, [r7, #0]
 80015a2:	fa00 f202 	lsl.w	r2, r0, r2
 80015a6:	430a      	orrs	r2, r1
 80015a8:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d11a      	bne.n	80015e6 <HAL_DAC_Start+0x7c>
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN1;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 0304 	and.w	r3, r3, #4
 80015ba:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL1;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80015c6:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 ==  DAC_CR_TEN1) && (tmp2 ==  DAC_CR_TSEL1))
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	2b04      	cmp	r3, #4
 80015cc:	d127      	bne.n	800161e <HAL_DAC_Start+0xb4>
 80015ce:	68bb      	ldr	r3, [r7, #8]
 80015d0:	2b38      	cmp	r3, #56	; 0x38
 80015d2:	d124      	bne.n	800161e <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion */
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	687a      	ldr	r2, [r7, #4]
 80015da:	6812      	ldr	r2, [r2, #0]
 80015dc:	6852      	ldr	r2, [r2, #4]
 80015de:	f042 0201 	orr.w	r2, r2, #1
 80015e2:	605a      	str	r2, [r3, #4]
 80015e4:	e01b      	b.n	800161e <HAL_DAC_Start+0xb4>
    }
  }
  else
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN2;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015f0:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL2;    
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 80015fc:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 == DAC_CR_TEN2) && (tmp2 == DAC_CR_TSEL2))
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001604:	d10b      	bne.n	800161e <HAL_DAC_Start+0xb4>
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 800160c:	d107      	bne.n	800161e <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion*/
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG2;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	687a      	ldr	r2, [r7, #4]
 8001614:	6812      	ldr	r2, [r2, #0]
 8001616:	6852      	ldr	r2, [r2, #4]
 8001618:	f042 0202 	orr.w	r2, r2, #2
 800161c:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2201      	movs	r2, #1
 8001622:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2200      	movs	r2, #0
 8001628:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 800162a:	2300      	movs	r3, #0
}
 800162c:	4618      	mov	r0, r3
 800162e:	3714      	adds	r7, #20
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr

08001638 <HAL_DAC_GetValue>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval The selected DAC channel data output value.
  */
uint32_t HAL_DAC_GetValue(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Returns the DAC channel data output register value */
  if(Channel == DAC_CHANNEL_1)
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d103      	bne.n	8001650 <HAL_DAC_GetValue+0x18>
  {
    return hdac->Instance->DOR1;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800164e:	e002      	b.n	8001656 <HAL_DAC_GetValue+0x1e>
  }
  else
  {
    return hdac->Instance->DOR2;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  }
}
 8001656:	4618      	mov	r0, r3
 8001658:	370c      	adds	r7, #12
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr

08001662 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 8001662:	b580      	push	{r7, lr}
 8001664:	b082      	sub	sp, #8
 8001666:	af00      	add	r7, sp, #0
 8001668:	6078      	str	r0, [r7, #4]
  /* Check underrun channel 1 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001670:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001674:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001678:	d118      	bne.n	80016ac <HAL_DAC_IRQHandler+0x4a>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2204      	movs	r2, #4
 800167e:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel1 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	691b      	ldr	r3, [r3, #16]
 8001684:	f043 0201 	orr.w	r2, r3, #1
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001694:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	687a      	ldr	r2, [r7, #4]
 800169c:	6812      	ldr	r2, [r2, #0]
 800169e:	6812      	ldr	r2, [r2, #0]
 80016a0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80016a4:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f000 f825 	bl	80016f6 <HAL_DAC_DMAUnderrunCallbackCh1>
  }
  /* Check underrun channel 2 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80016b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80016ba:	d118      	bne.n	80016ee <HAL_DAC_IRQHandler+0x8c>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2204      	movs	r2, #4
 80016c0:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel2 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	691b      	ldr	r3, [r3, #16]
 80016c6:	f043 0202 	orr.w	r2, r3, #2
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80016d6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	6812      	ldr	r2, [r2, #0]
 80016e0:	6812      	ldr	r2, [r2, #0]
 80016e2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80016e6:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f000 f88e 	bl	800180a <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
}
 80016ee:	bf00      	nop
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}

080016f6 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80016f6:	b480      	push	{r7}
 80016f8:	b083      	sub	sp, #12
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80016fe:	bf00      	nop
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr

0800170a <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 800170a:	b480      	push	{r7}
 800170c:	b087      	sub	sp, #28
 800170e:	af00      	add	r7, sp, #0
 8001710:	60f8      	str	r0, [r7, #12]
 8001712:	60b9      	str	r1, [r7, #8]
 8001714:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8001716:	2300      	movs	r3, #0
 8001718:	617b      	str	r3, [r7, #20]
 800171a:	2300      	movs	r3, #0
 800171c:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	795b      	ldrb	r3, [r3, #5]
 8001722:	2b01      	cmp	r3, #1
 8001724:	d101      	bne.n	800172a <HAL_DAC_ConfigChannel+0x20>
 8001726:	2302      	movs	r3, #2
 8001728:	e036      	b.n	8001798 <HAL_DAC_ConfigChannel+0x8e>
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	2201      	movs	r2, #1
 800172e:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	2202      	movs	r2, #2
 8001734:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 800173e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	fa02 f303 	lsl.w	r3, r2, r3
 8001748:	43db      	mvns	r3, r3
 800174a:	697a      	ldr	r2, [r7, #20]
 800174c:	4013      	ands	r3, r2
 800174e:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	4313      	orrs	r3, r2
 800175a:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 800175c:	693a      	ldr	r2, [r7, #16]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	fa02 f303 	lsl.w	r3, r2, r3
 8001764:	697a      	ldr	r2, [r7, #20]
 8001766:	4313      	orrs	r3, r2
 8001768:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	697a      	ldr	r2, [r7, #20]
 8001770:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	68fa      	ldr	r2, [r7, #12]
 8001778:	6812      	ldr	r2, [r2, #0]
 800177a:	6811      	ldr	r1, [r2, #0]
 800177c:	20c0      	movs	r0, #192	; 0xc0
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	fa00 f202 	lsl.w	r2, r0, r2
 8001784:	43d2      	mvns	r2, r2
 8001786:	400a      	ands	r2, r1
 8001788:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	2201      	movs	r2, #1
 800178e:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	2200      	movs	r2, #0
 8001794:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8001796:	2300      	movs	r3, #0
}
 8001798:	4618      	mov	r0, r3
 800179a:	371c      	adds	r7, #28
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr

080017a4 <HAL_DACEx_TriangleWaveGenerate>:
  *            @arg DAC_TRIANGLEAMPLITUDE_2047: Select max triangle amplitude of 2047
  *            @arg DAC_TRIANGLEAMPLITUDE_4095: Select max triangle amplitude of 4095                               
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_TriangleWaveGenerate(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Amplitude)
{  
 80017a4:	b480      	push	{r7}
 80017a6:	b085      	sub	sp, #20
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	60f8      	str	r0, [r7, #12]
 80017ac:	60b9      	str	r1, [r7, #8]
 80017ae:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(Amplitude));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	795b      	ldrb	r3, [r3, #5]
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d101      	bne.n	80017bc <HAL_DACEx_TriangleWaveGenerate+0x18>
 80017b8:	2302      	movs	r3, #2
 80017ba:	e020      	b.n	80017fe <HAL_DACEx_TriangleWaveGenerate+0x5a>
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	2201      	movs	r2, #1
 80017c0:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	2202      	movs	r2, #2
 80017c6:	711a      	strb	r2, [r3, #4]
  
  /* Enable the selected wave generation for the selected DAC channel */
  MODIFY_REG(hdac->Instance->CR, (DAC_CR_WAVE1 | DAC_CR_MAMP1) << Channel, (DAC_CR_WAVE1_1 | Amplitude) << Channel);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	68fa      	ldr	r2, [r7, #12]
 80017ce:	6812      	ldr	r2, [r2, #0]
 80017d0:	6811      	ldr	r1, [r2, #0]
 80017d2:	f44f 607c 	mov.w	r0, #4032	; 0xfc0
 80017d6:	68ba      	ldr	r2, [r7, #8]
 80017d8:	fa00 f202 	lsl.w	r2, r0, r2
 80017dc:	43d2      	mvns	r2, r2
 80017de:	4011      	ands	r1, r2
 80017e0:	687a      	ldr	r2, [r7, #4]
 80017e2:	f042 0080 	orr.w	r0, r2, #128	; 0x80
 80017e6:	68ba      	ldr	r2, [r7, #8]
 80017e8:	fa00 f202 	lsl.w	r2, r0, r2
 80017ec:	430a      	orrs	r2, r1
 80017ee:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	2201      	movs	r2, #1
 80017f4:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	2200      	movs	r2, #0
 80017fa:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80017fc:	2300      	movs	r3, #0
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3714      	adds	r7, #20
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr

0800180a <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800180a:	b480      	push	{r7}
 800180c:	b083      	sub	sp, #12
 800180e:	af00      	add	r7, sp, #0
 8001810:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8001812:	bf00      	nop
 8001814:	370c      	adds	r7, #12
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
	...

08001820 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b086      	sub	sp, #24
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001828:	2300      	movs	r3, #0
 800182a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800182c:	f7fe ff2e 	bl	800068c <HAL_GetTick>
 8001830:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d101      	bne.n	800183c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e099      	b.n	8001970 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2200      	movs	r2, #0
 8001840:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2202      	movs	r2, #2
 8001848:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	687a      	ldr	r2, [r7, #4]
 8001852:	6812      	ldr	r2, [r2, #0]
 8001854:	6812      	ldr	r2, [r2, #0]
 8001856:	f022 0201 	bic.w	r2, r2, #1
 800185a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800185c:	e00f      	b.n	800187e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800185e:	f7fe ff15 	bl	800068c <HAL_GetTick>
 8001862:	4602      	mov	r2, r0
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	1ad3      	subs	r3, r2, r3
 8001868:	2b05      	cmp	r3, #5
 800186a:	d908      	bls.n	800187e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2220      	movs	r2, #32
 8001870:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2203      	movs	r2, #3
 8001876:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	e078      	b.n	8001970 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 0301 	and.w	r3, r3, #1
 8001888:	2b00      	cmp	r3, #0
 800188a:	d1e8      	bne.n	800185e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001894:	697a      	ldr	r2, [r7, #20]
 8001896:	4b38      	ldr	r3, [pc, #224]	; (8001978 <HAL_DMA_Init+0x158>)
 8001898:	4013      	ands	r3, r2
 800189a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	685a      	ldr	r2, [r3, #4]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80018aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	691b      	ldr	r3, [r3, #16]
 80018b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	699b      	ldr	r3, [r3, #24]
 80018bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6a1b      	ldr	r3, [r3, #32]
 80018c8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80018ca:	697a      	ldr	r2, [r7, #20]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d4:	2b04      	cmp	r3, #4
 80018d6:	d107      	bne.n	80018e8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e0:	4313      	orrs	r3, r2
 80018e2:	697a      	ldr	r2, [r7, #20]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	697a      	ldr	r2, [r7, #20]
 80018ee:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	695b      	ldr	r3, [r3, #20]
 80018f6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	f023 0307 	bic.w	r3, r3, #7
 80018fe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001904:	697a      	ldr	r2, [r7, #20]
 8001906:	4313      	orrs	r3, r2
 8001908:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800190e:	2b04      	cmp	r3, #4
 8001910:	d117      	bne.n	8001942 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001916:	697a      	ldr	r2, [r7, #20]
 8001918:	4313      	orrs	r3, r2
 800191a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001920:	2b00      	cmp	r3, #0
 8001922:	d00e      	beq.n	8001942 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	f000 fa99 	bl	8001e5c <DMA_CheckFifoParam>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d008      	beq.n	8001942 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2240      	movs	r2, #64	; 0x40
 8001934:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2201      	movs	r2, #1
 800193a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800193e:	2301      	movs	r3, #1
 8001940:	e016      	b.n	8001970 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	697a      	ldr	r2, [r7, #20]
 8001948:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f000 fa50 	bl	8001df0 <DMA_CalcBaseAndBitshift>
 8001950:	4603      	mov	r3, r0
 8001952:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001958:	223f      	movs	r2, #63	; 0x3f
 800195a:	409a      	lsls	r2, r3
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2200      	movs	r2, #0
 8001964:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2201      	movs	r2, #1
 800196a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800196e:	2300      	movs	r3, #0
}
 8001970:	4618      	mov	r0, r3
 8001972:	3718      	adds	r7, #24
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	f010803f 	.word	0xf010803f

0800197c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b086      	sub	sp, #24
 8001980:	af00      	add	r7, sp, #0
 8001982:	60f8      	str	r0, [r7, #12]
 8001984:	60b9      	str	r1, [r7, #8]
 8001986:	607a      	str	r2, [r7, #4]
 8001988:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800198a:	2300      	movs	r3, #0
 800198c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001992:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800199a:	2b01      	cmp	r3, #1
 800199c:	d101      	bne.n	80019a2 <HAL_DMA_Start_IT+0x26>
 800199e:	2302      	movs	r3, #2
 80019a0:	e048      	b.n	8001a34 <HAL_DMA_Start_IT+0xb8>
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	2201      	movs	r2, #1
 80019a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d137      	bne.n	8001a26 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	2202      	movs	r2, #2
 80019ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	2200      	movs	r2, #0
 80019c2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	687a      	ldr	r2, [r7, #4]
 80019c8:	68b9      	ldr	r1, [r7, #8]
 80019ca:	68f8      	ldr	r0, [r7, #12]
 80019cc:	f000 f9e2 	bl	8001d94 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019d4:	223f      	movs	r2, #63	; 0x3f
 80019d6:	409a      	lsls	r2, r3
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	68fa      	ldr	r2, [r7, #12]
 80019e2:	6812      	ldr	r2, [r2, #0]
 80019e4:	6812      	ldr	r2, [r2, #0]
 80019e6:	f042 0216 	orr.w	r2, r2, #22
 80019ea:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	68fa      	ldr	r2, [r7, #12]
 80019f2:	6812      	ldr	r2, [r2, #0]
 80019f4:	6952      	ldr	r2, [r2, #20]
 80019f6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80019fa:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d007      	beq.n	8001a14 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	68fa      	ldr	r2, [r7, #12]
 8001a0a:	6812      	ldr	r2, [r2, #0]
 8001a0c:	6812      	ldr	r2, [r2, #0]
 8001a0e:	f042 0208 	orr.w	r2, r2, #8
 8001a12:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	68fa      	ldr	r2, [r7, #12]
 8001a1a:	6812      	ldr	r2, [r2, #0]
 8001a1c:	6812      	ldr	r2, [r2, #0]
 8001a1e:	f042 0201 	orr.w	r2, r2, #1
 8001a22:	601a      	str	r2, [r3, #0]
 8001a24:	e005      	b.n	8001a32 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001a2e:	2302      	movs	r3, #2
 8001a30:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001a32:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3718      	adds	r7, #24
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	d004      	beq.n	8001a5a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2280      	movs	r2, #128	; 0x80
 8001a54:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e00c      	b.n	8001a74 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2205      	movs	r2, #5
 8001a5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	6812      	ldr	r2, [r2, #0]
 8001a6a:	6812      	ldr	r2, [r2, #0]
 8001a6c:	f022 0201 	bic.w	r2, r2, #1
 8001a70:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001a72:	2300      	movs	r3, #0
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	370c      	adds	r7, #12
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr

08001a80 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b086      	sub	sp, #24
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001a8c:	4b92      	ldr	r3, [pc, #584]	; (8001cd8 <HAL_DMA_IRQHandler+0x258>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a92      	ldr	r2, [pc, #584]	; (8001cdc <HAL_DMA_IRQHandler+0x25c>)
 8001a92:	fba2 2303 	umull	r2, r3, r2, r3
 8001a96:	0a9b      	lsrs	r3, r3, #10
 8001a98:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a9e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aaa:	2208      	movs	r2, #8
 8001aac:	409a      	lsls	r2, r3
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d01a      	beq.n	8001aec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0304 	and.w	r3, r3, #4
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d013      	beq.n	8001aec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	6812      	ldr	r2, [r2, #0]
 8001acc:	6812      	ldr	r2, [r2, #0]
 8001ace:	f022 0204 	bic.w	r2, r2, #4
 8001ad2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ad8:	2208      	movs	r2, #8
 8001ada:	409a      	lsls	r2, r3
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ae4:	f043 0201 	orr.w	r2, r3, #1
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001af0:	2201      	movs	r2, #1
 8001af2:	409a      	lsls	r2, r3
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	4013      	ands	r3, r2
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d012      	beq.n	8001b22 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	695b      	ldr	r3, [r3, #20]
 8001b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d00b      	beq.n	8001b22 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b0e:	2201      	movs	r2, #1
 8001b10:	409a      	lsls	r2, r3
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b1a:	f043 0202 	orr.w	r2, r3, #2
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b26:	2204      	movs	r2, #4
 8001b28:	409a      	lsls	r2, r3
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d012      	beq.n	8001b58 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 0302 	and.w	r3, r3, #2
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d00b      	beq.n	8001b58 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b44:	2204      	movs	r2, #4
 8001b46:	409a      	lsls	r2, r3
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b50:	f043 0204 	orr.w	r2, r3, #4
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b5c:	2210      	movs	r2, #16
 8001b5e:	409a      	lsls	r2, r3
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	4013      	ands	r3, r2
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d043      	beq.n	8001bf0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0308 	and.w	r3, r3, #8
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d03c      	beq.n	8001bf0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b7a:	2210      	movs	r2, #16
 8001b7c:	409a      	lsls	r2, r3
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d018      	beq.n	8001bc2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d108      	bne.n	8001bb0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d024      	beq.n	8001bf0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	4798      	blx	r3
 8001bae:	e01f      	b.n	8001bf0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d01b      	beq.n	8001bf0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	4798      	blx	r3
 8001bc0:	e016      	b.n	8001bf0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d107      	bne.n	8001be0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	6812      	ldr	r2, [r2, #0]
 8001bd8:	6812      	ldr	r2, [r2, #0]
 8001bda:	f022 0208 	bic.w	r2, r2, #8
 8001bde:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d003      	beq.n	8001bf0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bf4:	2220      	movs	r2, #32
 8001bf6:	409a      	lsls	r2, r3
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	f000 808e 	beq.w	8001d1e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0310 	and.w	r3, r3, #16
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	f000 8086 	beq.w	8001d1e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c16:	2220      	movs	r2, #32
 8001c18:	409a      	lsls	r2, r3
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	2b05      	cmp	r3, #5
 8001c28:	d136      	bne.n	8001c98 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	6812      	ldr	r2, [r2, #0]
 8001c32:	6812      	ldr	r2, [r2, #0]
 8001c34:	f022 0216 	bic.w	r2, r2, #22
 8001c38:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	687a      	ldr	r2, [r7, #4]
 8001c40:	6812      	ldr	r2, [r2, #0]
 8001c42:	6952      	ldr	r2, [r2, #20]
 8001c44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c48:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d103      	bne.n	8001c5a <HAL_DMA_IRQHandler+0x1da>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d007      	beq.n	8001c6a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	6812      	ldr	r2, [r2, #0]
 8001c62:	6812      	ldr	r2, [r2, #0]
 8001c64:	f022 0208 	bic.w	r2, r2, #8
 8001c68:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c6e:	223f      	movs	r2, #63	; 0x3f
 8001c70:	409a      	lsls	r2, r3
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2201      	movs	r2, #1
 8001c82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d07d      	beq.n	8001d8a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	4798      	blx	r3
        }
        return;
 8001c96:	e078      	b.n	8001d8a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d01c      	beq.n	8001ce0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d108      	bne.n	8001cc6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d030      	beq.n	8001d1e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	4798      	blx	r3
 8001cc4:	e02b      	b.n	8001d1e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d027      	beq.n	8001d1e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	4798      	blx	r3
 8001cd6:	e022      	b.n	8001d1e <HAL_DMA_IRQHandler+0x29e>
 8001cd8:	20000008 	.word	0x20000008
 8001cdc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d10f      	bne.n	8001d0e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	6812      	ldr	r2, [r2, #0]
 8001cf6:	6812      	ldr	r2, [r2, #0]
 8001cf8:	f022 0210 	bic.w	r2, r2, #16
 8001cfc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2200      	movs	r2, #0
 8001d02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2201      	movs	r2, #1
 8001d0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d003      	beq.n	8001d1e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d032      	beq.n	8001d8c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d2a:	f003 0301 	and.w	r3, r3, #1
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d022      	beq.n	8001d78 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2205      	movs	r2, #5
 8001d36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	6812      	ldr	r2, [r2, #0]
 8001d42:	6812      	ldr	r2, [r2, #0]
 8001d44:	f022 0201 	bic.w	r2, r2, #1
 8001d48:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	60bb      	str	r3, [r7, #8]
 8001d50:	697a      	ldr	r2, [r7, #20]
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d807      	bhi.n	8001d66 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0301 	and.w	r3, r3, #1
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d1f2      	bne.n	8001d4a <HAL_DMA_IRQHandler+0x2ca>
 8001d64:	e000      	b.n	8001d68 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001d66:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2201      	movs	r2, #1
 8001d74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d005      	beq.n	8001d8c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	4798      	blx	r3
 8001d88:	e000      	b.n	8001d8c <HAL_DMA_IRQHandler+0x30c>
        return;
 8001d8a:	bf00      	nop
    }
  }
}
 8001d8c:	3718      	adds	r7, #24
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop

08001d94 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b085      	sub	sp, #20
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	60f8      	str	r0, [r7, #12]
 8001d9c:	60b9      	str	r1, [r7, #8]
 8001d9e:	607a      	str	r2, [r7, #4]
 8001da0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	68fa      	ldr	r2, [r7, #12]
 8001da8:	6812      	ldr	r2, [r2, #0]
 8001daa:	6812      	ldr	r2, [r2, #0]
 8001dac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001db0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	683a      	ldr	r2, [r7, #0]
 8001db8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	2b40      	cmp	r3, #64	; 0x40
 8001dc0:	d108      	bne.n	8001dd4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	68ba      	ldr	r2, [r7, #8]
 8001dd0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001dd2:	e007      	b.n	8001de4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	68ba      	ldr	r2, [r7, #8]
 8001dda:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	60da      	str	r2, [r3, #12]
}
 8001de4:	bf00      	nop
 8001de6:	3714      	adds	r7, #20
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b085      	sub	sp, #20
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	3b10      	subs	r3, #16
 8001e00:	4a14      	ldr	r2, [pc, #80]	; (8001e54 <DMA_CalcBaseAndBitshift+0x64>)
 8001e02:	fba2 2303 	umull	r2, r3, r2, r3
 8001e06:	091b      	lsrs	r3, r3, #4
 8001e08:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001e0a:	4a13      	ldr	r2, [pc, #76]	; (8001e58 <DMA_CalcBaseAndBitshift+0x68>)
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	4413      	add	r3, r2
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	461a      	mov	r2, r3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2b03      	cmp	r3, #3
 8001e1c:	d909      	bls.n	8001e32 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001e26:	f023 0303 	bic.w	r3, r3, #3
 8001e2a:	1d1a      	adds	r2, r3, #4
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	659a      	str	r2, [r3, #88]	; 0x58
 8001e30:	e007      	b.n	8001e42 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001e3a:	f023 0303 	bic.w	r3, r3, #3
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3714      	adds	r7, #20
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	aaaaaaab 	.word	0xaaaaaaab
 8001e58:	080085b0 	.word	0x080085b0

08001e5c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b085      	sub	sp, #20
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e64:	2300      	movs	r3, #0
 8001e66:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e6c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	699b      	ldr	r3, [r3, #24]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d11f      	bne.n	8001eb6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	2b03      	cmp	r3, #3
 8001e7a:	d855      	bhi.n	8001f28 <DMA_CheckFifoParam+0xcc>
 8001e7c:	a201      	add	r2, pc, #4	; (adr r2, 8001e84 <DMA_CheckFifoParam+0x28>)
 8001e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e82:	bf00      	nop
 8001e84:	08001e95 	.word	0x08001e95
 8001e88:	08001ea7 	.word	0x08001ea7
 8001e8c:	08001e95 	.word	0x08001e95
 8001e90:	08001f29 	.word	0x08001f29
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d045      	beq.n	8001f2c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ea4:	e042      	b.n	8001f2c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eaa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001eae:	d13f      	bne.n	8001f30 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001eb4:	e03c      	b.n	8001f30 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	699b      	ldr	r3, [r3, #24]
 8001eba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ebe:	d121      	bne.n	8001f04 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	2b03      	cmp	r3, #3
 8001ec4:	d836      	bhi.n	8001f34 <DMA_CheckFifoParam+0xd8>
 8001ec6:	a201      	add	r2, pc, #4	; (adr r2, 8001ecc <DMA_CheckFifoParam+0x70>)
 8001ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ecc:	08001edd 	.word	0x08001edd
 8001ed0:	08001ee3 	.word	0x08001ee3
 8001ed4:	08001edd 	.word	0x08001edd
 8001ed8:	08001ef5 	.word	0x08001ef5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	73fb      	strb	r3, [r7, #15]
      break;
 8001ee0:	e02f      	b.n	8001f42 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d024      	beq.n	8001f38 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ef2:	e021      	b.n	8001f38 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001efc:	d11e      	bne.n	8001f3c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001f02:	e01b      	b.n	8001f3c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d902      	bls.n	8001f10 <DMA_CheckFifoParam+0xb4>
 8001f0a:	2b03      	cmp	r3, #3
 8001f0c:	d003      	beq.n	8001f16 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001f0e:	e018      	b.n	8001f42 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	73fb      	strb	r3, [r7, #15]
      break;
 8001f14:	e015      	b.n	8001f42 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f1a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d00e      	beq.n	8001f40 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	73fb      	strb	r3, [r7, #15]
      break;
 8001f26:	e00b      	b.n	8001f40 <DMA_CheckFifoParam+0xe4>
      break;
 8001f28:	bf00      	nop
 8001f2a:	e00a      	b.n	8001f42 <DMA_CheckFifoParam+0xe6>
      break;
 8001f2c:	bf00      	nop
 8001f2e:	e008      	b.n	8001f42 <DMA_CheckFifoParam+0xe6>
      break;
 8001f30:	bf00      	nop
 8001f32:	e006      	b.n	8001f42 <DMA_CheckFifoParam+0xe6>
      break;
 8001f34:	bf00      	nop
 8001f36:	e004      	b.n	8001f42 <DMA_CheckFifoParam+0xe6>
      break;
 8001f38:	bf00      	nop
 8001f3a:	e002      	b.n	8001f42 <DMA_CheckFifoParam+0xe6>
      break;   
 8001f3c:	bf00      	nop
 8001f3e:	e000      	b.n	8001f42 <DMA_CheckFifoParam+0xe6>
      break;
 8001f40:	bf00      	nop
    }
  } 
  
  return status; 
 8001f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3714      	adds	r7, #20
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b089      	sub	sp, #36	; 0x24
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f62:	2300      	movs	r3, #0
 8001f64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f66:	2300      	movs	r3, #0
 8001f68:	61fb      	str	r3, [r7, #28]
 8001f6a:	e165      	b.n	8002238 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	fa02 f303 	lsl.w	r3, r2, r3
 8001f74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f80:	693a      	ldr	r2, [r7, #16]
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	f040 8154 	bne.w	8002232 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d003      	beq.n	8001f9a <HAL_GPIO_Init+0x4a>
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	2b12      	cmp	r3, #18
 8001f98:	d123      	bne.n	8001fe2 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	08da      	lsrs	r2, r3, #3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	3208      	adds	r2, #8
 8001fa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	f003 0307 	and.w	r3, r3, #7
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	220f      	movs	r2, #15
 8001fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb6:	43db      	mvns	r3, r3
 8001fb8:	69ba      	ldr	r2, [r7, #24]
 8001fba:	4013      	ands	r3, r2
 8001fbc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	691a      	ldr	r2, [r3, #16]
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	f003 0307 	and.w	r3, r3, #7
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	fa02 f303 	lsl.w	r3, r2, r3
 8001fce:	69ba      	ldr	r2, [r7, #24]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	08da      	lsrs	r2, r3, #3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	3208      	adds	r2, #8
 8001fdc:	69b9      	ldr	r1, [r7, #24]
 8001fde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	2203      	movs	r2, #3
 8001fee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff2:	43db      	mvns	r3, r3
 8001ff4:	69ba      	ldr	r2, [r7, #24]
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f003 0203 	and.w	r2, r3, #3
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	fa02 f303 	lsl.w	r3, r2, r3
 800200a:	69ba      	ldr	r2, [r7, #24]
 800200c:	4313      	orrs	r3, r2
 800200e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	69ba      	ldr	r2, [r7, #24]
 8002014:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	2b01      	cmp	r3, #1
 800201c:	d00b      	beq.n	8002036 <HAL_GPIO_Init+0xe6>
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	2b02      	cmp	r3, #2
 8002024:	d007      	beq.n	8002036 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800202a:	2b11      	cmp	r3, #17
 800202c:	d003      	beq.n	8002036 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	2b12      	cmp	r3, #18
 8002034:	d130      	bne.n	8002098 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	005b      	lsls	r3, r3, #1
 8002040:	2203      	movs	r2, #3
 8002042:	fa02 f303 	lsl.w	r3, r2, r3
 8002046:	43db      	mvns	r3, r3
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	4013      	ands	r3, r2
 800204c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	68da      	ldr	r2, [r3, #12]
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	fa02 f303 	lsl.w	r3, r2, r3
 800205a:	69ba      	ldr	r2, [r7, #24]
 800205c:	4313      	orrs	r3, r2
 800205e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800206c:	2201      	movs	r2, #1
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	fa02 f303 	lsl.w	r3, r2, r3
 8002074:	43db      	mvns	r3, r3
 8002076:	69ba      	ldr	r2, [r7, #24]
 8002078:	4013      	ands	r3, r2
 800207a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	091b      	lsrs	r3, r3, #4
 8002082:	f003 0201 	and.w	r2, r3, #1
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	fa02 f303 	lsl.w	r3, r2, r3
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	4313      	orrs	r3, r2
 8002090:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	2203      	movs	r2, #3
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	43db      	mvns	r3, r3
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	4013      	ands	r3, r2
 80020ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	689a      	ldr	r2, [r3, #8]
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	005b      	lsls	r3, r3, #1
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	4313      	orrs	r3, r2
 80020c0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	f000 80ae 	beq.w	8002232 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020d6:	2300      	movs	r3, #0
 80020d8:	60fb      	str	r3, [r7, #12]
 80020da:	4a5c      	ldr	r2, [pc, #368]	; (800224c <HAL_GPIO_Init+0x2fc>)
 80020dc:	4b5b      	ldr	r3, [pc, #364]	; (800224c <HAL_GPIO_Init+0x2fc>)
 80020de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020e4:	6453      	str	r3, [r2, #68]	; 0x44
 80020e6:	4b59      	ldr	r3, [pc, #356]	; (800224c <HAL_GPIO_Init+0x2fc>)
 80020e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020ee:	60fb      	str	r3, [r7, #12]
 80020f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020f2:	4a57      	ldr	r2, [pc, #348]	; (8002250 <HAL_GPIO_Init+0x300>)
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	089b      	lsrs	r3, r3, #2
 80020f8:	3302      	adds	r3, #2
 80020fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	f003 0303 	and.w	r3, r3, #3
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	220f      	movs	r2, #15
 800210a:	fa02 f303 	lsl.w	r3, r2, r3
 800210e:	43db      	mvns	r3, r3
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	4013      	ands	r3, r2
 8002114:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4a4e      	ldr	r2, [pc, #312]	; (8002254 <HAL_GPIO_Init+0x304>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d025      	beq.n	800216a <HAL_GPIO_Init+0x21a>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4a4d      	ldr	r2, [pc, #308]	; (8002258 <HAL_GPIO_Init+0x308>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d01f      	beq.n	8002166 <HAL_GPIO_Init+0x216>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a4c      	ldr	r2, [pc, #304]	; (800225c <HAL_GPIO_Init+0x30c>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d019      	beq.n	8002162 <HAL_GPIO_Init+0x212>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a4b      	ldr	r2, [pc, #300]	; (8002260 <HAL_GPIO_Init+0x310>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d013      	beq.n	800215e <HAL_GPIO_Init+0x20e>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a4a      	ldr	r2, [pc, #296]	; (8002264 <HAL_GPIO_Init+0x314>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d00d      	beq.n	800215a <HAL_GPIO_Init+0x20a>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a49      	ldr	r2, [pc, #292]	; (8002268 <HAL_GPIO_Init+0x318>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d007      	beq.n	8002156 <HAL_GPIO_Init+0x206>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a48      	ldr	r2, [pc, #288]	; (800226c <HAL_GPIO_Init+0x31c>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d101      	bne.n	8002152 <HAL_GPIO_Init+0x202>
 800214e:	2306      	movs	r3, #6
 8002150:	e00c      	b.n	800216c <HAL_GPIO_Init+0x21c>
 8002152:	2307      	movs	r3, #7
 8002154:	e00a      	b.n	800216c <HAL_GPIO_Init+0x21c>
 8002156:	2305      	movs	r3, #5
 8002158:	e008      	b.n	800216c <HAL_GPIO_Init+0x21c>
 800215a:	2304      	movs	r3, #4
 800215c:	e006      	b.n	800216c <HAL_GPIO_Init+0x21c>
 800215e:	2303      	movs	r3, #3
 8002160:	e004      	b.n	800216c <HAL_GPIO_Init+0x21c>
 8002162:	2302      	movs	r3, #2
 8002164:	e002      	b.n	800216c <HAL_GPIO_Init+0x21c>
 8002166:	2301      	movs	r3, #1
 8002168:	e000      	b.n	800216c <HAL_GPIO_Init+0x21c>
 800216a:	2300      	movs	r3, #0
 800216c:	69fa      	ldr	r2, [r7, #28]
 800216e:	f002 0203 	and.w	r2, r2, #3
 8002172:	0092      	lsls	r2, r2, #2
 8002174:	4093      	lsls	r3, r2
 8002176:	69ba      	ldr	r2, [r7, #24]
 8002178:	4313      	orrs	r3, r2
 800217a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800217c:	4934      	ldr	r1, [pc, #208]	; (8002250 <HAL_GPIO_Init+0x300>)
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	089b      	lsrs	r3, r3, #2
 8002182:	3302      	adds	r3, #2
 8002184:	69ba      	ldr	r2, [r7, #24]
 8002186:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800218a:	4b39      	ldr	r3, [pc, #228]	; (8002270 <HAL_GPIO_Init+0x320>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	43db      	mvns	r3, r3
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	4013      	ands	r3, r2
 8002198:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d003      	beq.n	80021ae <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80021a6:	69ba      	ldr	r2, [r7, #24]
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021ae:	4a30      	ldr	r2, [pc, #192]	; (8002270 <HAL_GPIO_Init+0x320>)
 80021b0:	69bb      	ldr	r3, [r7, #24]
 80021b2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80021b4:	4b2e      	ldr	r3, [pc, #184]	; (8002270 <HAL_GPIO_Init+0x320>)
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	43db      	mvns	r3, r3
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	4013      	ands	r3, r2
 80021c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d003      	beq.n	80021d8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021d8:	4a25      	ldr	r2, [pc, #148]	; (8002270 <HAL_GPIO_Init+0x320>)
 80021da:	69bb      	ldr	r3, [r7, #24]
 80021dc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021de:	4b24      	ldr	r3, [pc, #144]	; (8002270 <HAL_GPIO_Init+0x320>)
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	43db      	mvns	r3, r3
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	4013      	ands	r3, r2
 80021ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d003      	beq.n	8002202 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80021fa:	69ba      	ldr	r2, [r7, #24]
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	4313      	orrs	r3, r2
 8002200:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002202:	4a1b      	ldr	r2, [pc, #108]	; (8002270 <HAL_GPIO_Init+0x320>)
 8002204:	69bb      	ldr	r3, [r7, #24]
 8002206:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002208:	4b19      	ldr	r3, [pc, #100]	; (8002270 <HAL_GPIO_Init+0x320>)
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	43db      	mvns	r3, r3
 8002212:	69ba      	ldr	r2, [r7, #24]
 8002214:	4013      	ands	r3, r2
 8002216:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d003      	beq.n	800222c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	4313      	orrs	r3, r2
 800222a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800222c:	4a10      	ldr	r2, [pc, #64]	; (8002270 <HAL_GPIO_Init+0x320>)
 800222e:	69bb      	ldr	r3, [r7, #24]
 8002230:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	3301      	adds	r3, #1
 8002236:	61fb      	str	r3, [r7, #28]
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	2b0f      	cmp	r3, #15
 800223c:	f67f ae96 	bls.w	8001f6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002240:	bf00      	nop
 8002242:	3724      	adds	r7, #36	; 0x24
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr
 800224c:	40023800 	.word	0x40023800
 8002250:	40013800 	.word	0x40013800
 8002254:	40020000 	.word	0x40020000
 8002258:	40020400 	.word	0x40020400
 800225c:	40020800 	.word	0x40020800
 8002260:	40020c00 	.word	0x40020c00
 8002264:	40021000 	.word	0x40021000
 8002268:	40021400 	.word	0x40021400
 800226c:	40021800 	.word	0x40021800
 8002270:	40013c00 	.word	0x40013c00

08002274 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	460b      	mov	r3, r1
 800227e:	807b      	strh	r3, [r7, #2]
 8002280:	4613      	mov	r3, r2
 8002282:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002284:	787b      	ldrb	r3, [r7, #1]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d003      	beq.n	8002292 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800228a:	887a      	ldrh	r2, [r7, #2]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002290:	e003      	b.n	800229a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002292:	887b      	ldrh	r3, [r7, #2]
 8002294:	041a      	lsls	r2, r3, #16
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	619a      	str	r2, [r3, #24]
}
 800229a:	bf00      	nop
 800229c:	370c      	adds	r7, #12
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
	...

080022a8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80022ae:	2300      	movs	r3, #0
 80022b0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80022b2:	2300      	movs	r3, #0
 80022b4:	603b      	str	r3, [r7, #0]
 80022b6:	4a20      	ldr	r2, [pc, #128]	; (8002338 <HAL_PWREx_EnableOverDrive+0x90>)
 80022b8:	4b1f      	ldr	r3, [pc, #124]	; (8002338 <HAL_PWREx_EnableOverDrive+0x90>)
 80022ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022c0:	6413      	str	r3, [r2, #64]	; 0x40
 80022c2:	4b1d      	ldr	r3, [pc, #116]	; (8002338 <HAL_PWREx_EnableOverDrive+0x90>)
 80022c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ca:	603b      	str	r3, [r7, #0]
 80022cc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80022ce:	4b1b      	ldr	r3, [pc, #108]	; (800233c <HAL_PWREx_EnableOverDrive+0x94>)
 80022d0:	2201      	movs	r2, #1
 80022d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80022d4:	f7fe f9da 	bl	800068c <HAL_GetTick>
 80022d8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80022da:	e009      	b.n	80022f0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80022dc:	f7fe f9d6 	bl	800068c <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80022ea:	d901      	bls.n	80022f0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80022ec:	2303      	movs	r3, #3
 80022ee:	e01f      	b.n	8002330 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80022f0:	4b13      	ldr	r3, [pc, #76]	; (8002340 <HAL_PWREx_EnableOverDrive+0x98>)
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022fc:	d1ee      	bne.n	80022dc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80022fe:	4b11      	ldr	r3, [pc, #68]	; (8002344 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002300:	2201      	movs	r2, #1
 8002302:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002304:	f7fe f9c2 	bl	800068c <HAL_GetTick>
 8002308:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800230a:	e009      	b.n	8002320 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800230c:	f7fe f9be 	bl	800068c <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800231a:	d901      	bls.n	8002320 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800231c:	2303      	movs	r3, #3
 800231e:	e007      	b.n	8002330 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002320:	4b07      	ldr	r3, [pc, #28]	; (8002340 <HAL_PWREx_EnableOverDrive+0x98>)
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002328:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800232c:	d1ee      	bne.n	800230c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800232e:	2300      	movs	r3, #0
}
 8002330:	4618      	mov	r0, r3
 8002332:	3708      	adds	r7, #8
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	40023800 	.word	0x40023800
 800233c:	420e0040 	.word	0x420e0040
 8002340:	40007000 	.word	0x40007000
 8002344:	420e0044 	.word	0x420e0044

08002348 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d101      	bne.n	800235c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e0ca      	b.n	80024f2 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800235c:	4b67      	ldr	r3, [pc, #412]	; (80024fc <HAL_RCC_ClockConfig+0x1b4>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 020f 	and.w	r2, r3, #15
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	429a      	cmp	r2, r3
 8002368:	d20c      	bcs.n	8002384 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800236a:	4b64      	ldr	r3, [pc, #400]	; (80024fc <HAL_RCC_ClockConfig+0x1b4>)
 800236c:	683a      	ldr	r2, [r7, #0]
 800236e:	b2d2      	uxtb	r2, r2
 8002370:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002372:	4b62      	ldr	r3, [pc, #392]	; (80024fc <HAL_RCC_ClockConfig+0x1b4>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 020f 	and.w	r2, r3, #15
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	429a      	cmp	r2, r3
 800237e:	d001      	beq.n	8002384 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e0b6      	b.n	80024f2 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0302 	and.w	r3, r3, #2
 800238c:	2b00      	cmp	r3, #0
 800238e:	d020      	beq.n	80023d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0304 	and.w	r3, r3, #4
 8002398:	2b00      	cmp	r3, #0
 800239a:	d005      	beq.n	80023a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800239c:	4a58      	ldr	r2, [pc, #352]	; (8002500 <HAL_RCC_ClockConfig+0x1b8>)
 800239e:	4b58      	ldr	r3, [pc, #352]	; (8002500 <HAL_RCC_ClockConfig+0x1b8>)
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80023a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0308 	and.w	r3, r3, #8
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d005      	beq.n	80023c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023b4:	4a52      	ldr	r2, [pc, #328]	; (8002500 <HAL_RCC_ClockConfig+0x1b8>)
 80023b6:	4b52      	ldr	r3, [pc, #328]	; (8002500 <HAL_RCC_ClockConfig+0x1b8>)
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80023be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023c0:	494f      	ldr	r1, [pc, #316]	; (8002500 <HAL_RCC_ClockConfig+0x1b8>)
 80023c2:	4b4f      	ldr	r3, [pc, #316]	; (8002500 <HAL_RCC_ClockConfig+0x1b8>)
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0301 	and.w	r3, r3, #1
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d044      	beq.n	8002468 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d107      	bne.n	80023f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023e6:	4b46      	ldr	r3, [pc, #280]	; (8002500 <HAL_RCC_ClockConfig+0x1b8>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d119      	bne.n	8002426 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e07d      	b.n	80024f2 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d003      	beq.n	8002406 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002402:	2b03      	cmp	r3, #3
 8002404:	d107      	bne.n	8002416 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002406:	4b3e      	ldr	r3, [pc, #248]	; (8002500 <HAL_RCC_ClockConfig+0x1b8>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d109      	bne.n	8002426 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e06d      	b.n	80024f2 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002416:	4b3a      	ldr	r3, [pc, #232]	; (8002500 <HAL_RCC_ClockConfig+0x1b8>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0302 	and.w	r3, r3, #2
 800241e:	2b00      	cmp	r3, #0
 8002420:	d101      	bne.n	8002426 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e065      	b.n	80024f2 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002426:	4936      	ldr	r1, [pc, #216]	; (8002500 <HAL_RCC_ClockConfig+0x1b8>)
 8002428:	4b35      	ldr	r3, [pc, #212]	; (8002500 <HAL_RCC_ClockConfig+0x1b8>)
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	f023 0203 	bic.w	r2, r3, #3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	4313      	orrs	r3, r2
 8002436:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002438:	f7fe f928 	bl	800068c <HAL_GetTick>
 800243c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800243e:	e00a      	b.n	8002456 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002440:	f7fe f924 	bl	800068c <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	f241 3288 	movw	r2, #5000	; 0x1388
 800244e:	4293      	cmp	r3, r2
 8002450:	d901      	bls.n	8002456 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e04d      	b.n	80024f2 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002456:	4b2a      	ldr	r3, [pc, #168]	; (8002500 <HAL_RCC_ClockConfig+0x1b8>)
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	f003 020c 	and.w	r2, r3, #12
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	429a      	cmp	r2, r3
 8002466:	d1eb      	bne.n	8002440 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002468:	4b24      	ldr	r3, [pc, #144]	; (80024fc <HAL_RCC_ClockConfig+0x1b4>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 020f 	and.w	r2, r3, #15
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	429a      	cmp	r2, r3
 8002474:	d90c      	bls.n	8002490 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002476:	4b21      	ldr	r3, [pc, #132]	; (80024fc <HAL_RCC_ClockConfig+0x1b4>)
 8002478:	683a      	ldr	r2, [r7, #0]
 800247a:	b2d2      	uxtb	r2, r2
 800247c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800247e:	4b1f      	ldr	r3, [pc, #124]	; (80024fc <HAL_RCC_ClockConfig+0x1b4>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 020f 	and.w	r2, r3, #15
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	429a      	cmp	r2, r3
 800248a:	d001      	beq.n	8002490 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e030      	b.n	80024f2 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0304 	and.w	r3, r3, #4
 8002498:	2b00      	cmp	r3, #0
 800249a:	d008      	beq.n	80024ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800249c:	4918      	ldr	r1, [pc, #96]	; (8002500 <HAL_RCC_ClockConfig+0x1b8>)
 800249e:	4b18      	ldr	r3, [pc, #96]	; (8002500 <HAL_RCC_ClockConfig+0x1b8>)
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0308 	and.w	r3, r3, #8
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d009      	beq.n	80024ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024ba:	4911      	ldr	r1, [pc, #68]	; (8002500 <HAL_RCC_ClockConfig+0x1b8>)
 80024bc:	4b10      	ldr	r3, [pc, #64]	; (8002500 <HAL_RCC_ClockConfig+0x1b8>)
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	691b      	ldr	r3, [r3, #16]
 80024c8:	00db      	lsls	r3, r3, #3
 80024ca:	4313      	orrs	r3, r2
 80024cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80024ce:	f000 fb7b 	bl	8002bc8 <HAL_RCC_GetSysClockFreq>
 80024d2:	4601      	mov	r1, r0
 80024d4:	4b0a      	ldr	r3, [pc, #40]	; (8002500 <HAL_RCC_ClockConfig+0x1b8>)
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	091b      	lsrs	r3, r3, #4
 80024da:	f003 030f 	and.w	r3, r3, #15
 80024de:	4a09      	ldr	r2, [pc, #36]	; (8002504 <HAL_RCC_ClockConfig+0x1bc>)
 80024e0:	5cd3      	ldrb	r3, [r2, r3]
 80024e2:	fa21 f303 	lsr.w	r3, r1, r3
 80024e6:	4a08      	ldr	r2, [pc, #32]	; (8002508 <HAL_RCC_ClockConfig+0x1c0>)
 80024e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80024ea:	2000      	movs	r0, #0
 80024ec:	f7fe f88a 	bl	8000604 <HAL_InitTick>

  return HAL_OK;
 80024f0:	2300      	movs	r3, #0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3710      	adds	r7, #16
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	40023c00 	.word	0x40023c00
 8002500:	40023800 	.word	0x40023800
 8002504:	080085b8 	.word	0x080085b8
 8002508:	20000008 	.word	0x20000008

0800250c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002510:	4b03      	ldr	r3, [pc, #12]	; (8002520 <HAL_RCC_GetHCLKFreq+0x14>)
 8002512:	681b      	ldr	r3, [r3, #0]
}
 8002514:	4618      	mov	r0, r3
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	20000008 	.word	0x20000008

08002524 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002528:	f7ff fff0 	bl	800250c <HAL_RCC_GetHCLKFreq>
 800252c:	4601      	mov	r1, r0
 800252e:	4b05      	ldr	r3, [pc, #20]	; (8002544 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	0a9b      	lsrs	r3, r3, #10
 8002534:	f003 0307 	and.w	r3, r3, #7
 8002538:	4a03      	ldr	r2, [pc, #12]	; (8002548 <HAL_RCC_GetPCLK1Freq+0x24>)
 800253a:	5cd3      	ldrb	r3, [r2, r3]
 800253c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002540:	4618      	mov	r0, r3
 8002542:	bd80      	pop	{r7, pc}
 8002544:	40023800 	.word	0x40023800
 8002548:	080085c8 	.word	0x080085c8

0800254c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002550:	f7ff ffdc 	bl	800250c <HAL_RCC_GetHCLKFreq>
 8002554:	4601      	mov	r1, r0
 8002556:	4b05      	ldr	r3, [pc, #20]	; (800256c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	0b5b      	lsrs	r3, r3, #13
 800255c:	f003 0307 	and.w	r3, r3, #7
 8002560:	4a03      	ldr	r2, [pc, #12]	; (8002570 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002562:	5cd3      	ldrb	r3, [r2, r3]
 8002564:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002568:	4618      	mov	r0, r3
 800256a:	bd80      	pop	{r7, pc}
 800256c:	40023800 	.word	0x40023800
 8002570:	080085c8 	.word	0x080085c8

08002574 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b08c      	sub	sp, #48	; 0x30
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800257c:	2300      	movs	r3, #0
 800257e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8002580:	2300      	movs	r3, #0
 8002582:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8002584:	2300      	movs	r3, #0
 8002586:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8002588:	2300      	movs	r3, #0
 800258a:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 800258c:	2300      	movs	r3, #0
 800258e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8002590:	2300      	movs	r3, #0
 8002592:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8002594:	2300      	movs	r3, #0
 8002596:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002598:	2300      	movs	r3, #0
 800259a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 800259c:	2300      	movs	r3, #0
 800259e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 0301 	and.w	r3, r3, #1
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d010      	beq.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80025ac:	496f      	ldr	r1, [pc, #444]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80025ae:	4b6f      	ldr	r3, [pc, #444]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80025b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80025b4:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025bc:	4313      	orrs	r3, r2
 80025be:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d101      	bne.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80025ca:	2301      	movs	r3, #1
 80025cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0302 	and.w	r3, r3, #2
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d010      	beq.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80025da:	4964      	ldr	r1, [pc, #400]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80025dc:	4b63      	ldr	r3, [pc, #396]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80025de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80025e2:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ea:	4313      	orrs	r3, r2
 80025ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d101      	bne.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80025f8:	2301      	movs	r3, #1
 80025fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0304 	and.w	r3, r3, #4
 8002604:	2b00      	cmp	r3, #0
 8002606:	d017      	beq.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002608:	4958      	ldr	r1, [pc, #352]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800260a:	4b58      	ldr	r3, [pc, #352]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800260c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002610:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002618:	4313      	orrs	r3, r2
 800261a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002622:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002626:	d101      	bne.n	800262c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8002628:	2301      	movs	r3, #1
 800262a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002630:	2b00      	cmp	r3, #0
 8002632:	d101      	bne.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8002634:	2301      	movs	r3, #1
 8002636:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0308 	and.w	r3, r3, #8
 8002640:	2b00      	cmp	r3, #0
 8002642:	d017      	beq.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002644:	4949      	ldr	r1, [pc, #292]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002646:	4b49      	ldr	r3, [pc, #292]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002648:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800264c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002654:	4313      	orrs	r3, r2
 8002656:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800265e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002662:	d101      	bne.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002664:	2301      	movs	r3, #1
 8002666:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800266c:	2b00      	cmp	r3, #0
 800266e:	d101      	bne.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8002670:	2301      	movs	r3, #1
 8002672:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0320 	and.w	r3, r3, #32
 800267c:	2b00      	cmp	r3, #0
 800267e:	f000 808a 	beq.w	8002796 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002682:	2300      	movs	r3, #0
 8002684:	60bb      	str	r3, [r7, #8]
 8002686:	4a39      	ldr	r2, [pc, #228]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002688:	4b38      	ldr	r3, [pc, #224]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800268a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002690:	6413      	str	r3, [r2, #64]	; 0x40
 8002692:	4b36      	ldr	r3, [pc, #216]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800269a:	60bb      	str	r3, [r7, #8]
 800269c:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800269e:	4a34      	ldr	r2, [pc, #208]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80026a0:	4b33      	ldr	r3, [pc, #204]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026a8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80026aa:	f7fd ffef 	bl	800068c <HAL_GetTick>
 80026ae:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80026b0:	e008      	b.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80026b2:	f7fd ffeb 	bl	800068c <HAL_GetTick>
 80026b6:	4602      	mov	r2, r0
 80026b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d901      	bls.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80026c0:	2303      	movs	r3, #3
 80026c2:	e278      	b.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80026c4:	4b2a      	ldr	r3, [pc, #168]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d0f0      	beq.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80026d0:	4b26      	ldr	r3, [pc, #152]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80026d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026d8:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80026da:	6a3b      	ldr	r3, [r7, #32]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d02f      	beq.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e4:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80026e8:	6a3b      	ldr	r3, [r7, #32]
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d028      	beq.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80026ee:	4b1f      	ldr	r3, [pc, #124]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80026f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026f6:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80026f8:	4b1e      	ldr	r3, [pc, #120]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80026fa:	2201      	movs	r2, #1
 80026fc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80026fe:	4b1d      	ldr	r3, [pc, #116]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002700:	2200      	movs	r2, #0
 8002702:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002704:	4a19      	ldr	r2, [pc, #100]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002706:	6a3b      	ldr	r3, [r7, #32]
 8002708:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800270a:	4b18      	ldr	r3, [pc, #96]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800270c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800270e:	f003 0301 	and.w	r3, r3, #1
 8002712:	2b00      	cmp	r3, #0
 8002714:	d014      	beq.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002716:	f7fd ffb9 	bl	800068c <HAL_GetTick>
 800271a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800271c:	e00a      	b.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800271e:	f7fd ffb5 	bl	800068c <HAL_GetTick>
 8002722:	4602      	mov	r2, r0
 8002724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	f241 3288 	movw	r2, #5000	; 0x1388
 800272c:	4293      	cmp	r3, r2
 800272e:	d901      	bls.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8002730:	2303      	movs	r3, #3
 8002732:	e240      	b.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002734:	4b0d      	ldr	r3, [pc, #52]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002736:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002738:	f003 0302 	and.w	r3, r3, #2
 800273c:	2b00      	cmp	r3, #0
 800273e:	d0ee      	beq.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002744:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002748:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800274c:	d114      	bne.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800274e:	4907      	ldr	r1, [pc, #28]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002750:	4b06      	ldr	r3, [pc, #24]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002760:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002764:	4313      	orrs	r3, r2
 8002766:	608b      	str	r3, [r1, #8]
 8002768:	e00c      	b.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800276a:	bf00      	nop
 800276c:	40023800 	.word	0x40023800
 8002770:	40007000 	.word	0x40007000
 8002774:	42470e40 	.word	0x42470e40
 8002778:	4a4a      	ldr	r2, [pc, #296]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800277a:	4b4a      	ldr	r3, [pc, #296]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002782:	6093      	str	r3, [r2, #8]
 8002784:	4947      	ldr	r1, [pc, #284]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002786:	4b47      	ldr	r3, [pc, #284]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002788:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002792:	4313      	orrs	r3, r2
 8002794:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0310 	and.w	r3, r3, #16
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d004      	beq.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80027a2:	4a41      	ldr	r2, [pc, #260]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80027aa:	6013      	str	r3, [r2, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d00a      	beq.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80027b8:	493a      	ldr	r1, [pc, #232]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80027ba:	4b3a      	ldr	r3, [pc, #232]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80027bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027c0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027c8:	4313      	orrs	r3, r2
 80027ca:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d00a      	beq.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80027da:	4932      	ldr	r1, [pc, #200]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80027dc:	4b31      	ldr	r3, [pc, #196]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80027de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027e2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027ea:	4313      	orrs	r3, r2
 80027ec:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d011      	beq.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80027fc:	4929      	ldr	r1, [pc, #164]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80027fe:	4b29      	ldr	r3, [pc, #164]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002800:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002804:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800280c:	4313      	orrs	r3, r2
 800280e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002816:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800281a:	d101      	bne.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 800281c:	2301      	movs	r3, #1
 800281e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002828:	2b00      	cmp	r3, #0
 800282a:	d00a      	beq.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800282c:	491d      	ldr	r1, [pc, #116]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800282e:	4b1d      	ldr	r3, [pc, #116]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002830:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002834:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800283c:	4313      	orrs	r3, r2
 800283e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800284a:	2b00      	cmp	r3, #0
 800284c:	d011      	beq.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800284e:	4915      	ldr	r1, [pc, #84]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002850:	4b14      	ldr	r3, [pc, #80]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002852:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002856:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800285e:	4313      	orrs	r3, r2
 8002860:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002868:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800286c:	d101      	bne.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800286e:	2301      	movs	r3, #1
 8002870:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002874:	2b01      	cmp	r3, #1
 8002876:	d005      	beq.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002880:	f040 80ff 	bne.w	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002884:	4b09      	ldr	r3, [pc, #36]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002886:	2200      	movs	r2, #0
 8002888:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800288a:	f7fd feff 	bl	800068c <HAL_GetTick>
 800288e:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002890:	e00e      	b.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002892:	f7fd fefb 	bl	800068c <HAL_GetTick>
 8002896:	4602      	mov	r2, r0
 8002898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289a:	1ad3      	subs	r3, r2, r3
 800289c:	2b02      	cmp	r3, #2
 800289e:	d907      	bls.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80028a0:	2303      	movs	r3, #3
 80028a2:	e188      	b.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 80028a4:	40023800 	.word	0x40023800
 80028a8:	424711e0 	.word	0x424711e0
 80028ac:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80028b0:	4b7e      	ldr	r3, [pc, #504]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d1ea      	bne.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0301 	and.w	r3, r3, #1
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d003      	beq.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d009      	beq.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d028      	beq.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d124      	bne.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80028e4:	4b71      	ldr	r3, [pc, #452]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80028e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028ea:	0c1b      	lsrs	r3, r3, #16
 80028ec:	f003 0303 	and.w	r3, r3, #3
 80028f0:	3301      	adds	r3, #1
 80028f2:	005b      	lsls	r3, r3, #1
 80028f4:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80028f6:	4b6d      	ldr	r3, [pc, #436]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80028f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028fc:	0e1b      	lsrs	r3, r3, #24
 80028fe:	f003 030f 	and.w	r3, r3, #15
 8002902:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8002904:	4969      	ldr	r1, [pc, #420]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685a      	ldr	r2, [r3, #4]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	019b      	lsls	r3, r3, #6
 8002910:	431a      	orrs	r2, r3
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	085b      	lsrs	r3, r3, #1
 8002916:	3b01      	subs	r3, #1
 8002918:	041b      	lsls	r3, r3, #16
 800291a:	431a      	orrs	r2, r3
 800291c:	69bb      	ldr	r3, [r7, #24]
 800291e:	061b      	lsls	r3, r3, #24
 8002920:	431a      	orrs	r2, r3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	695b      	ldr	r3, [r3, #20]
 8002926:	071b      	lsls	r3, r3, #28
 8002928:	4313      	orrs	r3, r2
 800292a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0304 	and.w	r3, r3, #4
 8002936:	2b00      	cmp	r3, #0
 8002938:	d004      	beq.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002942:	d00a      	beq.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800294c:	2b00      	cmp	r3, #0
 800294e:	d035      	beq.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002954:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002958:	d130      	bne.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800295a:	4b54      	ldr	r3, [pc, #336]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800295c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002960:	0c1b      	lsrs	r3, r3, #16
 8002962:	f003 0303 	and.w	r3, r3, #3
 8002966:	3301      	adds	r3, #1
 8002968:	005b      	lsls	r3, r3, #1
 800296a:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800296c:	4b4f      	ldr	r3, [pc, #316]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800296e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002972:	0f1b      	lsrs	r3, r3, #28
 8002974:	f003 0307 	and.w	r3, r3, #7
 8002978:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 800297a:	494c      	ldr	r1, [pc, #304]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	685a      	ldr	r2, [r3, #4]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	019b      	lsls	r3, r3, #6
 8002986:	431a      	orrs	r2, r3
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	085b      	lsrs	r3, r3, #1
 800298c:	3b01      	subs	r3, #1
 800298e:	041b      	lsls	r3, r3, #16
 8002990:	431a      	orrs	r2, r3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	691b      	ldr	r3, [r3, #16]
 8002996:	061b      	lsls	r3, r3, #24
 8002998:	431a      	orrs	r2, r3
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	071b      	lsls	r3, r3, #28
 800299e:	4313      	orrs	r3, r2
 80029a0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80029a4:	4941      	ldr	r1, [pc, #260]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80029a6:	4b41      	ldr	r3, [pc, #260]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80029a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029ac:	f023 021f 	bic.w	r2, r3, #31
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029b4:	3b01      	subs	r3, #1
 80029b6:	4313      	orrs	r3, r2
 80029b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d029      	beq.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029d0:	d124      	bne.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80029d2:	4b36      	ldr	r3, [pc, #216]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80029d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029d8:	0c1b      	lsrs	r3, r3, #16
 80029da:	f003 0303 	and.w	r3, r3, #3
 80029de:	3301      	adds	r3, #1
 80029e0:	005b      	lsls	r3, r3, #1
 80029e2:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80029e4:	4b31      	ldr	r3, [pc, #196]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80029e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029ea:	0f1b      	lsrs	r3, r3, #28
 80029ec:	f003 0307 	and.w	r3, r3, #7
 80029f0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 80029f2:	492e      	ldr	r1, [pc, #184]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	685a      	ldr	r2, [r3, #4]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	019b      	lsls	r3, r3, #6
 80029fe:	431a      	orrs	r2, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	085b      	lsrs	r3, r3, #1
 8002a06:	3b01      	subs	r3, #1
 8002a08:	041b      	lsls	r3, r3, #16
 8002a0a:	431a      	orrs	r2, r3
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	061b      	lsls	r3, r3, #24
 8002a10:	431a      	orrs	r2, r3
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	071b      	lsls	r3, r3, #28
 8002a16:	4313      	orrs	r3, r2
 8002a18:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d016      	beq.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002a28:	4920      	ldr	r1, [pc, #128]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685a      	ldr	r2, [r3, #4]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	019b      	lsls	r3, r3, #6
 8002a34:	431a      	orrs	r2, r3
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	085b      	lsrs	r3, r3, #1
 8002a3c:	3b01      	subs	r3, #1
 8002a3e:	041b      	lsls	r3, r3, #16
 8002a40:	431a      	orrs	r2, r3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	691b      	ldr	r3, [r3, #16]
 8002a46:	061b      	lsls	r3, r3, #24
 8002a48:	431a      	orrs	r2, r3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	695b      	ldr	r3, [r3, #20]
 8002a4e:	071b      	lsls	r3, r3, #28
 8002a50:	4313      	orrs	r3, r2
 8002a52:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002a56:	4b16      	ldr	r3, [pc, #88]	; (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002a58:	2201      	movs	r2, #1
 8002a5a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002a5c:	f7fd fe16 	bl	800068c <HAL_GetTick>
 8002a60:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002a62:	e008      	b.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002a64:	f7fd fe12 	bl	800068c <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d901      	bls.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e09f      	b.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002a76:	4b0d      	ldr	r3, [pc, #52]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d0f0      	beq.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8002a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	f040 8095 	bne.w	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002a8a:	4b0a      	ldr	r3, [pc, #40]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002a90:	f7fd fdfc 	bl	800068c <HAL_GetTick>
 8002a94:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002a96:	e00f      	b.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002a98:	f7fd fdf8 	bl	800068c <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	d908      	bls.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e085      	b.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002aaa:	bf00      	nop
 8002aac:	40023800 	.word	0x40023800
 8002ab0:	42470068 	.word	0x42470068
 8002ab4:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002ab8:	4b41      	ldr	r3, [pc, #260]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ac0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ac4:	d0e8      	beq.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0304 	and.w	r3, r3, #4
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d003      	beq.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x566>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d009      	beq.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d02b      	beq.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d127      	bne.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8002aee:	4b34      	ldr	r3, [pc, #208]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002af0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002af4:	0c1b      	lsrs	r3, r3, #16
 8002af6:	f003 0303 	and.w	r3, r3, #3
 8002afa:	3301      	adds	r3, #1
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8002b00:	492f      	ldr	r1, [pc, #188]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	699a      	ldr	r2, [r3, #24]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	69db      	ldr	r3, [r3, #28]
 8002b0a:	019b      	lsls	r3, r3, #6
 8002b0c:	431a      	orrs	r2, r3
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	085b      	lsrs	r3, r3, #1
 8002b12:	3b01      	subs	r3, #1
 8002b14:	041b      	lsls	r3, r3, #16
 8002b16:	431a      	orrs	r2, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1c:	061b      	lsls	r3, r3, #24
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002b24:	4926      	ldr	r1, [pc, #152]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002b26:	4b26      	ldr	r3, [pc, #152]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002b28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b2c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b34:	3b01      	subs	r3, #1
 8002b36:	021b      	lsls	r3, r3, #8
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d01d      	beq.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b4e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b52:	d118      	bne.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002b54:	4b1a      	ldr	r3, [pc, #104]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b5a:	0e1b      	lsrs	r3, r3, #24
 8002b5c:	f003 030f 	and.w	r3, r3, #15
 8002b60:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8002b62:	4917      	ldr	r1, [pc, #92]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	699a      	ldr	r2, [r3, #24]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	69db      	ldr	r3, [r3, #28]
 8002b6c:	019b      	lsls	r3, r3, #6
 8002b6e:	431a      	orrs	r2, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6a1b      	ldr	r3, [r3, #32]
 8002b74:	085b      	lsrs	r3, r3, #1
 8002b76:	3b01      	subs	r3, #1
 8002b78:	041b      	lsls	r3, r3, #16
 8002b7a:	431a      	orrs	r2, r3
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	061b      	lsls	r3, r3, #24
 8002b80:	4313      	orrs	r3, r2
 8002b82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002b86:	4b0f      	ldr	r3, [pc, #60]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8002b88:	2201      	movs	r2, #1
 8002b8a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002b8c:	f7fd fd7e 	bl	800068c <HAL_GetTick>
 8002b90:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002b92:	e008      	b.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002b94:	f7fd fd7a 	bl	800068c <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d901      	bls.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e007      	b.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002ba6:	4b06      	ldr	r3, [pc, #24]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002bae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bb2:	d1ef      	bne.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002bb4:	2300      	movs	r3, #0
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3730      	adds	r7, #48	; 0x30
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	40023800 	.word	0x40023800
 8002bc4:	42470070 	.word	0x42470070

08002bc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bcc:	b091      	sub	sp, #68	; 0x44
 8002bce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t pllvco = 0U;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t pllp = 0U;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t pllr = 0U;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t sysclockfreq = 0U;
 8002be0:	2300      	movs	r3, #0
 8002be2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002be4:	4b9e      	ldr	r3, [pc, #632]	; (8002e60 <HAL_RCC_GetSysClockFreq+0x298>)
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	f003 030c 	and.w	r3, r3, #12
 8002bec:	2b0c      	cmp	r3, #12
 8002bee:	f200 812d 	bhi.w	8002e4c <HAL_RCC_GetSysClockFreq+0x284>
 8002bf2:	a201      	add	r2, pc, #4	; (adr r2, 8002bf8 <HAL_RCC_GetSysClockFreq+0x30>)
 8002bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bf8:	08002c2d 	.word	0x08002c2d
 8002bfc:	08002e4d 	.word	0x08002e4d
 8002c00:	08002e4d 	.word	0x08002e4d
 8002c04:	08002e4d 	.word	0x08002e4d
 8002c08:	08002c33 	.word	0x08002c33
 8002c0c:	08002e4d 	.word	0x08002e4d
 8002c10:	08002e4d 	.word	0x08002e4d
 8002c14:	08002e4d 	.word	0x08002e4d
 8002c18:	08002c39 	.word	0x08002c39
 8002c1c:	08002e4d 	.word	0x08002e4d
 8002c20:	08002e4d 	.word	0x08002e4d
 8002c24:	08002e4d 	.word	0x08002e4d
 8002c28:	08002d4f 	.word	0x08002d4f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c2c:	4b8d      	ldr	r3, [pc, #564]	; (8002e64 <HAL_RCC_GetSysClockFreq+0x29c>)
 8002c2e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002c30:	e10f      	b.n	8002e52 <HAL_RCC_GetSysClockFreq+0x28a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c32:	4b8d      	ldr	r3, [pc, #564]	; (8002e68 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8002c34:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002c36:	e10c      	b.n	8002e52 <HAL_RCC_GetSysClockFreq+0x28a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c38:	4b89      	ldr	r3, [pc, #548]	; (8002e60 <HAL_RCC_GetSysClockFreq+0x298>)
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c40:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c42:	4b87      	ldr	r3, [pc, #540]	; (8002e60 <HAL_RCC_GetSysClockFreq+0x298>)
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d023      	beq.n	8002c96 <HAL_RCC_GetSysClockFreq+0xce>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c4e:	4b84      	ldr	r3, [pc, #528]	; (8002e60 <HAL_RCC_GetSysClockFreq+0x298>)
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	099b      	lsrs	r3, r3, #6
 8002c54:	f04f 0400 	mov.w	r4, #0
 8002c58:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002c5c:	f04f 0200 	mov.w	r2, #0
 8002c60:	ea03 0301 	and.w	r3, r3, r1
 8002c64:	ea04 0402 	and.w	r4, r4, r2
 8002c68:	4a7f      	ldr	r2, [pc, #508]	; (8002e68 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8002c6a:	fb02 f104 	mul.w	r1, r2, r4
 8002c6e:	2200      	movs	r2, #0
 8002c70:	fb02 f203 	mul.w	r2, r2, r3
 8002c74:	440a      	add	r2, r1
 8002c76:	497c      	ldr	r1, [pc, #496]	; (8002e68 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8002c78:	fba3 0101 	umull	r0, r1, r3, r1
 8002c7c:	1853      	adds	r3, r2, r1
 8002c7e:	4619      	mov	r1, r3
 8002c80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c82:	f04f 0400 	mov.w	r4, #0
 8002c86:	461a      	mov	r2, r3
 8002c88:	4623      	mov	r3, r4
 8002c8a:	f7fd fb11 	bl	80002b0 <__aeabi_uldivmod>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	460c      	mov	r4, r1
 8002c92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c94:	e04d      	b.n	8002d32 <HAL_RCC_GetSysClockFreq+0x16a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c96:	4b72      	ldr	r3, [pc, #456]	; (8002e60 <HAL_RCC_GetSysClockFreq+0x298>)
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	099b      	lsrs	r3, r3, #6
 8002c9c:	f04f 0400 	mov.w	r4, #0
 8002ca0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002ca4:	f04f 0200 	mov.w	r2, #0
 8002ca8:	ea01 0103 	and.w	r1, r1, r3
 8002cac:	ea02 0204 	and.w	r2, r2, r4
 8002cb0:	460b      	mov	r3, r1
 8002cb2:	4614      	mov	r4, r2
 8002cb4:	0160      	lsls	r0, r4, #5
 8002cb6:	6278      	str	r0, [r7, #36]	; 0x24
 8002cb8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002cba:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8002cbe:	6278      	str	r0, [r7, #36]	; 0x24
 8002cc0:	015b      	lsls	r3, r3, #5
 8002cc2:	623b      	str	r3, [r7, #32]
 8002cc4:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002cc8:	1a5b      	subs	r3, r3, r1
 8002cca:	eb64 0402 	sbc.w	r4, r4, r2
 8002cce:	ea4f 1984 	mov.w	r9, r4, lsl #6
 8002cd2:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 8002cd6:	ea4f 1883 	mov.w	r8, r3, lsl #6
 8002cda:	ebb8 0803 	subs.w	r8, r8, r3
 8002cde:	eb69 0904 	sbc.w	r9, r9, r4
 8002ce2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ce6:	61fb      	str	r3, [r7, #28]
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002cee:	61fb      	str	r3, [r7, #28]
 8002cf0:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8002cf4:	61bb      	str	r3, [r7, #24]
 8002cf6:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8002cfa:	eb18 0801 	adds.w	r8, r8, r1
 8002cfe:	eb49 0902 	adc.w	r9, r9, r2
 8002d02:	ea4f 2389 	mov.w	r3, r9, lsl #10
 8002d06:	617b      	str	r3, [r7, #20]
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	ea43 5398 	orr.w	r3, r3, r8, lsr #22
 8002d0e:	617b      	str	r3, [r7, #20]
 8002d10:	ea4f 2388 	mov.w	r3, r8, lsl #10
 8002d14:	613b      	str	r3, [r7, #16]
 8002d16:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8002d1a:	4640      	mov	r0, r8
 8002d1c:	4649      	mov	r1, r9
 8002d1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d20:	f04f 0400 	mov.w	r4, #0
 8002d24:	461a      	mov	r2, r3
 8002d26:	4623      	mov	r3, r4
 8002d28:	f7fd fac2 	bl	80002b0 <__aeabi_uldivmod>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	460c      	mov	r4, r1
 8002d30:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d32:	4b4b      	ldr	r3, [pc, #300]	; (8002e60 <HAL_RCC_GetSysClockFreq+0x298>)
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	0c1b      	lsrs	r3, r3, #16
 8002d38:	f003 0303 	and.w	r3, r3, #3
 8002d3c:	3301      	adds	r3, #1
 8002d3e:	005b      	lsls	r3, r3, #1
 8002d40:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002d42:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d46:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d4a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002d4c:	e081      	b.n	8002e52 <HAL_RCC_GetSysClockFreq+0x28a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d4e:	4b44      	ldr	r3, [pc, #272]	; (8002e60 <HAL_RCC_GetSysClockFreq+0x298>)
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d56:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d58:	4b41      	ldr	r3, [pc, #260]	; (8002e60 <HAL_RCC_GetSysClockFreq+0x298>)
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d023      	beq.n	8002dac <HAL_RCC_GetSysClockFreq+0x1e4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d64:	4b3e      	ldr	r3, [pc, #248]	; (8002e60 <HAL_RCC_GetSysClockFreq+0x298>)
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	099b      	lsrs	r3, r3, #6
 8002d6a:	f04f 0400 	mov.w	r4, #0
 8002d6e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002d72:	f04f 0200 	mov.w	r2, #0
 8002d76:	ea03 0301 	and.w	r3, r3, r1
 8002d7a:	ea04 0402 	and.w	r4, r4, r2
 8002d7e:	4a3a      	ldr	r2, [pc, #232]	; (8002e68 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8002d80:	fb02 f104 	mul.w	r1, r2, r4
 8002d84:	2200      	movs	r2, #0
 8002d86:	fb02 f203 	mul.w	r2, r2, r3
 8002d8a:	440a      	add	r2, r1
 8002d8c:	4936      	ldr	r1, [pc, #216]	; (8002e68 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8002d8e:	fba3 0101 	umull	r0, r1, r3, r1
 8002d92:	1853      	adds	r3, r2, r1
 8002d94:	4619      	mov	r1, r3
 8002d96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d98:	f04f 0400 	mov.w	r4, #0
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	4623      	mov	r3, r4
 8002da0:	f7fd fa86 	bl	80002b0 <__aeabi_uldivmod>
 8002da4:	4603      	mov	r3, r0
 8002da6:	460c      	mov	r4, r1
 8002da8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002daa:	e043      	b.n	8002e34 <HAL_RCC_GetSysClockFreq+0x26c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dac:	4b2c      	ldr	r3, [pc, #176]	; (8002e60 <HAL_RCC_GetSysClockFreq+0x298>)
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	099b      	lsrs	r3, r3, #6
 8002db2:	f04f 0400 	mov.w	r4, #0
 8002db6:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002dba:	f04f 0200 	mov.w	r2, #0
 8002dbe:	ea01 0103 	and.w	r1, r1, r3
 8002dc2:	ea02 0204 	and.w	r2, r2, r4
 8002dc6:	460b      	mov	r3, r1
 8002dc8:	4614      	mov	r4, r2
 8002dca:	0160      	lsls	r0, r4, #5
 8002dcc:	60f8      	str	r0, [r7, #12]
 8002dce:	68f8      	ldr	r0, [r7, #12]
 8002dd0:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8002dd4:	60f8      	str	r0, [r7, #12]
 8002dd6:	015b      	lsls	r3, r3, #5
 8002dd8:	60bb      	str	r3, [r7, #8]
 8002dda:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002dde:	1a5b      	subs	r3, r3, r1
 8002de0:	eb64 0402 	sbc.w	r4, r4, r2
 8002de4:	01a6      	lsls	r6, r4, #6
 8002de6:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 8002dea:	019d      	lsls	r5, r3, #6
 8002dec:	1aed      	subs	r5, r5, r3
 8002dee:	eb66 0604 	sbc.w	r6, r6, r4
 8002df2:	00f3      	lsls	r3, r6, #3
 8002df4:	607b      	str	r3, [r7, #4]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8002dfc:	607b      	str	r3, [r7, #4]
 8002dfe:	00eb      	lsls	r3, r5, #3
 8002e00:	603b      	str	r3, [r7, #0]
 8002e02:	e897 0060 	ldmia.w	r7, {r5, r6}
 8002e06:	186d      	adds	r5, r5, r1
 8002e08:	eb46 0602 	adc.w	r6, r6, r2
 8002e0c:	ea4f 2b86 	mov.w	fp, r6, lsl #10
 8002e10:	ea4b 5b95 	orr.w	fp, fp, r5, lsr #22
 8002e14:	ea4f 2a85 	mov.w	sl, r5, lsl #10
 8002e18:	4655      	mov	r5, sl
 8002e1a:	465e      	mov	r6, fp
 8002e1c:	4628      	mov	r0, r5
 8002e1e:	4631      	mov	r1, r6
 8002e20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e22:	f04f 0400 	mov.w	r4, #0
 8002e26:	461a      	mov	r2, r3
 8002e28:	4623      	mov	r3, r4
 8002e2a:	f7fd fa41 	bl	80002b0 <__aeabi_uldivmod>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	460c      	mov	r4, r1
 8002e32:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002e34:	4b0a      	ldr	r3, [pc, #40]	; (8002e60 <HAL_RCC_GetSysClockFreq+0x298>)
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	0f1b      	lsrs	r3, r3, #28
 8002e3a:	f003 0307 	and.w	r3, r3, #7
 8002e3e:	62fb      	str	r3, [r7, #44]	; 0x2c

      sysclockfreq = pllvco/pllr;
 8002e40:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e48:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002e4a:	e002      	b.n	8002e52 <HAL_RCC_GetSysClockFreq+0x28a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e4c:	4b05      	ldr	r3, [pc, #20]	; (8002e64 <HAL_RCC_GetSysClockFreq+0x29c>)
 8002e4e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002e50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3744      	adds	r7, #68	; 0x44
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e5e:	bf00      	nop
 8002e60:	40023800 	.word	0x40023800
 8002e64:	00f42400 	.word	0x00f42400
 8002e68:	017d7840 	.word	0x017d7840

08002e6c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b086      	sub	sp, #24
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e74:	2300      	movs	r3, #0
 8002e76:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0301 	and.w	r3, r3, #1
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	f000 8083 	beq.w	8002f8c <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002e86:	4b95      	ldr	r3, [pc, #596]	; (80030dc <HAL_RCC_OscConfig+0x270>)
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	f003 030c 	and.w	r3, r3, #12
 8002e8e:	2b04      	cmp	r3, #4
 8002e90:	d019      	beq.n	8002ec6 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002e92:	4b92      	ldr	r3, [pc, #584]	; (80030dc <HAL_RCC_OscConfig+0x270>)
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002e9a:	2b08      	cmp	r3, #8
 8002e9c:	d106      	bne.n	8002eac <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002e9e:	4b8f      	ldr	r3, [pc, #572]	; (80030dc <HAL_RCC_OscConfig+0x270>)
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ea6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002eaa:	d00c      	beq.n	8002ec6 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002eac:	4b8b      	ldr	r3, [pc, #556]	; (80030dc <HAL_RCC_OscConfig+0x270>)
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002eb4:	2b0c      	cmp	r3, #12
 8002eb6:	d112      	bne.n	8002ede <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002eb8:	4b88      	ldr	r3, [pc, #544]	; (80030dc <HAL_RCC_OscConfig+0x270>)
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ec0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ec4:	d10b      	bne.n	8002ede <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ec6:	4b85      	ldr	r3, [pc, #532]	; (80030dc <HAL_RCC_OscConfig+0x270>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d05b      	beq.n	8002f8a <HAL_RCC_OscConfig+0x11e>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d157      	bne.n	8002f8a <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e216      	b.n	800330c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ee6:	d106      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x8a>
 8002ee8:	4a7c      	ldr	r2, [pc, #496]	; (80030dc <HAL_RCC_OscConfig+0x270>)
 8002eea:	4b7c      	ldr	r3, [pc, #496]	; (80030dc <HAL_RCC_OscConfig+0x270>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ef2:	6013      	str	r3, [r2, #0]
 8002ef4:	e01d      	b.n	8002f32 <HAL_RCC_OscConfig+0xc6>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002efe:	d10c      	bne.n	8002f1a <HAL_RCC_OscConfig+0xae>
 8002f00:	4a76      	ldr	r2, [pc, #472]	; (80030dc <HAL_RCC_OscConfig+0x270>)
 8002f02:	4b76      	ldr	r3, [pc, #472]	; (80030dc <HAL_RCC_OscConfig+0x270>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f0a:	6013      	str	r3, [r2, #0]
 8002f0c:	4a73      	ldr	r2, [pc, #460]	; (80030dc <HAL_RCC_OscConfig+0x270>)
 8002f0e:	4b73      	ldr	r3, [pc, #460]	; (80030dc <HAL_RCC_OscConfig+0x270>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f16:	6013      	str	r3, [r2, #0]
 8002f18:	e00b      	b.n	8002f32 <HAL_RCC_OscConfig+0xc6>
 8002f1a:	4a70      	ldr	r2, [pc, #448]	; (80030dc <HAL_RCC_OscConfig+0x270>)
 8002f1c:	4b6f      	ldr	r3, [pc, #444]	; (80030dc <HAL_RCC_OscConfig+0x270>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f24:	6013      	str	r3, [r2, #0]
 8002f26:	4a6d      	ldr	r2, [pc, #436]	; (80030dc <HAL_RCC_OscConfig+0x270>)
 8002f28:	4b6c      	ldr	r3, [pc, #432]	; (80030dc <HAL_RCC_OscConfig+0x270>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f30:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d013      	beq.n	8002f62 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f3a:	f7fd fba7 	bl	800068c <HAL_GetTick>
 8002f3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f40:	e008      	b.n	8002f54 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f42:	f7fd fba3 	bl	800068c <HAL_GetTick>
 8002f46:	4602      	mov	r2, r0
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	2b64      	cmp	r3, #100	; 0x64
 8002f4e:	d901      	bls.n	8002f54 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	e1db      	b.n	800330c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f54:	4b61      	ldr	r3, [pc, #388]	; (80030dc <HAL_RCC_OscConfig+0x270>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d0f0      	beq.n	8002f42 <HAL_RCC_OscConfig+0xd6>
 8002f60:	e014      	b.n	8002f8c <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f62:	f7fd fb93 	bl	800068c <HAL_GetTick>
 8002f66:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f68:	e008      	b.n	8002f7c <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f6a:	f7fd fb8f 	bl	800068c <HAL_GetTick>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	2b64      	cmp	r3, #100	; 0x64
 8002f76:	d901      	bls.n	8002f7c <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	e1c7      	b.n	800330c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f7c:	4b57      	ldr	r3, [pc, #348]	; (80030dc <HAL_RCC_OscConfig+0x270>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d1f0      	bne.n	8002f6a <HAL_RCC_OscConfig+0xfe>
 8002f88:	e000      	b.n	8002f8c <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f8a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0302 	and.w	r3, r3, #2
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d06f      	beq.n	8003078 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002f98:	4b50      	ldr	r3, [pc, #320]	; (80030dc <HAL_RCC_OscConfig+0x270>)
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	f003 030c 	and.w	r3, r3, #12
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d017      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002fa4:	4b4d      	ldr	r3, [pc, #308]	; (80030dc <HAL_RCC_OscConfig+0x270>)
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002fac:	2b08      	cmp	r3, #8
 8002fae:	d105      	bne.n	8002fbc <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002fb0:	4b4a      	ldr	r3, [pc, #296]	; (80030dc <HAL_RCC_OscConfig+0x270>)
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d00b      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fbc:	4b47      	ldr	r3, [pc, #284]	; (80030dc <HAL_RCC_OscConfig+0x270>)
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002fc4:	2b0c      	cmp	r3, #12
 8002fc6:	d11c      	bne.n	8003002 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fc8:	4b44      	ldr	r3, [pc, #272]	; (80030dc <HAL_RCC_OscConfig+0x270>)
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d116      	bne.n	8003002 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fd4:	4b41      	ldr	r3, [pc, #260]	; (80030dc <HAL_RCC_OscConfig+0x270>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0302 	and.w	r3, r3, #2
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d005      	beq.n	8002fec <HAL_RCC_OscConfig+0x180>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d001      	beq.n	8002fec <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e18f      	b.n	800330c <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fec:	493b      	ldr	r1, [pc, #236]	; (80030dc <HAL_RCC_OscConfig+0x270>)
 8002fee:	4b3b      	ldr	r3, [pc, #236]	; (80030dc <HAL_RCC_OscConfig+0x270>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	691b      	ldr	r3, [r3, #16]
 8002ffa:	00db      	lsls	r3, r3, #3
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003000:	e03a      	b.n	8003078 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d020      	beq.n	800304c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800300a:	4b35      	ldr	r3, [pc, #212]	; (80030e0 <HAL_RCC_OscConfig+0x274>)
 800300c:	2201      	movs	r2, #1
 800300e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003010:	f7fd fb3c 	bl	800068c <HAL_GetTick>
 8003014:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003016:	e008      	b.n	800302a <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003018:	f7fd fb38 	bl	800068c <HAL_GetTick>
 800301c:	4602      	mov	r2, r0
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	2b02      	cmp	r3, #2
 8003024:	d901      	bls.n	800302a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e170      	b.n	800330c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800302a:	4b2c      	ldr	r3, [pc, #176]	; (80030dc <HAL_RCC_OscConfig+0x270>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0302 	and.w	r3, r3, #2
 8003032:	2b00      	cmp	r3, #0
 8003034:	d0f0      	beq.n	8003018 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003036:	4929      	ldr	r1, [pc, #164]	; (80030dc <HAL_RCC_OscConfig+0x270>)
 8003038:	4b28      	ldr	r3, [pc, #160]	; (80030dc <HAL_RCC_OscConfig+0x270>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	691b      	ldr	r3, [r3, #16]
 8003044:	00db      	lsls	r3, r3, #3
 8003046:	4313      	orrs	r3, r2
 8003048:	600b      	str	r3, [r1, #0]
 800304a:	e015      	b.n	8003078 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800304c:	4b24      	ldr	r3, [pc, #144]	; (80030e0 <HAL_RCC_OscConfig+0x274>)
 800304e:	2200      	movs	r2, #0
 8003050:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003052:	f7fd fb1b 	bl	800068c <HAL_GetTick>
 8003056:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003058:	e008      	b.n	800306c <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800305a:	f7fd fb17 	bl	800068c <HAL_GetTick>
 800305e:	4602      	mov	r2, r0
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	2b02      	cmp	r3, #2
 8003066:	d901      	bls.n	800306c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8003068:	2303      	movs	r3, #3
 800306a:	e14f      	b.n	800330c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800306c:	4b1b      	ldr	r3, [pc, #108]	; (80030dc <HAL_RCC_OscConfig+0x270>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0302 	and.w	r3, r3, #2
 8003074:	2b00      	cmp	r3, #0
 8003076:	d1f0      	bne.n	800305a <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0308 	and.w	r3, r3, #8
 8003080:	2b00      	cmp	r3, #0
 8003082:	d037      	beq.n	80030f4 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	695b      	ldr	r3, [r3, #20]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d016      	beq.n	80030ba <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800308c:	4b15      	ldr	r3, [pc, #84]	; (80030e4 <HAL_RCC_OscConfig+0x278>)
 800308e:	2201      	movs	r2, #1
 8003090:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003092:	f7fd fafb 	bl	800068c <HAL_GetTick>
 8003096:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003098:	e008      	b.n	80030ac <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800309a:	f7fd faf7 	bl	800068c <HAL_GetTick>
 800309e:	4602      	mov	r2, r0
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	2b02      	cmp	r3, #2
 80030a6:	d901      	bls.n	80030ac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80030a8:	2303      	movs	r3, #3
 80030aa:	e12f      	b.n	800330c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030ac:	4b0b      	ldr	r3, [pc, #44]	; (80030dc <HAL_RCC_OscConfig+0x270>)
 80030ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030b0:	f003 0302 	and.w	r3, r3, #2
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d0f0      	beq.n	800309a <HAL_RCC_OscConfig+0x22e>
 80030b8:	e01c      	b.n	80030f4 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030ba:	4b0a      	ldr	r3, [pc, #40]	; (80030e4 <HAL_RCC_OscConfig+0x278>)
 80030bc:	2200      	movs	r2, #0
 80030be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030c0:	f7fd fae4 	bl	800068c <HAL_GetTick>
 80030c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030c6:	e00f      	b.n	80030e8 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030c8:	f7fd fae0 	bl	800068c <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d908      	bls.n	80030e8 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e118      	b.n	800330c <HAL_RCC_OscConfig+0x4a0>
 80030da:	bf00      	nop
 80030dc:	40023800 	.word	0x40023800
 80030e0:	42470000 	.word	0x42470000
 80030e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030e8:	4b8a      	ldr	r3, [pc, #552]	; (8003314 <HAL_RCC_OscConfig+0x4a8>)
 80030ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030ec:	f003 0302 	and.w	r3, r3, #2
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d1e9      	bne.n	80030c8 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0304 	and.w	r3, r3, #4
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	f000 8097 	beq.w	8003230 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003102:	2300      	movs	r3, #0
 8003104:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003106:	4b83      	ldr	r3, [pc, #524]	; (8003314 <HAL_RCC_OscConfig+0x4a8>)
 8003108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d10f      	bne.n	8003132 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003112:	2300      	movs	r3, #0
 8003114:	60fb      	str	r3, [r7, #12]
 8003116:	4a7f      	ldr	r2, [pc, #508]	; (8003314 <HAL_RCC_OscConfig+0x4a8>)
 8003118:	4b7e      	ldr	r3, [pc, #504]	; (8003314 <HAL_RCC_OscConfig+0x4a8>)
 800311a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003120:	6413      	str	r3, [r2, #64]	; 0x40
 8003122:	4b7c      	ldr	r3, [pc, #496]	; (8003314 <HAL_RCC_OscConfig+0x4a8>)
 8003124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800312a:	60fb      	str	r3, [r7, #12]
 800312c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800312e:	2301      	movs	r3, #1
 8003130:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003132:	4b79      	ldr	r3, [pc, #484]	; (8003318 <HAL_RCC_OscConfig+0x4ac>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800313a:	2b00      	cmp	r3, #0
 800313c:	d118      	bne.n	8003170 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800313e:	4a76      	ldr	r2, [pc, #472]	; (8003318 <HAL_RCC_OscConfig+0x4ac>)
 8003140:	4b75      	ldr	r3, [pc, #468]	; (8003318 <HAL_RCC_OscConfig+0x4ac>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003148:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800314a:	f7fd fa9f 	bl	800068c <HAL_GetTick>
 800314e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003150:	e008      	b.n	8003164 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003152:	f7fd fa9b 	bl	800068c <HAL_GetTick>
 8003156:	4602      	mov	r2, r0
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	1ad3      	subs	r3, r2, r3
 800315c:	2b02      	cmp	r3, #2
 800315e:	d901      	bls.n	8003164 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003160:	2303      	movs	r3, #3
 8003162:	e0d3      	b.n	800330c <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003164:	4b6c      	ldr	r3, [pc, #432]	; (8003318 <HAL_RCC_OscConfig+0x4ac>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800316c:	2b00      	cmp	r3, #0
 800316e:	d0f0      	beq.n	8003152 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	2b01      	cmp	r3, #1
 8003176:	d106      	bne.n	8003186 <HAL_RCC_OscConfig+0x31a>
 8003178:	4a66      	ldr	r2, [pc, #408]	; (8003314 <HAL_RCC_OscConfig+0x4a8>)
 800317a:	4b66      	ldr	r3, [pc, #408]	; (8003314 <HAL_RCC_OscConfig+0x4a8>)
 800317c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800317e:	f043 0301 	orr.w	r3, r3, #1
 8003182:	6713      	str	r3, [r2, #112]	; 0x70
 8003184:	e01c      	b.n	80031c0 <HAL_RCC_OscConfig+0x354>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	2b05      	cmp	r3, #5
 800318c:	d10c      	bne.n	80031a8 <HAL_RCC_OscConfig+0x33c>
 800318e:	4a61      	ldr	r2, [pc, #388]	; (8003314 <HAL_RCC_OscConfig+0x4a8>)
 8003190:	4b60      	ldr	r3, [pc, #384]	; (8003314 <HAL_RCC_OscConfig+0x4a8>)
 8003192:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003194:	f043 0304 	orr.w	r3, r3, #4
 8003198:	6713      	str	r3, [r2, #112]	; 0x70
 800319a:	4a5e      	ldr	r2, [pc, #376]	; (8003314 <HAL_RCC_OscConfig+0x4a8>)
 800319c:	4b5d      	ldr	r3, [pc, #372]	; (8003314 <HAL_RCC_OscConfig+0x4a8>)
 800319e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a0:	f043 0301 	orr.w	r3, r3, #1
 80031a4:	6713      	str	r3, [r2, #112]	; 0x70
 80031a6:	e00b      	b.n	80031c0 <HAL_RCC_OscConfig+0x354>
 80031a8:	4a5a      	ldr	r2, [pc, #360]	; (8003314 <HAL_RCC_OscConfig+0x4a8>)
 80031aa:	4b5a      	ldr	r3, [pc, #360]	; (8003314 <HAL_RCC_OscConfig+0x4a8>)
 80031ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ae:	f023 0301 	bic.w	r3, r3, #1
 80031b2:	6713      	str	r3, [r2, #112]	; 0x70
 80031b4:	4a57      	ldr	r2, [pc, #348]	; (8003314 <HAL_RCC_OscConfig+0x4a8>)
 80031b6:	4b57      	ldr	r3, [pc, #348]	; (8003314 <HAL_RCC_OscConfig+0x4a8>)
 80031b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ba:	f023 0304 	bic.w	r3, r3, #4
 80031be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d015      	beq.n	80031f4 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031c8:	f7fd fa60 	bl	800068c <HAL_GetTick>
 80031cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031ce:	e00a      	b.n	80031e6 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031d0:	f7fd fa5c 	bl	800068c <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	f241 3288 	movw	r2, #5000	; 0x1388
 80031de:	4293      	cmp	r3, r2
 80031e0:	d901      	bls.n	80031e6 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e092      	b.n	800330c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031e6:	4b4b      	ldr	r3, [pc, #300]	; (8003314 <HAL_RCC_OscConfig+0x4a8>)
 80031e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ea:	f003 0302 	and.w	r3, r3, #2
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d0ee      	beq.n	80031d0 <HAL_RCC_OscConfig+0x364>
 80031f2:	e014      	b.n	800321e <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031f4:	f7fd fa4a 	bl	800068c <HAL_GetTick>
 80031f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031fa:	e00a      	b.n	8003212 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031fc:	f7fd fa46 	bl	800068c <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	f241 3288 	movw	r2, #5000	; 0x1388
 800320a:	4293      	cmp	r3, r2
 800320c:	d901      	bls.n	8003212 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e07c      	b.n	800330c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003212:	4b40      	ldr	r3, [pc, #256]	; (8003314 <HAL_RCC_OscConfig+0x4a8>)
 8003214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003216:	f003 0302 	and.w	r3, r3, #2
 800321a:	2b00      	cmp	r3, #0
 800321c:	d1ee      	bne.n	80031fc <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800321e:	7dfb      	ldrb	r3, [r7, #23]
 8003220:	2b01      	cmp	r3, #1
 8003222:	d105      	bne.n	8003230 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003224:	4a3b      	ldr	r2, [pc, #236]	; (8003314 <HAL_RCC_OscConfig+0x4a8>)
 8003226:	4b3b      	ldr	r3, [pc, #236]	; (8003314 <HAL_RCC_OscConfig+0x4a8>)
 8003228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800322e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	699b      	ldr	r3, [r3, #24]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d068      	beq.n	800330a <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003238:	4b36      	ldr	r3, [pc, #216]	; (8003314 <HAL_RCC_OscConfig+0x4a8>)
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	f003 030c 	and.w	r3, r3, #12
 8003240:	2b08      	cmp	r3, #8
 8003242:	d060      	beq.n	8003306 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	699b      	ldr	r3, [r3, #24]
 8003248:	2b02      	cmp	r3, #2
 800324a:	d145      	bne.n	80032d8 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800324c:	4b33      	ldr	r3, [pc, #204]	; (800331c <HAL_RCC_OscConfig+0x4b0>)
 800324e:	2200      	movs	r2, #0
 8003250:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003252:	f7fd fa1b 	bl	800068c <HAL_GetTick>
 8003256:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003258:	e008      	b.n	800326c <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800325a:	f7fd fa17 	bl	800068c <HAL_GetTick>
 800325e:	4602      	mov	r2, r0
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	1ad3      	subs	r3, r2, r3
 8003264:	2b02      	cmp	r3, #2
 8003266:	d901      	bls.n	800326c <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8003268:	2303      	movs	r3, #3
 800326a:	e04f      	b.n	800330c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800326c:	4b29      	ldr	r3, [pc, #164]	; (8003314 <HAL_RCC_OscConfig+0x4a8>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003274:	2b00      	cmp	r3, #0
 8003276:	d1f0      	bne.n	800325a <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003278:	4926      	ldr	r1, [pc, #152]	; (8003314 <HAL_RCC_OscConfig+0x4a8>)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	69da      	ldr	r2, [r3, #28]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6a1b      	ldr	r3, [r3, #32]
 8003282:	431a      	orrs	r2, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003288:	019b      	lsls	r3, r3, #6
 800328a:	431a      	orrs	r2, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003290:	085b      	lsrs	r3, r3, #1
 8003292:	3b01      	subs	r3, #1
 8003294:	041b      	lsls	r3, r3, #16
 8003296:	431a      	orrs	r2, r3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800329c:	061b      	lsls	r3, r3, #24
 800329e:	431a      	orrs	r2, r3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a4:	071b      	lsls	r3, r3, #28
 80032a6:	4313      	orrs	r3, r2
 80032a8:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032aa:	4b1c      	ldr	r3, [pc, #112]	; (800331c <HAL_RCC_OscConfig+0x4b0>)
 80032ac:	2201      	movs	r2, #1
 80032ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032b0:	f7fd f9ec 	bl	800068c <HAL_GetTick>
 80032b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032b6:	e008      	b.n	80032ca <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032b8:	f7fd f9e8 	bl	800068c <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	d901      	bls.n	80032ca <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	e020      	b.n	800330c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032ca:	4b12      	ldr	r3, [pc, #72]	; (8003314 <HAL_RCC_OscConfig+0x4a8>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d0f0      	beq.n	80032b8 <HAL_RCC_OscConfig+0x44c>
 80032d6:	e018      	b.n	800330a <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032d8:	4b10      	ldr	r3, [pc, #64]	; (800331c <HAL_RCC_OscConfig+0x4b0>)
 80032da:	2200      	movs	r2, #0
 80032dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032de:	f7fd f9d5 	bl	800068c <HAL_GetTick>
 80032e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032e4:	e008      	b.n	80032f8 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032e6:	f7fd f9d1 	bl	800068c <HAL_GetTick>
 80032ea:	4602      	mov	r2, r0
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	2b02      	cmp	r3, #2
 80032f2:	d901      	bls.n	80032f8 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80032f4:	2303      	movs	r3, #3
 80032f6:	e009      	b.n	800330c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032f8:	4b06      	ldr	r3, [pc, #24]	; (8003314 <HAL_RCC_OscConfig+0x4a8>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003300:	2b00      	cmp	r3, #0
 8003302:	d1f0      	bne.n	80032e6 <HAL_RCC_OscConfig+0x47a>
 8003304:	e001      	b.n	800330a <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e000      	b.n	800330c <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 800330a:	2300      	movs	r3, #0
}
 800330c:	4618      	mov	r0, r3
 800330e:	3718      	adds	r7, #24
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}
 8003314:	40023800 	.word	0x40023800
 8003318:	40007000 	.word	0x40007000
 800331c:	42470060 	.word	0x42470060

08003320 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b082      	sub	sp, #8
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d101      	bne.n	8003332 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e01d      	b.n	800336e <HAL_SD_Init+0x4e>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003338:	b2db      	uxtb	r3, r3
 800333a:	2b00      	cmp	r3, #0
 800333c:	d105      	bne.n	800334a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f003 fd0b 	bl	8006d60 <HAL_SD_MspInit>
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2203      	movs	r2, #3
 800334e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  HAL_SD_InitCard(hsd);
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f000 f810 	bl	8003378 <HAL_SD_InitCard>

  /* Initialize the error code */
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2200      	movs	r2, #0
 800335c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	631a      	str	r2, [r3, #48]	; 0x30
                                                                                     
  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800336c:	2300      	movs	r3, #0
}
 800336e:	4618      	mov	r0, r3
 8003370:	3708      	adds	r7, #8
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
	...

08003378 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card 
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003378:	b5b0      	push	{r4, r5, r7, lr}
 800337a:	b08e      	sub	sp, #56	; 0x38
 800337c:	af04      	add	r7, sp, #16
 800337e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8003380:	2300      	movs	r3, #0
 8003382:	627b      	str	r3, [r7, #36]	; 0x24
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8003384:	2300      	movs	r3, #0
 8003386:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8003388:	2300      	movs	r3, #0
 800338a:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800338c:	2300      	movs	r3, #0
 800338e:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8003390:	2300      	movs	r3, #0
 8003392:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003394:	2300      	movs	r3, #0
 8003396:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8003398:	2376      	movs	r3, #118	; 0x76
 800339a:	623b      	str	r3, [r7, #32]

  /* Initialize SDIO peripheral interface with default configuration */
  SDIO_Init(hsd->Instance, Init);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681d      	ldr	r5, [r3, #0]
 80033a0:	466c      	mov	r4, sp
 80033a2:	f107 0318 	add.w	r3, r7, #24
 80033a6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80033aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80033ae:	f107 030c 	add.w	r3, r7, #12
 80033b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80033b4:	4628      	mov	r0, r5
 80033b6:	f002 f9fb 	bl	80057b0 <SDIO_Init>

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd); 
 80033ba:	4b1c      	ldr	r3, [pc, #112]	; (800342c <HAL_SD_InitCard+0xb4>)
 80033bc:	2200      	movs	r2, #0
 80033be:	601a      	str	r2, [r3, #0]
  
  /* Set Power State to ON */
  SDIO_PowerState_ON(hsd->Instance);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4618      	mov	r0, r3
 80033c6:	f002 fa3c 	bl	8005842 <SDIO_PowerState_ON>
  
  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80033ca:	4b18      	ldr	r3, [pc, #96]	; (800342c <HAL_SD_InitCard+0xb4>)
 80033cc:	2201      	movs	r2, #1
 80033ce:	601a      	str	r2, [r3, #0]
  
  /* Required power up waiting time before starting the SD initialization 
  sequence */
  HAL_Delay(2U);
 80033d0:	2002      	movs	r0, #2
 80033d2:	f7fd f967 	bl	80006a4 <HAL_Delay>
  
  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f000 fdb7 	bl	8003f4a <SD_PowerON>
 80033dc:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 80033de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d00b      	beq.n	80033fc <HAL_SD_InitCard+0x84>
  {
    hsd->State = HAL_SD_STATE_READY;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f2:	431a      	orrs	r2, r3
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e013      	b.n	8003424 <HAL_SD_InitCard+0xac>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f000 fcdb 	bl	8003db8 <SD_InitCard>
 8003402:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8003404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003406:	2b00      	cmp	r3, #0
 8003408:	d00b      	beq.n	8003422 <HAL_SD_InitCard+0xaa>
  {
    hsd->State = HAL_SD_STATE_READY;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2201      	movs	r2, #1
 800340e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003418:	431a      	orrs	r2, r3
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e000      	b.n	8003424 <HAL_SD_InitCard+0xac>
  }

  return HAL_OK;
 8003422:	2300      	movs	r3, #0
}
 8003424:	4618      	mov	r0, r3
 8003426:	3728      	adds	r7, #40	; 0x28
 8003428:	46bd      	mov	sp, r7
 800342a:	bdb0      	pop	{r4, r5, r7, pc}
 800342c:	422580a0 	.word	0x422580a0

08003430 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b084      	sub	sp, #16
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8003438:	2300      	movs	r3, #0
 800343a:	60fb      	str	r3, [r7, #12]
  
  /* Check for SDIO interrupt flags */
  if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DATAEND) != RESET)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003446:	2b00      	cmp	r3, #0
 8003448:	f000 808b 	beq.w	8003562 <HAL_SD_IRQHandler+0x132>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND); 
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003454:	639a      	str	r2, [r3, #56]	; 0x38
    
#ifdef SDIO_STA_STBITERR
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	6812      	ldr	r2, [r2, #0]
 800345e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003460:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8003464:	63da      	str	r2, [r3, #60]	; 0x3c
                             SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);
#endif
    
    if((hsd->Context & SD_CONTEXT_IT) != RESET)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346a:	f003 0308 	and.w	r3, r3, #8
 800346e:	2b00      	cmp	r3, #0
 8003470:	d03a      	beq.n	80034e8 <HAL_SD_IRQHandler+0xb8>
    {
      if(((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET))
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003476:	f003 0302 	and.w	r3, r3, #2
 800347a:	2b00      	cmp	r3, #0
 800347c:	d105      	bne.n	800348a <HAL_SD_IRQHandler+0x5a>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003482:	f003 0320 	and.w	r3, r3, #32
 8003486:	2b00      	cmp	r3, #0
 8003488:	d011      	beq.n	80034ae <HAL_SD_IRQHandler+0x7e>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4618      	mov	r0, r3
 8003490:	f002 fa90 	bl	80059b4 <SDMMC_CmdStopTransfer>
 8003494:	60f8      	str	r0, [r7, #12]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d008      	beq.n	80034ae <HAL_SD_IRQHandler+0x7e>
        {
          hsd->ErrorCode |= errorstate;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	431a      	orrs	r2, r3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f000 f929 	bl	8003700 <HAL_SD_ErrorCallback>
        }
      }
      
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80034b6:	639a      	str	r2, [r3, #56]	; 0x38
      
      hsd->State = HAL_SD_STATE_READY;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET))
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c4:	f003 0301 	and.w	r3, r3, #1
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d105      	bne.n	80034d8 <HAL_SD_IRQHandler+0xa8>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d0:	f003 0302 	and.w	r3, r3, #2
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d003      	beq.n	80034e0 <HAL_SD_IRQHandler+0xb0>
      {
        HAL_SD_RxCpltCallback(hsd);
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f000 f907 	bl	80036ec <HAL_SD_RxCpltCallback>
      hsd->State = HAL_SD_STATE_READY;
      HAL_SD_ErrorCallback(hsd);
    }
  }
#endif
}
 80034de:	e0f3      	b.n	80036c8 <HAL_SD_IRQHandler+0x298>
        HAL_SD_TxCpltCallback(hsd);
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f000 f8f9 	bl	80036d8 <HAL_SD_TxCpltCallback>
}
 80034e6:	e0ef      	b.n	80036c8 <HAL_SD_IRQHandler+0x298>
    else if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	f000 80e9 	beq.w	80036c8 <HAL_SD_IRQHandler+0x298>
      if((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fa:	f003 0320 	and.w	r3, r3, #32
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d011      	beq.n	8003526 <HAL_SD_IRQHandler+0xf6>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4618      	mov	r0, r3
 8003508:	f002 fa54 	bl	80059b4 <SDMMC_CmdStopTransfer>
 800350c:	60f8      	str	r0, [r7, #12]
        if(errorstate != HAL_SD_ERROR_NONE)
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d008      	beq.n	8003526 <HAL_SD_IRQHandler+0xf6>
          hsd->ErrorCode |= errorstate;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	431a      	orrs	r2, r3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f000 f8ed 	bl	8003700 <HAL_SD_ErrorCallback>
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) == RESET) && ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == RESET))
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800352a:	f003 0301 	and.w	r3, r3, #1
 800352e:	2b00      	cmp	r3, #0
 8003530:	f040 80ca 	bne.w	80036c8 <HAL_SD_IRQHandler+0x298>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003538:	f003 0302 	and.w	r3, r3, #2
 800353c:	2b00      	cmp	r3, #0
 800353e:	f040 80c3 	bne.w	80036c8 <HAL_SD_IRQHandler+0x298>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	6812      	ldr	r2, [r2, #0]
 800354a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800354c:	f022 0208 	bic.w	r2, r2, #8
 8003550:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2201      	movs	r2, #1
 8003556:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f000 f8bc 	bl	80036d8 <HAL_SD_TxCpltCallback>
}
 8003560:	e0b2      	b.n	80036c8 <HAL_SD_IRQHandler+0x298>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_TXFIFOHE) != RESET)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003568:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d008      	beq.n	8003582 <HAL_SD_IRQHandler+0x152>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_TXFIFOHE);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003578:	639a      	str	r2, [r3, #56]	; 0x38
    SD_Write_IT(hsd);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f000 ff41 	bl	8004402 <SD_Write_IT>
}
 8003580:	e0a2      	b.n	80036c8 <HAL_SD_IRQHandler+0x298>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_RXFIFOHF) != RESET)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003588:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d008      	beq.n	80035a2 <HAL_SD_IRQHandler+0x172>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXFIFOHF);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003598:	639a      	str	r2, [r3, #56]	; 0x38
    SD_Read_IT(hsd);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f000 ff09 	bl	80043b2 <SD_Read_IT>
}
 80035a0:	e092      	b.n	80036c8 <HAL_SD_IRQHandler+0x298>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_TXUNDERR) != RESET)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035a8:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	f000 808b 	beq.w	80036c8 <HAL_SD_IRQHandler+0x298>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DCRCFAIL) != RESET)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035b8:	f003 0302 	and.w	r3, r3, #2
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d005      	beq.n	80035cc <HAL_SD_IRQHandler+0x19c>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL; 
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035c4:	f043 0202 	orr.w	r2, r3, #2
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DTIMEOUT) != RESET)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035d2:	f003 0308 	and.w	r3, r3, #8
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d005      	beq.n	80035e6 <HAL_SD_IRQHandler+0x1b6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT; 
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035de:	f043 0208 	orr.w	r2, r3, #8
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_RXOVERR) != RESET)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035ec:	f003 0320 	and.w	r3, r3, #32
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d005      	beq.n	8003600 <HAL_SD_IRQHandler+0x1d0>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN; 
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f8:	f043 0220 	orr.w	r2, r3, #32
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_TXUNDERR) != RESET)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003606:	f003 0310 	and.w	r3, r3, #16
 800360a:	2b00      	cmp	r3, #0
 800360c:	d005      	beq.n	800361a <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN; 
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003612:	f043 0210 	orr.w	r2, r3, #16
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003622:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	6812      	ldr	r2, [r2, #0]
 800362c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800362e:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8003632:	63da      	str	r2, [r3, #60]	; 0x3c
    if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003638:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800363c:	2b00      	cmp	r3, #0
 800363e:	d036      	beq.n	80036ae <HAL_SD_IRQHandler+0x27e>
      if(hsd->hdmatx != NULL)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003644:	2b00      	cmp	r3, #0
 8003646:	d011      	beq.n	800366c <HAL_SD_IRQHandler+0x23c>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364c:	4a20      	ldr	r2, [pc, #128]	; (80036d0 <HAL_SD_IRQHandler+0x2a0>)
 800364e:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003654:	4618      	mov	r0, r3
 8003656:	f7fe f9f1 	bl	8001a3c <HAL_DMA_Abort_IT>
 800365a:	4603      	mov	r3, r0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d033      	beq.n	80036c8 <HAL_SD_IRQHandler+0x298>
          SD_DMATxAbort(hsd->hdmatx);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003664:	4618      	mov	r0, r3
 8003666:	f000 fb2b 	bl	8003cc0 <SD_DMATxAbort>
}
 800366a:	e02d      	b.n	80036c8 <HAL_SD_IRQHandler+0x298>
      else if(hsd->hdmarx != NULL)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003670:	2b00      	cmp	r3, #0
 8003672:	d011      	beq.n	8003698 <HAL_SD_IRQHandler+0x268>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003678:	4a16      	ldr	r2, [pc, #88]	; (80036d4 <HAL_SD_IRQHandler+0x2a4>)
 800367a:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003680:	4618      	mov	r0, r3
 8003682:	f7fe f9db 	bl	8001a3c <HAL_DMA_Abort_IT>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d01d      	beq.n	80036c8 <HAL_SD_IRQHandler+0x298>
          SD_DMARxAbort(hsd->hdmarx);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003690:	4618      	mov	r0, r3
 8003692:	f000 fb53 	bl	8003d3c <SD_DMARxAbort>
}
 8003696:	e017      	b.n	80036c8 <HAL_SD_IRQHandler+0x298>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2200      	movs	r2, #0
 800369c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2201      	movs	r2, #1
 80036a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_AbortCallback(hsd);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f000 f834 	bl	8003714 <HAL_SD_AbortCallback>
}
 80036ac:	e00c      	b.n	80036c8 <HAL_SD_IRQHandler+0x298>
    else if((hsd->Context & SD_CONTEXT_IT) != RESET)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b2:	f003 0308 	and.w	r3, r3, #8
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d006      	beq.n	80036c8 <HAL_SD_IRQHandler+0x298>
      hsd->State = HAL_SD_STATE_READY;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2201      	movs	r2, #1
 80036be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      HAL_SD_ErrorCallback(hsd);
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f000 f81c 	bl	8003700 <HAL_SD_ErrorCallback>
}
 80036c8:	bf00      	nop
 80036ca:	3710      	adds	r7, #16
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}
 80036d0:	08003cc1 	.word	0x08003cc1
 80036d4:	08003d3d 	.word	0x08003d3d

080036d8 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd Pointer to SD handle
  * @retval None
  */
 __weak void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_TxCpltCallback can be implemented in the user file
   */
}
 80036e0:	bf00      	nop
 80036e2:	370c      	adds	r7, #12
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr

080036ec <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);
 
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_RxCpltCallback can be implemented in the user file
   */
}
 80036f4:	bf00      	nop
 80036f6:	370c      	adds	r7, #12
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr

08003700 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8003700:	b480      	push	{r7}
 8003702:	b083      	sub	sp, #12
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);
 
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */ 
}
 8003708:	bf00      	nop
 800370a:	370c      	adds	r7, #12
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr

08003714 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8003714:	b480      	push	{r7}
 8003716:	b083      	sub	sp, #12
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);
 
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */ 
}
 800371c:	bf00      	nop
 800371e:	370c      	adds	r7, #12
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr

08003728 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8003728:	b490      	push	{r4, r7}
 800372a:	b084      	sub	sp, #16
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8003732:	2300      	movs	r3, #0
 8003734:	60fb      	str	r3, [r7, #12]
  
  /* Byte 0 */
  tmp = (hsd->CSD[0U] & 0xFF000000U) >> 24U;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800373a:	0e1b      	lsrs	r3, r3, #24
 800373c:	60fb      	str	r3, [r7, #12]
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0U) >> 6U);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	099b      	lsrs	r3, r3, #6
 8003742:	b2db      	uxtb	r3, r3
 8003744:	f003 0303 	and.w	r3, r3, #3
 8003748:	b2da      	uxtb	r2, r3
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	701a      	strb	r2, [r3, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3CU) >> 2U);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	089b      	lsrs	r3, r3, #2
 8003752:	b2db      	uxtb	r3, r3
 8003754:	f003 030f 	and.w	r3, r3, #15
 8003758:	b2da      	uxtb	r2, r3
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	705a      	strb	r2, [r3, #1]
  pCSD->Reserved1      = tmp & 0x03U;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	b2db      	uxtb	r3, r3
 8003762:	f003 0303 	and.w	r3, r3, #3
 8003766:	b2da      	uxtb	r2, r3
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	709a      	strb	r2, [r3, #2]
  
  /* Byte 1 */
  tmp = (hsd->CSD[0U] & 0x00FF0000U) >> 16U;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003770:	0c1b      	lsrs	r3, r3, #16
 8003772:	b2db      	uxtb	r3, r3
 8003774:	60fb      	str	r3, [r7, #12]
  pCSD->TAAC = (uint8_t)tmp;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	b2da      	uxtb	r2, r3
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	70da      	strb	r2, [r3, #3]
  
  /* Byte 2 */
  tmp = (hsd->CSD[0U] & 0x0000FF00U) >> 8U;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003782:	0a1b      	lsrs	r3, r3, #8
 8003784:	b2db      	uxtb	r3, r3
 8003786:	60fb      	str	r3, [r7, #12]
  pCSD->NSAC = (uint8_t)tmp;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	b2da      	uxtb	r2, r3
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	711a      	strb	r2, [r3, #4]
  
  /* Byte 3 */
  tmp = hsd->CSD[0U] & 0x000000FFU;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003794:	b2db      	uxtb	r3, r3
 8003796:	60fb      	str	r3, [r7, #12]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	b2da      	uxtb	r2, r3
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	715a      	strb	r2, [r3, #5]
  
  /* Byte 4 */
  tmp = (hsd->CSD[1U] & 0xFF000000U) >> 24U;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037a4:	0e1b      	lsrs	r3, r3, #24
 80037a6:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses = (uint16_t)(tmp << 4U);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	011b      	lsls	r3, r3, #4
 80037ae:	b29a      	uxth	r2, r3
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	80da      	strh	r2, [r3, #6]
  
  /* Byte 5 */
  tmp = (hsd->CSD[1U] & 0x00FF0000U) >> 16U;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037b8:	0c1b      	lsrs	r3, r3, #16
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0U) >> 4U);
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	88db      	ldrh	r3, [r3, #6]
 80037c2:	b29a      	uxth	r2, r3
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	091b      	lsrs	r3, r3, #4
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	f003 030f 	and.w	r3, r3, #15
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	4313      	orrs	r3, r2
 80037d2:	b29a      	uxth	r2, r3
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	80da      	strh	r2, [r3, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0FU);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	f003 030f 	and.w	r3, r3, #15
 80037e0:	b2da      	uxtb	r2, r3
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	721a      	strb	r2, [r3, #8]
  
  /* Byte 6 */
  tmp = (hsd->CSD[1U] & 0x0000FF00U) >> 8U;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037ea:	0a1b      	lsrs	r3, r3, #8
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	60fb      	str	r3, [r7, #12]
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80U) >> 7U);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	09db      	lsrs	r3, r3, #7
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	f003 0301 	and.w	r3, r3, #1
 80037fa:	b2da      	uxtb	r2, r3
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	725a      	strb	r2, [r3, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40U) >> 6U);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	099b      	lsrs	r3, r3, #6
 8003804:	b2db      	uxtb	r3, r3
 8003806:	f003 0301 	and.w	r3, r3, #1
 800380a:	b2da      	uxtb	r2, r3
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	729a      	strb	r2, [r3, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20U) >> 5U);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	095b      	lsrs	r3, r3, #5
 8003814:	b2db      	uxtb	r3, r3
 8003816:	f003 0301 	and.w	r3, r3, #1
 800381a:	b2da      	uxtb	r2, r3
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	72da      	strb	r2, [r3, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10U) >> 4U);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	091b      	lsrs	r3, r3, #4
 8003824:	b2db      	uxtb	r3, r3
 8003826:	f003 0301 	and.w	r3, r3, #1
 800382a:	b2da      	uxtb	r2, r3
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	731a      	strb	r2, [r3, #12]
  pCSD->Reserved2       = 0U; /*!< Reserved */
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	2200      	movs	r2, #0
 8003834:	735a      	strb	r2, [r3, #13]
       
  if(hsd->SdCard.CardType == CARD_SDSC)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800383a:	2b00      	cmp	r3, #0
 800383c:	f040 8086 	bne.w	800394c <HAL_SD_GetCardCSD+0x224>
  {
    pCSD->DeviceSize = (tmp & 0x03U) << 10U;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	029b      	lsls	r3, r3, #10
 8003844:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	611a      	str	r2, [r3, #16]
    
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1U] & 0x000000FFU);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003850:	b2db      	uxtb	r3, r3
 8003852:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp) << 2U;
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	691a      	ldr	r2, [r3, #16]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	431a      	orrs	r2, r3
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003866:	0e1b      	lsrs	r3, r3, #24
 8003868:	b2db      	uxtb	r3, r3
 800386a:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp & 0xC0U) >> 6U;
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	691a      	ldr	r2, [r3, #16]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	099b      	lsrs	r3, r3, #6
 8003874:	f003 0303 	and.w	r3, r3, #3
 8003878:	431a      	orrs	r2, r3
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	611a      	str	r2, [r3, #16]
    
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38U) >> 3U;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	08db      	lsrs	r3, r3, #3
 8003882:	b2db      	uxtb	r3, r3
 8003884:	f003 0307 	and.w	r3, r3, #7
 8003888:	b2da      	uxtb	r2, r3
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	751a      	strb	r2, [r3, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07U);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	b2db      	uxtb	r3, r3
 8003892:	f003 0307 	and.w	r3, r3, #7
 8003896:	b2da      	uxtb	r2, r3
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	755a      	strb	r2, [r3, #21]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x00FF0000U) >> 16U);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038a0:	0c1b      	lsrs	r3, r3, #16
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	60fb      	str	r3, [r7, #12]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0U) >> 5U;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	095b      	lsrs	r3, r3, #5
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	f003 0307 	and.w	r3, r3, #7
 80038b0:	b2da      	uxtb	r2, r3
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	759a      	strb	r2, [r3, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1CU) >> 2U;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	089b      	lsrs	r3, r3, #2
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	f003 0307 	and.w	r3, r3, #7
 80038c0:	b2da      	uxtb	r2, r3
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	75da      	strb	r2, [r3, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03U) << 1U;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	005b      	lsls	r3, r3, #1
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	f003 0306 	and.w	r3, r3, #6
 80038d2:	b2da      	uxtb	r2, r3
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	761a      	strb	r2, [r3, #24]
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x0000FF00U) >> 8U);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038dc:	0a1b      	lsrs	r3, r3, #8
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSizeMul |= (tmp & 0x80U) >> 7U;
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	7e1b      	ldrb	r3, [r3, #24]
 80038e6:	b2da      	uxtb	r2, r3
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	09db      	lsrs	r3, r3, #7
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	f003 0301 	and.w	r3, r3, #1
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	4313      	orrs	r3, r2
 80038f6:	b2da      	uxtb	r2, r3
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	761a      	strb	r2, [r3, #24]
    
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	691b      	ldr	r3, [r3, #16]
 8003900:	1c5a      	adds	r2, r3, #1
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1U << (pCSD->DeviceSizeMul + 2U));
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	7e1b      	ldrb	r3, [r3, #24]
 800390a:	b2db      	uxtb	r3, r3
 800390c:	3302      	adds	r3, #2
 800390e:	2201      	movs	r2, #1
 8003910:	409a      	lsls	r2, r3
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003916:	fb02 f203 	mul.w	r2, r2, r3
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 1U << (pCSD->RdBlockLen);
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	7a1b      	ldrb	r3, [r3, #8]
 8003922:	b2db      	uxtb	r3, r3
 8003924:	461a      	mov	r2, r3
 8003926:	2301      	movs	r3, #1
 8003928:	fa03 f202 	lsl.w	r2, r3, r2
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U); 
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003938:	0a52      	lsrs	r2, r2, #9
 800393a:	fb02 f203 	mul.w	r2, r2, r3
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003948:	661a      	str	r2, [r3, #96]	; 0x60
 800394a:	e051      	b.n	80039f0 <HAL_SD_GetCardCSD+0x2c8>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003950:	2b01      	cmp	r3, #1
 8003952:	d13c      	bne.n	80039ce <HAL_SD_GetCardCSD+0x2a6>
  {
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1U] & 0x000000FFU);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003958:	b2db      	uxtb	r3, r3
 800395a:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize = (tmp & 0x3FU) << 16U;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	041b      	lsls	r3, r3, #16
 8003960:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800396c:	0e1b      	lsrs	r3, r3, #24
 800396e:	b2db      	uxtb	r3, r3
 8003970:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp << 8U);
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	691a      	ldr	r2, [r3, #16]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	021b      	lsls	r3, r3, #8
 800397a:	431a      	orrs	r2, r3
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	611a      	str	r2, [r3, #16]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x00FF0000U) >> 16U);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003984:	0c1b      	lsrs	r3, r3, #16
 8003986:	b2db      	uxtb	r3, r3
 8003988:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp);
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	691a      	ldr	r2, [r3, #16]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	431a      	orrs	r2, r3
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	611a      	str	r2, [r3, #16]
    
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x0000FF00U) >> 8U);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800399a:	0a1b      	lsrs	r3, r3, #8
 800399c:	b2db      	uxtb	r3, r3
 800399e:	60fb      	str	r3, [r7, #12]
    
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1U) * 1024U);
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	691b      	ldr	r3, [r3, #16]
 80039a4:	f04f 0400 	mov.w	r4, #0
 80039a8:	3301      	adds	r3, #1
 80039aa:	f144 0400 	adc.w	r4, r4, #0
 80039ae:	029a      	lsls	r2, r3, #10
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	655a      	str	r2, [r3, #84]	; 0x54
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512U;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039c2:	659a      	str	r2, [r3, #88]	; 0x58
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	661a      	str	r2, [r3, #96]	; 0x60
 80039cc:	e010      	b.n	80039f0 <HAL_SD_GetCardCSD+0x2c8>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);   
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80039d6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039dc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e0c1      	b.n	8003b74 <HAL_SD_GetCardCSD+0x44c>
  }
  
  pCSD->EraseGrSize = (tmp & 0x40U) >> 6U;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	099b      	lsrs	r3, r3, #6
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	f003 0301 	and.w	r3, r3, #1
 80039fa:	b2da      	uxtb	r2, r3
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	765a      	strb	r2, [r3, #25]
  pCSD->EraseGrMul  = (tmp & 0x3FU) << 1U;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	005b      	lsls	r3, r3, #1
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8003a0c:	b2da      	uxtb	r2, r3
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	769a      	strb	r2, [r3, #26]
  
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CSD[2U] & 0x000000FFU);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	60fb      	str	r3, [r7, #12]
  pCSD->EraseGrMul     |= (tmp & 0x80U) >> 7U;
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	7e9b      	ldrb	r3, [r3, #26]
 8003a1e:	b2da      	uxtb	r2, r3
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	09db      	lsrs	r3, r3, #7
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	f003 0301 	and.w	r3, r3, #1
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	b2da      	uxtb	r2, r3
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	769a      	strb	r2, [r3, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7FU);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a3c:	b2da      	uxtb	r2, r3
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	76da      	strb	r2, [r3, #27]
  
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0xFF000000U) >> 24U);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a46:	0e1b      	lsrs	r3, r3, #24
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	60fb      	str	r3, [r7, #12]
  pCSD->WrProtectGrEnable = (tmp & 0x80U) >> 7U;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	09db      	lsrs	r3, r3, #7
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	f003 0301 	and.w	r3, r3, #1
 8003a56:	b2da      	uxtb	r2, r3
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	771a      	strb	r2, [r3, #28]
  pCSD->ManDeflECC        = (tmp & 0x60U) >> 5U;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	095b      	lsrs	r3, r3, #5
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	f003 0303 	and.w	r3, r3, #3
 8003a66:	b2da      	uxtb	r2, r3
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	775a      	strb	r2, [r3, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1CU) >> 2U;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	089b      	lsrs	r3, r3, #2
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	f003 0307 	and.w	r3, r3, #7
 8003a76:	b2da      	uxtb	r2, r3
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	779a      	strb	r2, [r3, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03U) << 2U;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	009b      	lsls	r3, r3, #2
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	f003 030c 	and.w	r3, r3, #12
 8003a88:	b2da      	uxtb	r2, r3
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	77da      	strb	r2, [r3, #31]
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0x00FF0000U) >> 16U);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a92:	0c1b      	lsrs	r3, r3, #16
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	60fb      	str	r3, [r7, #12]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0U) >> 6U;
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	7fdb      	ldrb	r3, [r3, #31]
 8003a9c:	b2da      	uxtb	r2, r3
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	099b      	lsrs	r3, r3, #6
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	f003 0303 	and.w	r3, r3, #3
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	b2da      	uxtb	r2, r3
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	77da      	strb	r2, [r3, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20U) >> 5U;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	095b      	lsrs	r3, r3, #5
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	f003 0301 	and.w	r3, r3, #1
 8003abc:	b2da      	uxtb	r2, r3
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	f883 2020 	strb.w	r2, [r3, #32]
  pCSD->Reserved3           = 0U;
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01U);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	f003 0301 	and.w	r3, r3, #1
 8003ad4:	b2da      	uxtb	r2, r3
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  
  /* Byte 14 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0x0000FF00U) >> 8U);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ae0:	0a1b      	lsrs	r3, r3, #8
 8003ae2:	b2db      	uxtb	r3, r3
 8003ae4:	60fb      	str	r3, [r7, #12]
  pCSD->FileFormatGrouop = (tmp & 0x80U) >> 7U;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	09db      	lsrs	r3, r3, #7
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	f003 0301 	and.w	r3, r3, #1
 8003af0:	b2da      	uxtb	r2, r3
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40U) >> 6U;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	099b      	lsrs	r3, r3, #6
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	f003 0301 	and.w	r3, r3, #1
 8003b02:	b2da      	uxtb	r2, r3
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20U) >> 5U;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	095b      	lsrs	r3, r3, #5
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	f003 0301 	and.w	r3, r3, #1
 8003b14:	b2da      	uxtb	r2, r3
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10U) >> 4U;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	091b      	lsrs	r3, r3, #4
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	f003 0301 	and.w	r3, r3, #1
 8003b26:	b2da      	uxtb	r2, r3
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0CU) >> 2U;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	089b      	lsrs	r3, r3, #2
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	f003 0303 	and.w	r3, r3, #3
 8003b38:	b2da      	uxtb	r2, r3
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03U);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	f003 0303 	and.w	r3, r3, #3
 8003b48:	b2da      	uxtb	r2, r3
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* Byte 15 */
  tmp = (uint8_t)(hsd->CSD[3U] & 0x000000FFU);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	60fb      	str	r3, [r7, #12]
  pCSD->CSD_CRC   = (tmp & 0xFEU) >> 1U;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	085b      	lsrs	r3, r3, #1
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b62:	b2da      	uxtb	r2, r3
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  pCSD->Reserved4 = 1U;
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  return HAL_OK;
 8003b72:	2300      	movs	r3, #0
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3710      	adds	r7, #16
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bc90      	pop	{r4, r7}
 8003b7c:	4770      	bx	lr

08003b7e <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8003b7e:	b5b0      	push	{r4, r5, r7, lr}
 8003b80:	b08e      	sub	sp, #56	; 0x38
 8003b82:	af04      	add	r7, sp, #16
 8003b84:	6078      	str	r0, [r7, #4]
 8003b86:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));
  
  /* Chnage Satte */
  hsd->State = HAL_SD_STATE_BUSY;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2203      	movs	r2, #3
 8003b90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b98:	2b03      	cmp	r3, #3
 8003b9a:	d02e      	beq.n	8003bfa <HAL_SD_ConfigWideBusOperation+0x7c>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ba2:	d106      	bne.n	8003bb2 <HAL_SD_ConfigWideBusOperation+0x34>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ba8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	639a      	str	r2, [r3, #56]	; 0x38
 8003bb0:	e029      	b.n	8003c06 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bb8:	d10a      	bne.n	8003bd0 <HAL_SD_ConfigWideBusOperation+0x52>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f000 fa97 	bl	80040ee <SD_WideBus_Enable>
 8003bc0:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc8:	431a      	orrs	r2, r3
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	639a      	str	r2, [r3, #56]	; 0x38
 8003bce:	e01a      	b.n	8003c06 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d10a      	bne.n	8003bec <HAL_SD_ConfigWideBusOperation+0x6e>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f000 fad6 	bl	8004188 <SD_WideBus_Disable>
 8003bdc:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be4:	431a      	orrs	r2, r3
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	639a      	str	r2, [r3, #56]	; 0x38
 8003bea:	e00c      	b.n	8003c06 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bf0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	639a      	str	r2, [r3, #56]	; 0x38
 8003bf8:	e005      	b.n	8003c06 <HAL_SD_ConfigWideBusOperation+0x88>
    }
  }  
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bfe:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d00a      	beq.n	8003c24 <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003c16:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	e024      	b.n	8003c6e <HAL_SD_ConfigWideBusOperation+0xf0>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	695b      	ldr	r3, [r3, #20]
 8003c3e:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	699b      	ldr	r3, [r3, #24]
 8003c44:	623b      	str	r3, [r7, #32]
    SDIO_Init(hsd->Instance, Init);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681d      	ldr	r5, [r3, #0]
 8003c4a:	466c      	mov	r4, sp
 8003c4c:	f107 0318 	add.w	r3, r7, #24
 8003c50:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003c54:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003c58:	f107 030c 	add.w	r3, r7, #12
 8003c5c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c5e:	4628      	mov	r0, r5
 8003c60:	f001 fda6 	bl	80057b0 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return HAL_OK;
 8003c6c:	2300      	movs	r3, #0
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3728      	adds	r7, #40	; 0x28
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bdb0      	pop	{r4, r5, r7, pc}

08003c76 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8003c76:	b580      	push	{r7, lr}
 8003c78:	b086      	sub	sp, #24
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStateTypeDef cardstate =  HAL_SD_CARD_TRANSFER;
 8003c7e:	2304      	movs	r3, #4
 8003c80:	75fb      	strb	r3, [r7, #23]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8003c82:	2300      	movs	r3, #0
 8003c84:	613b      	str	r3, [r7, #16]
  uint32_t resp1 = 0;
 8003c86:	2300      	movs	r3, #0
 8003c88:	60fb      	str	r3, [r7, #12]
  
  errorstate = SD_SendStatus(hsd, &resp1);
 8003c8a:	f107 030c 	add.w	r3, r7, #12
 8003c8e:	4619      	mov	r1, r3
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f000 fa02 	bl	800409a <SD_SendStatus>
 8003c96:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_OK)
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d005      	beq.n	8003caa <HAL_SD_GetCardState+0x34>
  {
    hsd->ErrorCode |= errorstate;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	431a      	orrs	r2, r3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = (HAL_SD_CardStateTypeDef)((resp1 >> 9U) & 0x0FU);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	0a5b      	lsrs	r3, r3, #9
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	f003 030f 	and.w	r3, r3, #15
 8003cb4:	75fb      	strb	r3, [r7, #23]
  
  return cardstate;
 8003cb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3718      	adds	r7, #24
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}

08003cc0 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)   
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b084      	sub	sp, #16
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ccc:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  if(hsd->hdmatx != NULL)
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d002      	beq.n	8003cdc <SD_DMATxAbort+0x1c>
  {
    hsd->hdmatx = NULL;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	641a      	str	r2, [r3, #64]	; 0x40
  }
  
  /* All DMA channels are aborted */
  if(hsd->hdmarx == NULL)
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d127      	bne.n	8003d34 <SD_DMATxAbort+0x74>
  {
    CardState = HAL_SD_GetCardState(hsd);
 8003ce4:	68f8      	ldr	r0, [r7, #12]
 8003ce6:	f7ff ffc6 	bl	8003c76 <HAL_SD_GetCardState>
 8003cea:	4603      	mov	r3, r0
 8003cec:	72fb      	strb	r3, [r7, #11]
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003cfc:	7afb      	ldrb	r3, [r7, #11]
 8003cfe:	2b06      	cmp	r3, #6
 8003d00:	d002      	beq.n	8003d08 <SD_DMATxAbort+0x48>
 8003d02:	7afb      	ldrb	r3, [r7, #11]
 8003d04:	2b05      	cmp	r3, #5
 8003d06:	d115      	bne.n	8003d34 <SD_DMATxAbort+0x74>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f001 fe51 	bl	80059b4 <SDMMC_CmdStopTransfer>
 8003d12:	4602      	mov	r2, r0
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d18:	431a      	orrs	r2, r3
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	639a      	str	r2, [r3, #56]	; 0x38
      
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d003      	beq.n	8003d2e <SD_DMATxAbort+0x6e>
      {
        HAL_SD_AbortCallback(hsd);
 8003d26:	68f8      	ldr	r0, [r7, #12]
 8003d28:	f7ff fcf4 	bl	8003714 <HAL_SD_AbortCallback>
      {
        HAL_SD_ErrorCallback(hsd);
      }
    }
  }
}
 8003d2c:	e002      	b.n	8003d34 <SD_DMATxAbort+0x74>
        HAL_SD_ErrorCallback(hsd);
 8003d2e:	68f8      	ldr	r0, [r7, #12]
 8003d30:	f7ff fce6 	bl	8003700 <HAL_SD_ErrorCallback>
}
 8003d34:	bf00      	nop
 8003d36:	3710      	adds	r7, #16
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}

08003d3c <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)   
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b084      	sub	sp, #16
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d48:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  if(hsd->hdmarx != NULL)
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d002      	beq.n	8003d58 <SD_DMARxAbort+0x1c>
  {
    hsd->hdmarx = NULL;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2200      	movs	r2, #0
 8003d56:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* All DMA channels are aborted */
  if(hsd->hdmatx == NULL)
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d127      	bne.n	8003db0 <SD_DMARxAbort+0x74>
  {
    CardState = HAL_SD_GetCardState(hsd);
 8003d60:	68f8      	ldr	r0, [r7, #12]
 8003d62:	f7ff ff88 	bl	8003c76 <HAL_SD_GetCardState>
 8003d66:	4603      	mov	r3, r0
 8003d68:	72fb      	strb	r3, [r7, #11]
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003d78:	7afb      	ldrb	r3, [r7, #11]
 8003d7a:	2b06      	cmp	r3, #6
 8003d7c:	d002      	beq.n	8003d84 <SD_DMARxAbort+0x48>
 8003d7e:	7afb      	ldrb	r3, [r7, #11]
 8003d80:	2b05      	cmp	r3, #5
 8003d82:	d115      	bne.n	8003db0 <SD_DMARxAbort+0x74>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f001 fe13 	bl	80059b4 <SDMMC_CmdStopTransfer>
 8003d8e:	4602      	mov	r2, r0
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d94:	431a      	orrs	r2, r3
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	639a      	str	r2, [r3, #56]	; 0x38
      
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d003      	beq.n	8003daa <SD_DMARxAbort+0x6e>
      {
        HAL_SD_AbortCallback(hsd);
 8003da2:	68f8      	ldr	r0, [r7, #12]
 8003da4:	f7ff fcb6 	bl	8003714 <HAL_SD_AbortCallback>
      {
        HAL_SD_ErrorCallback(hsd);
      }
    }
  }
}
 8003da8:	e002      	b.n	8003db0 <SD_DMARxAbort+0x74>
        HAL_SD_ErrorCallback(hsd);
 8003daa:	68f8      	ldr	r0, [r7, #12]
 8003dac:	f7ff fca8 	bl	8003700 <HAL_SD_ErrorCallback>
}
 8003db0:	bf00      	nop
 8003db2:	3710      	adds	r7, #16
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}

08003db8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003db8:	b5b0      	push	{r4, r5, r7, lr}
 8003dba:	b094      	sub	sp, #80	; 0x50
 8003dbc:	af04      	add	r7, sp, #16
 8003dbe:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t sd_rca = 1U;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	81fb      	strh	r3, [r7, #14]
  
  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U) 
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f001 fd46 	bl	800585e <SDIO_GetPowerState>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d102      	bne.n	8003dde <SD_InitCard+0x26>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003dd8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003ddc:	e0b1      	b.n	8003f42 <SD_InitCard+0x18a>
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003de2:	2b03      	cmp	r3, #3
 8003de4:	d02f      	beq.n	8003e46 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4618      	mov	r0, r3
 8003dec:	f001 fefc 	bl	8005be8 <SDMMC_CmdSendCID>
 8003df0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003df2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d001      	beq.n	8003dfc <SD_InitCard+0x44>
    {
      return errorstate;
 8003df8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dfa:	e0a2      	b.n	8003f42 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	2100      	movs	r1, #0
 8003e02:	4618      	mov	r0, r3
 8003e04:	f001 fd70 	bl	80058e8 <SDIO_GetResponse>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	2104      	movs	r1, #4
 8003e14:	4618      	mov	r0, r3
 8003e16:	f001 fd67 	bl	80058e8 <SDIO_GetResponse>
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	2108      	movs	r1, #8
 8003e26:	4618      	mov	r0, r3
 8003e28:	f001 fd5e 	bl	80058e8 <SDIO_GetResponse>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	210c      	movs	r1, #12
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f001 fd55 	bl	80058e8 <SDIO_GetResponse>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e4a:	2b03      	cmp	r3, #3
 8003e4c:	d00d      	beq.n	8003e6a <SD_InitCard+0xb2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f107 020e 	add.w	r2, r7, #14
 8003e56:	4611      	mov	r1, r2
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f001 ff06 	bl	8005c6a <SDMMC_CmdSetRelAdd>
 8003e5e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003e60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d001      	beq.n	8003e6a <SD_InitCard+0xb2>
    {
      return errorstate;
 8003e66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e68:	e06b      	b.n	8003f42 <SD_InitCard+0x18a>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e6e:	2b03      	cmp	r3, #3
 8003e70:	d036      	beq.n	8003ee0 <SD_InitCard+0x128>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8003e72:	89fb      	ldrh	r3, [r7, #14]
 8003e74:	461a      	mov	r2, r3
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e82:	041b      	lsls	r3, r3, #16
 8003e84:	4619      	mov	r1, r3
 8003e86:	4610      	mov	r0, r2
 8003e88:	f001 fece 	bl	8005c28 <SDMMC_CmdSendCSD>
 8003e8c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003e8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d001      	beq.n	8003e98 <SD_InitCard+0xe0>
    {
      return errorstate;
 8003e94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e96:	e054      	b.n	8003f42 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	2100      	movs	r1, #0
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f001 fd22 	bl	80058e8 <SDIO_GetResponse>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	2104      	movs	r1, #4
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f001 fd19 	bl	80058e8 <SDIO_GetResponse>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	2108      	movs	r1, #8
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f001 fd10 	bl	80058e8 <SDIO_GetResponse>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	210c      	movs	r1, #12
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f001 fd07 	bl	80058e8 <SDIO_GetResponse>
 8003eda:	4602      	mov	r2, r0
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }
  
  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	2104      	movs	r1, #4
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f001 fcfe 	bl	80058e8 <SDIO_GetResponse>
 8003eec:	4603      	mov	r3, r0
 8003eee:	0d1a      	lsrs	r2, r3, #20
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Get CSD parameters */
  HAL_SD_GetCardCSD(hsd, &CSD);
 8003ef4:	f107 0310 	add.w	r3, r7, #16
 8003ef8:	4619      	mov	r1, r3
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f7ff fc14 	bl	8003728 <HAL_SD_GetCardCSD>

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6819      	ldr	r1, [r3, #0]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f08:	041b      	lsls	r3, r3, #16
 8003f0a:	f04f 0400 	mov.w	r4, #0
 8003f0e:	461a      	mov	r2, r3
 8003f10:	4623      	mov	r3, r4
 8003f12:	4608      	mov	r0, r1
 8003f14:	f001 fd72 	bl	80059fc <SDMMC_CmdSelDesel>
 8003f18:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8003f1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d001      	beq.n	8003f24 <SD_InitCard+0x16c>
  {
    return errorstate;
 8003f20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f22:	e00e      	b.n	8003f42 <SD_InitCard+0x18a>
  }

  /* Configure SDIO peripheral interface */     
  SDIO_Init(hsd->Instance, hsd->Init);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681d      	ldr	r5, [r3, #0]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	466c      	mov	r4, sp
 8003f2c:	f103 0210 	add.w	r2, r3, #16
 8003f30:	ca07      	ldmia	r2, {r0, r1, r2}
 8003f32:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003f36:	3304      	adds	r3, #4
 8003f38:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f3a:	4628      	mov	r0, r5
 8003f3c:	f001 fc38 	bl	80057b0 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8003f40:	2300      	movs	r3, #0
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3740      	adds	r7, #64	; 0x40
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bdb0      	pop	{r4, r5, r7, pc}

08003f4a <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8003f4a:	b580      	push	{r7, lr}
 8003f4c:	b086      	sub	sp, #24
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003f52:	2300      	movs	r3, #0
 8003f54:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8003f56:	2300      	movs	r3, #0
 8003f58:	617b      	str	r3, [r7, #20]
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	60fb      	str	r3, [r7, #12]
  
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4618      	mov	r0, r3
 8003f68:	f001 fd6d 	bl	8005a46 <SDMMC_CmdGoIdleState>
 8003f6c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d001      	beq.n	8003f78 <SD_PowerON+0x2e>
  {
    return errorstate;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	e08c      	b.n	8004092 <SD_PowerON+0x148>
  }
  
  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f001 fd82 	bl	8005a86 <SDMMC_CmdOperCond>
 8003f82:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d03d      	beq.n	8004006 <SD_PowerON+0xbc>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	649a      	str	r2, [r3, #72]	; 0x48
      
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0U)
 8003f90:	e032      	b.n	8003ff8 <SD_PowerON+0xae>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	1c5a      	adds	r2, r3, #1
 8003f96:	60ba      	str	r2, [r7, #8]
 8003f98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d102      	bne.n	8003fa6 <SD_PowerON+0x5c>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8003fa0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003fa4:	e075      	b.n	8004092 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	2100      	movs	r1, #0
 8003fac:	4618      	mov	r0, r3
 8003fae:	f001 fd8b 	bl	8005ac8 <SDMMC_CmdAppCommand>
 8003fb2:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d002      	beq.n	8003fc0 <SD_PowerON+0x76>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003fba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003fbe:	e068      	b.n	8004092 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	2100      	movs	r1, #0
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f001 fda2 	bl	8005b10 <SDMMC_CmdAppOperCommand>
 8003fcc:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d002      	beq.n	8003fda <SD_PowerON+0x90>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003fd4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003fd8:	e05b      	b.n	8004092 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	2100      	movs	r1, #0
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f001 fc81 	bl	80058e8 <SDIO_GetResponse>
 8003fe6:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	0fdb      	lsrs	r3, r3, #31
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d101      	bne.n	8003ff4 <SD_PowerON+0xaa>
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e000      	b.n	8003ff6 <SD_PowerON+0xac>
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0U)
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d0c9      	beq.n	8003f92 <SD_PowerON+0x48>
    }
    /* Card type is SDSC */
    hsd->SdCard.CardType = CARD_SDSC;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	645a      	str	r2, [r3, #68]	; 0x44
 8004004:	e044      	b.n	8004090 <SD_PowerON+0x146>
  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2201      	movs	r2, #1
 800400a:	649a      	str	r2, [r3, #72]	; 0x48
        
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0U)
 800400c:	e031      	b.n	8004072 <SD_PowerON+0x128>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	1c5a      	adds	r2, r3, #1
 8004012:	60ba      	str	r2, [r7, #8]
 8004014:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004018:	4293      	cmp	r3, r2
 800401a:	d102      	bne.n	8004022 <SD_PowerON+0xd8>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800401c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004020:	e037      	b.n	8004092 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	2100      	movs	r1, #0
 8004028:	4618      	mov	r0, r3
 800402a:	f001 fd4d 	bl	8005ac8 <SDMMC_CmdAppCommand>
 800402e:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d001      	beq.n	800403a <SD_PowerON+0xf0>
      {
        return errorstate;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	e02b      	b.n	8004092 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004042:	4618      	mov	r0, r3
 8004044:	f001 fd64 	bl	8005b10 <SDMMC_CmdAppOperCommand>
 8004048:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d001      	beq.n	8004054 <SD_PowerON+0x10a>
      {
        return errorstate;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	e01e      	b.n	8004092 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	2100      	movs	r1, #0
 800405a:	4618      	mov	r0, r3
 800405c:	f001 fc44 	bl	80058e8 <SDIO_GetResponse>
 8004060:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	0fdb      	lsrs	r3, r3, #31
 8004066:	2b01      	cmp	r3, #1
 8004068:	d101      	bne.n	800406e <SD_PowerON+0x124>
 800406a:	2301      	movs	r3, #1
 800406c:	e000      	b.n	8004070 <SD_PowerON+0x126>
 800406e:	2300      	movs	r3, #0
 8004070:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0U)
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d0ca      	beq.n	800400e <SD_PowerON+0xc4>
    }
    
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800407e:	2b00      	cmp	r3, #0
 8004080:	d003      	beq.n	800408a <SD_PowerON+0x140>
    {
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2201      	movs	r2, #1
 8004086:	645a      	str	r2, [r3, #68]	; 0x44
 8004088:	e002      	b.n	8004090 <SD_PowerON+0x146>
    }
    else
    {
      hsd->SdCard.CardType = CARD_SDSC;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2200      	movs	r2, #0
 800408e:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }
  
  return HAL_SD_ERROR_NONE;
 8004090:	2300      	movs	r3, #0
}
 8004092:	4618      	mov	r0, r3
 8004094:	3718      	adds	r7, #24
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}

0800409a <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card 
  *         status (Card Status register)  
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800409a:	b580      	push	{r7, lr}
 800409c:	b084      	sub	sp, #16
 800409e:	af00      	add	r7, sp, #0
 80040a0:	6078      	str	r0, [r7, #4]
 80040a2:	6039      	str	r1, [r7, #0]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80040a4:	2300      	movs	r3, #0
 80040a6:	60fb      	str	r3, [r7, #12]
  
  if(pCardStatus == NULL)
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d102      	bne.n	80040b4 <SD_SendStatus+0x1a>
  {
    return HAL_SD_ERROR_PARAM;
 80040ae:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80040b2:	e018      	b.n	80040e6 <SD_SendStatus+0x4c>
  }
  
  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040bc:	041b      	lsls	r3, r3, #16
 80040be:	4619      	mov	r1, r3
 80040c0:	4610      	mov	r0, r2
 80040c2:	f001 fdf5 	bl	8005cb0 <SDMMC_CmdSendStatus>
 80040c6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_OK)
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d001      	beq.n	80040d2 <SD_SendStatus+0x38>
  {
    return errorstate;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	e009      	b.n	80040e6 <SD_SendStatus+0x4c>
  }
  
  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	2100      	movs	r1, #0
 80040d8:	4618      	mov	r0, r3
 80040da:	f001 fc05 	bl	80058e8 <SDIO_GetResponse>
 80040de:	4602      	mov	r2, r0
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	601a      	str	r2, [r3, #0]
  
  return HAL_SD_ERROR_NONE;
 80040e4:	2300      	movs	r3, #0
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3710      	adds	r7, #16
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}

080040ee <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80040ee:	b580      	push	{r7, lr}
 80040f0:	b086      	sub	sp, #24
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80040f6:	2300      	movs	r3, #0
 80040f8:	60fb      	str	r3, [r7, #12]
 80040fa:	2300      	movs	r3, #0
 80040fc:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80040fe:	2300      	movs	r3, #0
 8004100:	617b      	str	r3, [r7, #20]
  
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	2100      	movs	r1, #0
 8004108:	4618      	mov	r0, r3
 800410a:	f001 fbed 	bl	80058e8 <SDIO_GetResponse>
 800410e:	4603      	mov	r3, r0
 8004110:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004114:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004118:	d102      	bne.n	8004120 <SD_WideBus_Enable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800411a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800411e:	e02f      	b.n	8004180 <SD_WideBus_Enable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004120:	f107 030c 	add.w	r3, r7, #12
 8004124:	4619      	mov	r1, r3
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f000 f87b 	bl	8004222 <SD_FindSCR>
 800412c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d001      	beq.n	8004138 <SD_WideBus_Enable+0x4a>
  {
    return errorstate;
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	e023      	b.n	8004180 <SD_WideBus_Enable+0x92>
  }
  
  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d01c      	beq.n	800417c <SD_WideBus_Enable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800414a:	041b      	lsls	r3, r3, #16
 800414c:	4619      	mov	r1, r3
 800414e:	4610      	mov	r0, r2
 8004150:	f001 fcba 	bl	8005ac8 <SDMMC_CmdAppCommand>
 8004154:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d001      	beq.n	8004160 <SD_WideBus_Enable+0x72>
    {
      return errorstate;
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	e00f      	b.n	8004180 <SD_WideBus_Enable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2102      	movs	r1, #2
 8004166:	4618      	mov	r0, r3
 8004168:	f001 fcf7 	bl	8005b5a <SDMMC_CmdBusWidth>
 800416c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d001      	beq.n	8004178 <SD_WideBus_Enable+0x8a>
    {
      return errorstate;
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	e003      	b.n	8004180 <SD_WideBus_Enable+0x92>
    }

    return HAL_SD_ERROR_NONE;
 8004178:	2300      	movs	r3, #0
 800417a:	e001      	b.n	8004180 <SD_WideBus_Enable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800417c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004180:	4618      	mov	r0, r3
 8004182:	3718      	adds	r7, #24
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}

08004188 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b086      	sub	sp, #24
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004190:	2300      	movs	r3, #0
 8004192:	60fb      	str	r3, [r7, #12]
 8004194:	2300      	movs	r3, #0
 8004196:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8004198:	2300      	movs	r3, #0
 800419a:	617b      	str	r3, [r7, #20]
  
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	2100      	movs	r1, #0
 80041a2:	4618      	mov	r0, r3
 80041a4:	f001 fba0 	bl	80058e8 <SDIO_GetResponse>
 80041a8:	4603      	mov	r3, r0
 80041aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80041b2:	d102      	bne.n	80041ba <SD_WideBus_Disable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80041b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80041b8:	e02f      	b.n	800421a <SD_WideBus_Disable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80041ba:	f107 030c 	add.w	r3, r7, #12
 80041be:	4619      	mov	r1, r3
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	f000 f82e 	bl	8004222 <SD_FindSCR>
 80041c6:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d001      	beq.n	80041d2 <SD_WideBus_Disable+0x4a>
  {
    return errorstate;
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	e023      	b.n	800421a <SD_WideBus_Disable+0x92>
  }
  
  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d01c      	beq.n	8004216 <SD_WideBus_Disable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041e4:	041b      	lsls	r3, r3, #16
 80041e6:	4619      	mov	r1, r3
 80041e8:	4610      	mov	r0, r2
 80041ea:	f001 fc6d 	bl	8005ac8 <SDMMC_CmdAppCommand>
 80041ee:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d001      	beq.n	80041fa <SD_WideBus_Disable+0x72>
    {
      return errorstate;
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	e00f      	b.n	800421a <SD_WideBus_Disable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	2100      	movs	r1, #0
 8004200:	4618      	mov	r0, r3
 8004202:	f001 fcaa 	bl	8005b5a <SDMMC_CmdBusWidth>
 8004206:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d001      	beq.n	8004212 <SD_WideBus_Disable+0x8a>
    {
      return errorstate;
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	e003      	b.n	800421a <SD_WideBus_Disable+0x92>
    }
    
    return HAL_SD_ERROR_NONE;
 8004212:	2300      	movs	r3, #0
 8004214:	e001      	b.n	800421a <SD_WideBus_Disable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004216:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800421a:	4618      	mov	r0, r3
 800421c:	3718      	adds	r7, #24
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}

08004222 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8004222:	b590      	push	{r4, r7, lr}
 8004224:	b08f      	sub	sp, #60	; 0x3c
 8004226:	af00      	add	r7, sp, #0
 8004228:	6078      	str	r0, [r7, #4]
 800422a:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800422c:	2300      	movs	r3, #0
 800422e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8004230:	f7fc fa2c 	bl	800068c <HAL_GetTick>
 8004234:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t index = 0U;
 8004236:	2300      	movs	r3, #0
 8004238:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800423a:	2300      	movs	r3, #0
 800423c:	60fb      	str	r3, [r7, #12]
 800423e:	2300      	movs	r3, #0
 8004240:	613b      	str	r3, [r7, #16]
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	2108      	movs	r1, #8
 8004248:	4618      	mov	r0, r3
 800424a:	f001 fb8e 	bl	800596a <SDMMC_CmdBlockLength>
 800424e:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8004250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004252:	2b00      	cmp	r3, #0
 8004254:	d001      	beq.n	800425a <SD_FindSCR+0x38>
  {
    return errorstate;
 8004256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004258:	e0a7      	b.n	80043aa <SD_FindSCR+0x188>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004262:	041b      	lsls	r3, r3, #16
 8004264:	4619      	mov	r1, r3
 8004266:	4610      	mov	r0, r2
 8004268:	f001 fc2e 	bl	8005ac8 <SDMMC_CmdAppCommand>
 800426c:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 800426e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004270:	2b00      	cmp	r3, #0
 8004272:	d001      	beq.n	8004278 <SD_FindSCR+0x56>
  {
    return errorstate;
 8004274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004276:	e098      	b.n	80043aa <SD_FindSCR+0x188>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004278:	f04f 33ff 	mov.w	r3, #4294967295
 800427c:	617b      	str	r3, [r7, #20]
  config.DataLength    = 8U;
 800427e:	2308      	movs	r3, #8
 8004280:	61bb      	str	r3, [r7, #24]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8004282:	2330      	movs	r3, #48	; 0x30
 8004284:	61fb      	str	r3, [r7, #28]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004286:	2302      	movs	r3, #2
 8004288:	623b      	str	r3, [r7, #32]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800428a:	2300      	movs	r3, #0
 800428c:	627b      	str	r3, [r7, #36]	; 0x24
  config.DPSM          = SDIO_DPSM_ENABLE;
 800428e:	2301      	movs	r3, #1
 8004290:	62bb      	str	r3, [r7, #40]	; 0x28
  SDIO_ConfigData(hsd->Instance, &config);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f107 0214 	add.w	r2, r7, #20
 800429a:	4611      	mov	r1, r2
 800429c:	4618      	mov	r0, r3
 800429e:	f001 fb38 	bl	8005912 <SDIO_ConfigData>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4618      	mov	r0, r3
 80042a8:	f001 fc7b 	bl	8005ba2 <SDMMC_CmdSendSCR>
 80042ac:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 80042ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d022      	beq.n	80042fa <SD_FindSCR+0xd8>
  {
    return errorstate;
 80042b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042b6:	e078      	b.n	80043aa <SD_FindSCR+0x188>
  }
  
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d00e      	beq.n	80042e4 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80042c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042c8:	009b      	lsls	r3, r3, #2
 80042ca:	f107 020c 	add.w	r2, r7, #12
 80042ce:	18d4      	adds	r4, r2, r3
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4618      	mov	r0, r3
 80042d6:	f001 fa96 	bl	8005806 <SDIO_ReadFIFO>
 80042da:	4603      	mov	r3, r0
 80042dc:	6023      	str	r3, [r4, #0]
      index++;
 80042de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042e0:	3301      	adds	r3, #1
 80042e2:	637b      	str	r3, [r7, #52]	; 0x34
    }
    
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80042e4:	f7fc f9d2 	bl	800068c <HAL_GetTick>
 80042e8:	4602      	mov	r2, r0
 80042ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042f2:	d102      	bne.n	80042fa <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80042f4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80042f8:	e057      	b.n	80043aa <SD_FindSCR+0x188>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004300:	f240 432a 	movw	r3, #1066	; 0x42a
 8004304:	4013      	ands	r3, r2
 8004306:	2b00      	cmp	r3, #0
 8004308:	d0d6      	beq.n	80042b8 <SD_FindSCR+0x96>
    }
  }
  
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004310:	f003 0308 	and.w	r3, r3, #8
 8004314:	2b00      	cmp	r3, #0
 8004316:	d005      	beq.n	8004324 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	2208      	movs	r2, #8
 800431e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8004320:	2308      	movs	r3, #8
 8004322:	e042      	b.n	80043aa <SD_FindSCR+0x188>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800432a:	f003 0302 	and.w	r3, r3, #2
 800432e:	2b00      	cmp	r3, #0
 8004330:	d005      	beq.n	800433e <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	2202      	movs	r2, #2
 8004338:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800433a:	2302      	movs	r3, #2
 800433c:	e035      	b.n	80043aa <SD_FindSCR+0x188>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004344:	f003 0320 	and.w	r3, r3, #32
 8004348:	2b00      	cmp	r3, #0
 800434a:	d005      	beq.n	8004358 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	2220      	movs	r2, #32
 8004352:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_RX_OVERRUN;
 8004354:	2320      	movs	r3, #32
 8004356:	e028      	b.n	80043aa <SD_FindSCR+0x188>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004360:	639a      	str	r2, [r3, #56]	; 0x38
    
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	3304      	adds	r3, #4
 8004366:	68fa      	ldr	r2, [r7, #12]
 8004368:	0611      	lsls	r1, r2, #24
 800436a:	68fa      	ldr	r2, [r7, #12]
 800436c:	0212      	lsls	r2, r2, #8
 800436e:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 8004372:	4311      	orrs	r1, r2
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 8004374:	68fa      	ldr	r2, [r7, #12]
 8004376:	0a12      	lsrs	r2, r2, #8
 8004378:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 800437c:	4311      	orrs	r1, r2
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 800437e:	68fa      	ldr	r2, [r7, #12]
 8004380:	0e12      	lsrs	r2, r2, #24
 8004382:	430a      	orrs	r2, r1
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 8004384:	601a      	str	r2, [r3, #0]
    
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	061a      	lsls	r2, r3, #24
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	021b      	lsls	r3, r3, #8
 800438e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004392:	431a      	orrs	r2, r3
      ((tempscr[1U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1U] & SDMMC_24TO31BITS) >> 24U);
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	0a1b      	lsrs	r3, r3, #8
 8004398:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 800439c:	431a      	orrs	r2, r3
      ((tempscr[1U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1U] & SDMMC_24TO31BITS) >> 24U);
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	0e1b      	lsrs	r3, r3, #24
 80043a2:	431a      	orrs	r2, r3
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	601a      	str	r2, [r3, #0]
  }

  return HAL_SD_ERROR_NONE;
 80043a8:	2300      	movs	r3, #0
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	373c      	adds	r7, #60	; 0x3c
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd90      	pop	{r4, r7, pc}

080043b2 <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval HAL status
  */
static HAL_StatusTypeDef SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80043b2:	b590      	push	{r4, r7, lr}
 80043b4:	b085      	sub	sp, #20
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80043ba:	2300      	movs	r3, #0
 80043bc:	60fb      	str	r3, [r7, #12]
  uint32_t* tmp;

  tmp = (uint32_t*)hsd->pRxBuffPtr;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043c2:	60bb      	str	r3, [r7, #8]
  
  /* Read data from SDIO Rx FIFO */
  for(count = 0U; count < 8U; count++)
 80043c4:	2300      	movs	r3, #0
 80043c6:	60fb      	str	r3, [r7, #12]
 80043c8:	e00d      	b.n	80043e6 <SD_Read_IT+0x34>
  {
    *(tmp + count) = SDIO_ReadFIFO(hsd->Instance);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	68ba      	ldr	r2, [r7, #8]
 80043d0:	18d4      	adds	r4, r2, r3
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4618      	mov	r0, r3
 80043d8:	f001 fa15 	bl	8005806 <SDIO_ReadFIFO>
 80043dc:	4603      	mov	r3, r0
 80043de:	6023      	str	r3, [r4, #0]
  for(count = 0U; count < 8U; count++)
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	3301      	adds	r3, #1
 80043e4:	60fb      	str	r3, [r7, #12]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2b07      	cmp	r3, #7
 80043ea:	d9ee      	bls.n	80043ca <SD_Read_IT+0x18>
  }
  
  hsd->pRxBuffPtr += 8U;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043f0:	f103 0220 	add.w	r2, r3, #32
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	629a      	str	r2, [r3, #40]	; 0x28
  
  return HAL_OK;
 80043f8:	2300      	movs	r3, #0
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3714      	adds	r7, #20
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd90      	pop	{r4, r7, pc}

08004402 <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval HAL status
  */
static HAL_StatusTypeDef SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8004402:	b580      	push	{r7, lr}
 8004404:	b084      	sub	sp, #16
 8004406:	af00      	add	r7, sp, #0
 8004408:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800440a:	2300      	movs	r3, #0
 800440c:	60fb      	str	r3, [r7, #12]
  uint32_t* tmp;
  
  tmp = (uint32_t*)hsd->pTxBuffPtr;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a1b      	ldr	r3, [r3, #32]
 8004412:	60bb      	str	r3, [r7, #8]
  
  /* Write data to SDIO Tx FIFO */
  for(count = 0U; count < 8U; count++)
 8004414:	2300      	movs	r3, #0
 8004416:	60fb      	str	r3, [r7, #12]
 8004418:	e00b      	b.n	8004432 <SD_Write_IT+0x30>
  {
    SDIO_WriteFIFO(hsd->Instance, (tmp + count));
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6818      	ldr	r0, [r3, #0]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	68ba      	ldr	r2, [r7, #8]
 8004424:	4413      	add	r3, r2
 8004426:	4619      	mov	r1, r3
 8004428:	f001 f9fa 	bl	8005820 <SDIO_WriteFIFO>
  for(count = 0U; count < 8U; count++)
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	3301      	adds	r3, #1
 8004430:	60fb      	str	r3, [r7, #12]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2b07      	cmp	r3, #7
 8004436:	d9f0      	bls.n	800441a <SD_Write_IT+0x18>
  }
  
  hsd->pTxBuffPtr += 8U;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6a1b      	ldr	r3, [r3, #32]
 800443c:	f103 0220 	add.w	r2, r3, #32
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	621a      	str	r2, [r3, #32]
  
  return HAL_OK;
 8004444:	2300      	movs	r3, #0
}
 8004446:	4618      	mov	r0, r3
 8004448:	3710      	adds	r7, #16
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}

0800444e <HAL_TIM_Base_Init>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 800444e:	b580      	push	{r7, lr}
 8004450:	b082      	sub	sp, #8
 8004452:	af00      	add	r7, sp, #0
 8004454:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d101      	bne.n	8004460 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	e01d      	b.n	800449c <HAL_TIM_Base_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004466:	b2db      	uxtb	r3, r3
 8004468:	2b00      	cmp	r3, #0
 800446a:	d106      	bne.n	800447a <HAL_TIM_Base_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	f002 ff23 	bl	80072c0 <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2202      	movs	r2, #2
 800447e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	3304      	adds	r3, #4
 800448a:	4619      	mov	r1, r3
 800448c:	4610      	mov	r0, r2
 800448e:	f000 fa39 	bl	8004904 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2201      	movs	r2, #1
 8004496:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 800449a:	2300      	movs	r3, #0
}
 800449c:	4618      	mov	r0, r3
 800449e:	3708      	adds	r7, #8
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}

080044a4 <HAL_TIM_Base_Start_IT>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b083      	sub	sp, #12
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	6812      	ldr	r2, [r2, #0]
 80044b4:	68d2      	ldr	r2, [r2, #12]
 80044b6:	f042 0201 	orr.w	r2, r2, #1
 80044ba:	60da      	str	r2, [r3, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	6812      	ldr	r2, [r2, #0]
 80044c4:	6812      	ldr	r2, [r2, #0]
 80044c6:	f042 0201 	orr.w	r2, r2, #1
 80044ca:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
 80044cc:	2300      	movs	r3, #0
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	370c      	adds	r7, #12
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr

080044da <HAL_TIM_IRQHandler>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80044da:	b580      	push	{r7, lr}
 80044dc:	b082      	sub	sp, #8
 80044de:	af00      	add	r7, sp, #0
 80044e0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	691b      	ldr	r3, [r3, #16]
 80044e8:	f003 0302 	and.w	r3, r3, #2
 80044ec:	2b02      	cmp	r3, #2
 80044ee:	d122      	bne.n	8004536 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	f003 0302 	and.w	r3, r3, #2
 80044fa:	2b02      	cmp	r3, #2
 80044fc:	d11b      	bne.n	8004536 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f06f 0202 	mvn.w	r2, #2
 8004506:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	761a      	strb	r2, [r3, #24]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	699b      	ldr	r3, [r3, #24]
 8004514:	f003 0303 	and.w	r3, r3, #3
 8004518:	2b00      	cmp	r3, #0
 800451a:	d003      	beq.n	8004524 <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f000 f9d3 	bl	80048c8 <HAL_TIM_IC_CaptureCallback>
 8004522:	e005      	b.n	8004530 <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f000 f9c5 	bl	80048b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f000 f9d6 	bl	80048dc <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2200      	movs	r2, #0
 8004534:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	691b      	ldr	r3, [r3, #16]
 800453c:	f003 0304 	and.w	r3, r3, #4
 8004540:	2b04      	cmp	r3, #4
 8004542:	d122      	bne.n	800458a <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	f003 0304 	and.w	r3, r3, #4
 800454e:	2b04      	cmp	r3, #4
 8004550:	d11b      	bne.n	800458a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f06f 0204 	mvn.w	r2, #4
 800455a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2202      	movs	r2, #2
 8004560:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	699b      	ldr	r3, [r3, #24]
 8004568:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800456c:	2b00      	cmp	r3, #0
 800456e:	d003      	beq.n	8004578 <HAL_TIM_IRQHandler+0x9e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f000 f9a9 	bl	80048c8 <HAL_TIM_IC_CaptureCallback>
 8004576:	e005      	b.n	8004584 <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f000 f99b 	bl	80048b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f000 f9ac 	bl	80048dc <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2200      	movs	r2, #0
 8004588:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	691b      	ldr	r3, [r3, #16]
 8004590:	f003 0308 	and.w	r3, r3, #8
 8004594:	2b08      	cmp	r3, #8
 8004596:	d122      	bne.n	80045de <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	68db      	ldr	r3, [r3, #12]
 800459e:	f003 0308 	and.w	r3, r3, #8
 80045a2:	2b08      	cmp	r3, #8
 80045a4:	d11b      	bne.n	80045de <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f06f 0208 	mvn.w	r2, #8
 80045ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2204      	movs	r2, #4
 80045b4:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	69db      	ldr	r3, [r3, #28]
 80045bc:	f003 0303 	and.w	r3, r3, #3
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d003      	beq.n	80045cc <HAL_TIM_IRQHandler+0xf2>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f000 f97f 	bl	80048c8 <HAL_TIM_IC_CaptureCallback>
 80045ca:	e005      	b.n	80045d8 <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f000 f971 	bl	80048b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f000 f982 	bl	80048dc <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	691b      	ldr	r3, [r3, #16]
 80045e4:	f003 0310 	and.w	r3, r3, #16
 80045e8:	2b10      	cmp	r3, #16
 80045ea:	d122      	bne.n	8004632 <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	f003 0310 	and.w	r3, r3, #16
 80045f6:	2b10      	cmp	r3, #16
 80045f8:	d11b      	bne.n	8004632 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f06f 0210 	mvn.w	r2, #16
 8004602:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2208      	movs	r2, #8
 8004608:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	69db      	ldr	r3, [r3, #28]
 8004610:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004614:	2b00      	cmp	r3, #0
 8004616:	d003      	beq.n	8004620 <HAL_TIM_IRQHandler+0x146>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f000 f955 	bl	80048c8 <HAL_TIM_IC_CaptureCallback>
 800461e:	e005      	b.n	800462c <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	f000 f947 	bl	80048b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f000 f958 	bl	80048dc <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2200      	movs	r2, #0
 8004630:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	691b      	ldr	r3, [r3, #16]
 8004638:	f003 0301 	and.w	r3, r3, #1
 800463c:	2b01      	cmp	r3, #1
 800463e:	d10e      	bne.n	800465e <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	68db      	ldr	r3, [r3, #12]
 8004646:	f003 0301 	and.w	r3, r3, #1
 800464a:	2b01      	cmp	r3, #1
 800464c:	d107      	bne.n	800465e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f06f 0201 	mvn.w	r2, #1
 8004656:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f000 f921 	bl	80048a0 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	691b      	ldr	r3, [r3, #16]
 8004664:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004668:	2b80      	cmp	r3, #128	; 0x80
 800466a:	d10e      	bne.n	800468a <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004676:	2b80      	cmp	r3, #128	; 0x80
 8004678:	d107      	bne.n	800468a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004682:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	f000 fadf 	bl	8004c48 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	691b      	ldr	r3, [r3, #16]
 8004690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004694:	2b40      	cmp	r3, #64	; 0x40
 8004696:	d10e      	bne.n	80046b6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	68db      	ldr	r3, [r3, #12]
 800469e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046a2:	2b40      	cmp	r3, #64	; 0x40
 80046a4:	d107      	bne.n	80046b6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80046ae:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f000 f91d 	bl	80048f0 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	691b      	ldr	r3, [r3, #16]
 80046bc:	f003 0320 	and.w	r3, r3, #32
 80046c0:	2b20      	cmp	r3, #32
 80046c2:	d10e      	bne.n	80046e2 <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	f003 0320 	and.w	r3, r3, #32
 80046ce:	2b20      	cmp	r3, #32
 80046d0:	d107      	bne.n	80046e2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f06f 0220 	mvn.w	r2, #32
 80046da:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f000 faa9 	bl	8004c34 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 80046e2:	bf00      	nop
 80046e4:	3708      	adds	r7, #8
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}

080046ea <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral. 
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
 80046ea:	b580      	push	{r7, lr}
 80046ec:	b084      	sub	sp, #16
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	6078      	str	r0, [r7, #4]
 80046f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 80046f4:	2300      	movs	r3, #0
 80046f6:	60fb      	str	r3, [r7, #12]
    
  /* Process Locked */
  __HAL_LOCK(htim);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d101      	bne.n	8004706 <HAL_TIM_ConfigClockSource+0x1c>
 8004702:	2302      	movs	r3, #2
 8004704:	e0c8      	b.n	8004898 <HAL_TIM_ConfigClockSource+0x1ae>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2201      	movs	r2, #1
 800470a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2202      	movs	r2, #2
 8004712:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
  
  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004724:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800472c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	68fa      	ldr	r2, [r7, #12]
 8004734:	609a      	str	r2, [r3, #8]
  
  switch (sClockSourceConfig->ClockSource)
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	2b40      	cmp	r3, #64	; 0x40
 800473c:	d077      	beq.n	800482e <HAL_TIM_ConfigClockSource+0x144>
 800473e:	2b40      	cmp	r3, #64	; 0x40
 8004740:	d80e      	bhi.n	8004760 <HAL_TIM_ConfigClockSource+0x76>
 8004742:	2b10      	cmp	r3, #16
 8004744:	f000 808a 	beq.w	800485c <HAL_TIM_ConfigClockSource+0x172>
 8004748:	2b10      	cmp	r3, #16
 800474a:	d802      	bhi.n	8004752 <HAL_TIM_ConfigClockSource+0x68>
 800474c:	2b00      	cmp	r3, #0
 800474e:	d07e      	beq.n	800484e <HAL_TIM_ConfigClockSource+0x164>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;
    
    default:
    break;    
 8004750:	e099      	b.n	8004886 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 8004752:	2b20      	cmp	r3, #32
 8004754:	f000 8089 	beq.w	800486a <HAL_TIM_ConfigClockSource+0x180>
 8004758:	2b30      	cmp	r3, #48	; 0x30
 800475a:	f000 808d 	beq.w	8004878 <HAL_TIM_ConfigClockSource+0x18e>
    break;    
 800475e:	e092      	b.n	8004886 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 8004760:	2b70      	cmp	r3, #112	; 0x70
 8004762:	d016      	beq.n	8004792 <HAL_TIM_ConfigClockSource+0xa8>
 8004764:	2b70      	cmp	r3, #112	; 0x70
 8004766:	d804      	bhi.n	8004772 <HAL_TIM_ConfigClockSource+0x88>
 8004768:	2b50      	cmp	r3, #80	; 0x50
 800476a:	d040      	beq.n	80047ee <HAL_TIM_ConfigClockSource+0x104>
 800476c:	2b60      	cmp	r3, #96	; 0x60
 800476e:	d04e      	beq.n	800480e <HAL_TIM_ConfigClockSource+0x124>
    break;    
 8004770:	e089      	b.n	8004886 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 8004772:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004776:	d003      	beq.n	8004780 <HAL_TIM_ConfigClockSource+0x96>
 8004778:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800477c:	d024      	beq.n	80047c8 <HAL_TIM_ConfigClockSource+0xde>
    break;    
 800477e:	e082      	b.n	8004886 <HAL_TIM_ConfigClockSource+0x19c>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	687a      	ldr	r2, [r7, #4]
 8004786:	6812      	ldr	r2, [r2, #0]
 8004788:	6892      	ldr	r2, [r2, #8]
 800478a:	f022 0207 	bic.w	r2, r2, #7
 800478e:	609a      	str	r2, [r3, #8]
    break;
 8004790:	e079      	b.n	8004886 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance, 
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6818      	ldr	r0, [r3, #0]
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	6899      	ldr	r1, [r3, #8]
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	685a      	ldr	r2, [r3, #4]
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	68db      	ldr	r3, [r3, #12]
 80047a2:	f000 f9e0 	bl	8004b66 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80047b4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80047bc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	68fa      	ldr	r2, [r7, #12]
 80047c4:	609a      	str	r2, [r3, #8]
    break;
 80047c6:	e05e      	b.n	8004886 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance, 
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6818      	ldr	r0, [r3, #0]
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	6899      	ldr	r1, [r3, #8]
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	685a      	ldr	r2, [r3, #4]
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	f000 f9c5 	bl	8004b66 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	6812      	ldr	r2, [r2, #0]
 80047e4:	6892      	ldr	r2, [r2, #8]
 80047e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047ea:	609a      	str	r2, [r3, #8]
    break;
 80047ec:	e04b      	b.n	8004886 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6818      	ldr	r0, [r3, #0]
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	6859      	ldr	r1, [r3, #4]
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	461a      	mov	r2, r3
 80047fc:	f000 f92c 	bl	8004a58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2150      	movs	r1, #80	; 0x50
 8004806:	4618      	mov	r0, r3
 8004808:	f000 f98d 	bl	8004b26 <TIM_ITRx_SetConfig>
    break;
 800480c:	e03b      	b.n	8004886 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6818      	ldr	r0, [r3, #0]
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	6859      	ldr	r1, [r3, #4]
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	68db      	ldr	r3, [r3, #12]
 800481a:	461a      	mov	r2, r3
 800481c:	f000 f94f 	bl	8004abe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	2160      	movs	r1, #96	; 0x60
 8004826:	4618      	mov	r0, r3
 8004828:	f000 f97d 	bl	8004b26 <TIM_ITRx_SetConfig>
    break;
 800482c:	e02b      	b.n	8004886 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6818      	ldr	r0, [r3, #0]
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	6859      	ldr	r1, [r3, #4]
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	68db      	ldr	r3, [r3, #12]
 800483a:	461a      	mov	r2, r3
 800483c:	f000 f90c 	bl	8004a58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2140      	movs	r1, #64	; 0x40
 8004846:	4618      	mov	r0, r3
 8004848:	f000 f96d 	bl	8004b26 <TIM_ITRx_SetConfig>
    break;
 800484c:	e01b      	b.n	8004886 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	2100      	movs	r1, #0
 8004854:	4618      	mov	r0, r3
 8004856:	f000 f966 	bl	8004b26 <TIM_ITRx_SetConfig>
    break;
 800485a:	e014      	b.n	8004886 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2110      	movs	r1, #16
 8004862:	4618      	mov	r0, r3
 8004864:	f000 f95f 	bl	8004b26 <TIM_ITRx_SetConfig>
    break;
 8004868:	e00d      	b.n	8004886 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	2120      	movs	r1, #32
 8004870:	4618      	mov	r0, r3
 8004872:	f000 f958 	bl	8004b26 <TIM_ITRx_SetConfig>
    break;
 8004876:	e006      	b.n	8004886 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	2130      	movs	r1, #48	; 0x30
 800487e:	4618      	mov	r0, r3
 8004880:	f000 f951 	bl	8004b26 <TIM_ITRx_SetConfig>
    break;
 8004884:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2201      	movs	r2, #1
 800488a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 8004896:	2300      	movs	r3, #0
}
 8004898:	4618      	mov	r0, r3
 800489a:	3710      	adds	r7, #16
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}

080048a0 <HAL_TIM_PeriodElapsedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b083      	sub	sp, #12
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80048a8:	bf00      	nop
 80048aa:	370c      	adds	r7, #12
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr

080048b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b083      	sub	sp, #12
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80048bc:	bf00      	nop
 80048be:	370c      	adds	r7, #12
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr

080048c8 <HAL_TIM_IC_CaptureCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b083      	sub	sp, #12
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80048d0:	bf00      	nop
 80048d2:	370c      	adds	r7, #12
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr

080048dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80048dc:	b480      	push	{r7}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80048e4:	bf00      	nop
 80048e6:	370c      	adds	r7, #12
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr

080048f0 <HAL_TIM_TriggerCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b083      	sub	sp, #12
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80048f8:	bf00      	nop
 80048fa:	370c      	adds	r7, #12
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr

08004904 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure pointer on TIM Time Base required parameters  
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004904:	b480      	push	{r7}
 8004906:	b085      	sub	sp, #20
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 800490e:	2300      	movs	r3, #0
 8004910:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	4a44      	ldr	r2, [pc, #272]	; (8004a2c <TIM_Base_SetConfig+0x128>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d013      	beq.n	8004948 <TIM_Base_SetConfig+0x44>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004926:	d00f      	beq.n	8004948 <TIM_Base_SetConfig+0x44>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	4a41      	ldr	r2, [pc, #260]	; (8004a30 <TIM_Base_SetConfig+0x12c>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d00b      	beq.n	8004948 <TIM_Base_SetConfig+0x44>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	4a40      	ldr	r2, [pc, #256]	; (8004a34 <TIM_Base_SetConfig+0x130>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d007      	beq.n	8004948 <TIM_Base_SetConfig+0x44>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	4a3f      	ldr	r2, [pc, #252]	; (8004a38 <TIM_Base_SetConfig+0x134>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d003      	beq.n	8004948 <TIM_Base_SetConfig+0x44>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	4a3e      	ldr	r2, [pc, #248]	; (8004a3c <TIM_Base_SetConfig+0x138>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d101      	bne.n	800494c <TIM_Base_SetConfig+0x48>
 8004948:	2301      	movs	r3, #1
 800494a:	e000      	b.n	800494e <TIM_Base_SetConfig+0x4a>
 800494c:	2300      	movs	r3, #0
 800494e:	2b00      	cmp	r3, #0
 8004950:	d008      	beq.n	8004964 <TIM_Base_SetConfig+0x60>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004958:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	68fa      	ldr	r2, [r7, #12]
 8004960:	4313      	orrs	r3, r2
 8004962:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	4a31      	ldr	r2, [pc, #196]	; (8004a2c <TIM_Base_SetConfig+0x128>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d02b      	beq.n	80049c4 <TIM_Base_SetConfig+0xc0>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004972:	d027      	beq.n	80049c4 <TIM_Base_SetConfig+0xc0>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	4a2e      	ldr	r2, [pc, #184]	; (8004a30 <TIM_Base_SetConfig+0x12c>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d023      	beq.n	80049c4 <TIM_Base_SetConfig+0xc0>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	4a2d      	ldr	r2, [pc, #180]	; (8004a34 <TIM_Base_SetConfig+0x130>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d01f      	beq.n	80049c4 <TIM_Base_SetConfig+0xc0>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	4a2c      	ldr	r2, [pc, #176]	; (8004a38 <TIM_Base_SetConfig+0x134>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d01b      	beq.n	80049c4 <TIM_Base_SetConfig+0xc0>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	4a2b      	ldr	r2, [pc, #172]	; (8004a3c <TIM_Base_SetConfig+0x138>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d017      	beq.n	80049c4 <TIM_Base_SetConfig+0xc0>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	4a2a      	ldr	r2, [pc, #168]	; (8004a40 <TIM_Base_SetConfig+0x13c>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d013      	beq.n	80049c4 <TIM_Base_SetConfig+0xc0>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	4a29      	ldr	r2, [pc, #164]	; (8004a44 <TIM_Base_SetConfig+0x140>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d00f      	beq.n	80049c4 <TIM_Base_SetConfig+0xc0>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	4a28      	ldr	r2, [pc, #160]	; (8004a48 <TIM_Base_SetConfig+0x144>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d00b      	beq.n	80049c4 <TIM_Base_SetConfig+0xc0>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	4a27      	ldr	r2, [pc, #156]	; (8004a4c <TIM_Base_SetConfig+0x148>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d007      	beq.n	80049c4 <TIM_Base_SetConfig+0xc0>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	4a26      	ldr	r2, [pc, #152]	; (8004a50 <TIM_Base_SetConfig+0x14c>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d003      	beq.n	80049c4 <TIM_Base_SetConfig+0xc0>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	4a25      	ldr	r2, [pc, #148]	; (8004a54 <TIM_Base_SetConfig+0x150>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d101      	bne.n	80049c8 <TIM_Base_SetConfig+0xc4>
 80049c4:	2301      	movs	r3, #1
 80049c6:	e000      	b.n	80049ca <TIM_Base_SetConfig+0xc6>
 80049c8:	2300      	movs	r3, #0
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d008      	beq.n	80049e0 <TIM_Base_SetConfig+0xdc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	68db      	ldr	r3, [r3, #12]
 80049da:	68fa      	ldr	r2, [r7, #12]
 80049dc:	4313      	orrs	r3, r2
 80049de:	60fb      	str	r3, [r7, #12]
  }

  TIMx->CR1 = tmpcr1;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	68fa      	ldr	r2, [r7, #12]
 80049e4:	601a      	str	r2, [r3, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	689a      	ldr	r2, [r3, #8]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	629a      	str	r2, [r3, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	4a0c      	ldr	r2, [pc, #48]	; (8004a2c <TIM_Base_SetConfig+0x128>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d003      	beq.n	8004a06 <TIM_Base_SetConfig+0x102>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4a0e      	ldr	r2, [pc, #56]	; (8004a3c <TIM_Base_SetConfig+0x138>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d101      	bne.n	8004a0a <TIM_Base_SetConfig+0x106>
 8004a06:	2301      	movs	r3, #1
 8004a08:	e000      	b.n	8004a0c <TIM_Base_SetConfig+0x108>
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d003      	beq.n	8004a18 <TIM_Base_SetConfig+0x114>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	691a      	ldr	r2, [r3, #16]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	615a      	str	r2, [r3, #20]
}
 8004a1e:	bf00      	nop
 8004a20:	3714      	adds	r7, #20
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr
 8004a2a:	bf00      	nop
 8004a2c:	40010000 	.word	0x40010000
 8004a30:	40000400 	.word	0x40000400
 8004a34:	40000800 	.word	0x40000800
 8004a38:	40000c00 	.word	0x40000c00
 8004a3c:	40010400 	.word	0x40010400
 8004a40:	40014000 	.word	0x40014000
 8004a44:	40014400 	.word	0x40014400
 8004a48:	40014800 	.word	0x40014800
 8004a4c:	40001800 	.word	0x40001800
 8004a50:	40001c00 	.word	0x40001c00
 8004a54:	40002000 	.word	0x40002000

08004a58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b087      	sub	sp, #28
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	60b9      	str	r1, [r7, #8]
 8004a62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8004a64:	2300      	movs	r3, #0
 8004a66:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	613b      	str	r3, [r7, #16]
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6a1b      	ldr	r3, [r3, #32]
 8004a70:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	6a1b      	ldr	r3, [r3, #32]
 8004a76:	f023 0201 	bic.w	r2, r3, #1
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	699b      	ldr	r3, [r3, #24]
 8004a82:	617b      	str	r3, [r7, #20]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a8a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	011b      	lsls	r3, r3, #4
 8004a90:	697a      	ldr	r2, [r7, #20]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	617b      	str	r3, [r7, #20]
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	f023 030a 	bic.w	r3, r3, #10
 8004a9c:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 8004a9e:	693a      	ldr	r2, [r7, #16]
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	613b      	str	r3, [r7, #16]
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	697a      	ldr	r2, [r7, #20]
 8004aaa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	693a      	ldr	r2, [r7, #16]
 8004ab0:	621a      	str	r2, [r3, #32]
}
 8004ab2:	bf00      	nop
 8004ab4:	371c      	adds	r7, #28
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr

08004abe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004abe:	b480      	push	{r7}
 8004ac0:	b087      	sub	sp, #28
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	60f8      	str	r0, [r7, #12]
 8004ac6:	60b9      	str	r1, [r7, #8]
 8004ac8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8004aca:	2300      	movs	r3, #0
 8004acc:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	613b      	str	r3, [r7, #16]
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	6a1b      	ldr	r3, [r3, #32]
 8004ad6:	f023 0210 	bic.w	r2, r3, #16
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	699b      	ldr	r3, [r3, #24]
 8004ae2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	6a1b      	ldr	r3, [r3, #32]
 8004ae8:	613b      	str	r3, [r7, #16]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004af0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	031b      	lsls	r3, r3, #12
 8004af6:	697a      	ldr	r2, [r7, #20]
 8004af8:	4313      	orrs	r3, r2
 8004afa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004b02:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	011b      	lsls	r3, r3, #4
 8004b08:	693a      	ldr	r2, [r7, #16]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	697a      	ldr	r2, [r7, #20]
 8004b12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	693a      	ldr	r2, [r7, #16]
 8004b18:	621a      	str	r2, [r3, #32]
}
 8004b1a:	bf00      	nop
 8004b1c:	371c      	adds	r7, #28
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b24:	4770      	bx	lr

08004b26 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
 8004b26:	b480      	push	{r7}
 8004b28:	b085      	sub	sp, #20
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	6078      	str	r0, [r7, #4]
 8004b2e:	460b      	mov	r3, r1
 8004b30:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0U;
 8004b32:	2300      	movs	r3, #0
 8004b34:	60fb      	str	r3, [r7, #12]
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b42:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8004b44:	887b      	ldrh	r3, [r7, #2]
 8004b46:	f043 0307 	orr.w	r3, r3, #7
 8004b4a:	b29b      	uxth	r3, r3
 8004b4c:	461a      	mov	r2, r3
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	4313      	orrs	r3, r2
 8004b52:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	68fa      	ldr	r2, [r7, #12]
 8004b58:	609a      	str	r2, [r3, #8]
}
 8004b5a:	bf00      	nop
 8004b5c:	3714      	adds	r7, #20
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr

08004b66 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b66:	b480      	push	{r7}
 8004b68:	b087      	sub	sp, #28
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	60f8      	str	r0, [r7, #12]
 8004b6e:	60b9      	str	r1, [r7, #8]
 8004b70:	607a      	str	r2, [r7, #4]
 8004b72:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8004b74:	2300      	movs	r3, #0
 8004b76:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b84:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	021a      	lsls	r2, r3, #8
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	431a      	orrs	r2, r3
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	4313      	orrs	r3, r2
 8004b92:	697a      	ldr	r2, [r7, #20]
 8004b94:	4313      	orrs	r3, r2
 8004b96:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	697a      	ldr	r2, [r7, #20]
 8004b9c:	609a      	str	r2, [r3, #8]
} 
 8004b9e:	bf00      	nop
 8004ba0:	371c      	adds	r7, #28
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr

08004baa <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8004baa:	b480      	push	{r7}
 8004bac:	b083      	sub	sp, #12
 8004bae:	af00      	add	r7, sp, #0
 8004bb0:	6078      	str	r0, [r7, #4]
 8004bb2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d101      	bne.n	8004bc2 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004bbe:	2302      	movs	r3, #2
 8004bc0:	e032      	b.n	8004c28 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2202      	movs	r2, #2
 8004bce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	6812      	ldr	r2, [r2, #0]
 8004bda:	6852      	ldr	r2, [r2, #4]
 8004bdc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004be0:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	687a      	ldr	r2, [r7, #4]
 8004be8:	6812      	ldr	r2, [r2, #0]
 8004bea:	6851      	ldr	r1, [r2, #4]
 8004bec:	683a      	ldr	r2, [r7, #0]
 8004bee:	6812      	ldr	r2, [r2, #0]
 8004bf0:	430a      	orrs	r2, r1
 8004bf2:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	6812      	ldr	r2, [r2, #0]
 8004bfc:	6892      	ldr	r2, [r2, #8]
 8004bfe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c02:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	6812      	ldr	r2, [r2, #0]
 8004c0c:	6891      	ldr	r1, [r2, #8]
 8004c0e:	683a      	ldr	r2, [r7, #0]
 8004c10:	6852      	ldr	r2, [r2, #4]
 8004c12:	430a      	orrs	r2, r1
 8004c14:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2201      	movs	r2, #1
 8004c1a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 8004c26:	2300      	movs	r3, #0
} 
 8004c28:	4618      	mov	r0, r3
 8004c2a:	370c      	adds	r7, #12
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr

08004c34 <HAL_TIMEx_CommutationCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b083      	sub	sp, #12
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8004c3c:	bf00      	nop
 8004c3e:	370c      	adds	r7, #12
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr

08004c48 <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b083      	sub	sp, #12
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c50:	bf00      	nop
 8004c52:	370c      	adds	r7, #12
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr

08004c5c <HAL_UART_Init>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b082      	sub	sp, #8
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d101      	bne.n	8004c6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e03f      	b.n	8004cee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d106      	bne.n	8004c88 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f002 fbd2 	bl	800742c <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2224      	movs	r2, #36	; 0x24
 8004c8c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	687a      	ldr	r2, [r7, #4]
 8004c96:	6812      	ldr	r2, [r2, #0]
 8004c98:	68d2      	ldr	r2, [r2, #12]
 8004c9a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c9e:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f000 fb69 	bl	8005378 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	687a      	ldr	r2, [r7, #4]
 8004cac:	6812      	ldr	r2, [r2, #0]
 8004cae:	6912      	ldr	r2, [r2, #16]
 8004cb0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004cb4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	6812      	ldr	r2, [r2, #0]
 8004cbe:	6952      	ldr	r2, [r2, #20]
 8004cc0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004cc4:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	6812      	ldr	r2, [r2, #0]
 8004cce:	68d2      	ldr	r2, [r2, #12]
 8004cd0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004cd4:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2220      	movs	r2, #32
 8004ce0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2220      	movs	r2, #32
 8004ce8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 8004cec:	2300      	movs	r3, #0
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3708      	adds	r7, #8
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
	...

08004cf8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b086      	sub	sp, #24
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	60f8      	str	r0, [r7, #12]
 8004d00:	60b9      	str	r1, [r7, #8]
 8004d02:	4613      	mov	r3, r2
 8004d04:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	2b20      	cmp	r3, #32
 8004d10:	d153      	bne.n	8004dba <HAL_UART_Transmit_DMA+0xc2>
  {
    if((pData == NULL ) || (Size == 0))
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d002      	beq.n	8004d1e <HAL_UART_Transmit_DMA+0x26>
 8004d18:	88fb      	ldrh	r3, [r7, #6]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d101      	bne.n	8004d22 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e04c      	b.n	8004dbc <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d101      	bne.n	8004d30 <HAL_UART_Transmit_DMA+0x38>
 8004d2c:	2302      	movs	r3, #2
 8004d2e:	e045      	b.n	8004dbc <HAL_UART_Transmit_DMA+0xc4>
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8004d38:	68ba      	ldr	r2, [r7, #8]
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	88fa      	ldrh	r2, [r7, #6]
 8004d42:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	88fa      	ldrh	r2, [r7, #6]
 8004d48:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2221      	movs	r2, #33	; 0x21
 8004d54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d5c:	4a19      	ldr	r2, [pc, #100]	; (8004dc4 <HAL_UART_Transmit_DMA+0xcc>)
 8004d5e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d64:	4a18      	ldr	r2, [pc, #96]	; (8004dc8 <HAL_UART_Transmit_DMA+0xd0>)
 8004d66:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d6c:	4a17      	ldr	r2, [pc, #92]	; (8004dcc <HAL_UART_Transmit_DMA+0xd4>)
 8004d6e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d74:	2200      	movs	r2, #0
 8004d76:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA Stream */
    tmp = (uint32_t*)&pData;
 8004d78:	f107 0308 	add.w	r3, r7, #8
 8004d7c:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->DR, Size);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	6819      	ldr	r1, [r3, #0]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	3304      	adds	r3, #4
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	88fb      	ldrh	r3, [r7, #6]
 8004d90:	f7fc fdf4 	bl	800197c <HAL_DMA_Start_IT>
    
    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d9c:	601a      	str	r2, [r3, #0]
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2200      	movs	r2, #0
 8004da2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	68fa      	ldr	r2, [r7, #12]
 8004dac:	6812      	ldr	r2, [r2, #0]
 8004dae:	6952      	ldr	r2, [r2, #20]
 8004db0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004db4:	615a      	str	r2, [r3, #20]
    
    return HAL_OK;
 8004db6:	2300      	movs	r3, #0
 8004db8:	e000      	b.n	8004dbc <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8004dba:	2302      	movs	r3, #2
  }
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3718      	adds	r7, #24
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}
 8004dc4:	08005019 	.word	0x08005019
 8004dc8:	0800506b 	.word	0x0800506b
 8004dcc:	08005087 	.word	0x08005087

08004dd0 <HAL_UART_IRQHandler>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b088      	sub	sp, #32
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	61fb      	str	r3, [r7, #28]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	61bb      	str	r3, [r7, #24]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	695b      	ldr	r3, [r3, #20]
 8004dee:	617b      	str	r3, [r7, #20]
   uint32_t errorflags = 0x00U;
 8004df0:	2300      	movs	r3, #0
 8004df2:	613b      	str	r3, [r7, #16]
   uint32_t dmarequest = 0x00U;
 8004df4:	2300      	movs	r3, #0
 8004df6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004df8:	69fb      	ldr	r3, [r7, #28]
 8004dfa:	f003 030f 	and.w	r3, r3, #15
 8004dfe:	613b      	str	r3, [r7, #16]
  if(errorflags == RESET)
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d10d      	bne.n	8004e22 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e06:	69fb      	ldr	r3, [r7, #28]
 8004e08:	f003 0320 	and.w	r3, r3, #32
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d008      	beq.n	8004e22 <HAL_UART_IRQHandler+0x52>
 8004e10:	69bb      	ldr	r3, [r7, #24]
 8004e12:	f003 0320 	and.w	r3, r3, #32
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d003      	beq.n	8004e22 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f000 fa32 	bl	8005284 <UART_Receive_IT>
      return;
 8004e20:	e0cc      	b.n	8004fbc <HAL_UART_IRQHandler+0x1ec>
    }
  }  

  /* If some errors occur */
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	f000 80ab 	beq.w	8004f80 <HAL_UART_IRQHandler+0x1b0>
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	f003 0301 	and.w	r3, r3, #1
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d105      	bne.n	8004e40 <HAL_UART_IRQHandler+0x70>
 8004e34:	69bb      	ldr	r3, [r7, #24]
 8004e36:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	f000 80a0 	beq.w	8004f80 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004e40:	69fb      	ldr	r3, [r7, #28]
 8004e42:	f003 0301 	and.w	r3, r3, #1
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d00a      	beq.n	8004e60 <HAL_UART_IRQHandler+0x90>
 8004e4a:	69bb      	ldr	r3, [r7, #24]
 8004e4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d005      	beq.n	8004e60 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e58:	f043 0201 	orr.w	r2, r3, #1
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    /* UART noise error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e60:	69fb      	ldr	r3, [r7, #28]
 8004e62:	f003 0304 	and.w	r3, r3, #4
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d00a      	beq.n	8004e80 <HAL_UART_IRQHandler+0xb0>
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	f003 0301 	and.w	r3, r3, #1
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d005      	beq.n	8004e80 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e78:	f043 0202 	orr.w	r2, r3, #2
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    /* UART frame error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e80:	69fb      	ldr	r3, [r7, #28]
 8004e82:	f003 0302 	and.w	r3, r3, #2
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d00a      	beq.n	8004ea0 <HAL_UART_IRQHandler+0xd0>
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	f003 0301 	and.w	r3, r3, #1
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d005      	beq.n	8004ea0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e98:	f043 0204 	orr.w	r2, r3, #4
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    /* UART Over-Run interrupt occurred --------------------------------------*/
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ea0:	69fb      	ldr	r3, [r7, #28]
 8004ea2:	f003 0308 	and.w	r3, r3, #8
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d00a      	beq.n	8004ec0 <HAL_UART_IRQHandler+0xf0>
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	f003 0301 	and.w	r3, r3, #1
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d005      	beq.n	8004ec0 <HAL_UART_IRQHandler+0xf0>
    { 
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eb8:	f043 0208 	orr.w	r2, r3, #8
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/    
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d078      	beq.n	8004fba <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004ec8:	69fb      	ldr	r3, [r7, #28]
 8004eca:	f003 0320 	and.w	r3, r3, #32
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d007      	beq.n	8004ee2 <HAL_UART_IRQHandler+0x112>
 8004ed2:	69bb      	ldr	r3, [r7, #24]
 8004ed4:	f003 0320 	and.w	r3, r3, #32
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d002      	beq.n	8004ee2 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f000 f9d1 	bl	8005284 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	695b      	ldr	r3, [r3, #20]
 8004ee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	bf14      	ite	ne
 8004ef0:	2301      	movne	r3, #1
 8004ef2:	2300      	moveq	r3, #0
 8004ef4:	b2db      	uxtb	r3, r3
 8004ef6:	60fb      	str	r3, [r7, #12]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004efc:	f003 0308 	and.w	r3, r3, #8
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d102      	bne.n	8004f0a <HAL_UART_IRQHandler+0x13a>
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d031      	beq.n	8004f6e <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f000 f91b 	bl	8005146 <UART_EndRxTransfer>
        
        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	695b      	ldr	r3, [r3, #20]
 8004f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d023      	beq.n	8004f66 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	6812      	ldr	r2, [r2, #0]
 8004f26:	6952      	ldr	r2, [r2, #20]
 8004f28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f2c:	615a      	str	r2, [r3, #20]
          
          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d013      	beq.n	8004f5e <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f3a:	4a22      	ldr	r2, [pc, #136]	; (8004fc4 <HAL_UART_IRQHandler+0x1f4>)
 8004f3c:	651a      	str	r2, [r3, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f42:	4618      	mov	r0, r3
 8004f44:	f7fc fd7a 	bl	8001a3c <HAL_DMA_Abort_IT>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d016      	beq.n	8004f7c <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004f58:	4610      	mov	r0, r2
 8004f5a:	4798      	blx	r3
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f5c:	e00e      	b.n	8004f7c <HAL_UART_IRQHandler+0x1ac>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f000 f850 	bl	8005004 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f64:	e00a      	b.n	8004f7c <HAL_UART_IRQHandler+0x1ac>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f000 f84c 	bl	8005004 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f6c:	e006      	b.n	8004f7c <HAL_UART_IRQHandler+0x1ac>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f000 f848 	bl	8005004 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2200      	movs	r2, #0
 8004f78:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004f7a:	e01e      	b.n	8004fba <HAL_UART_IRQHandler+0x1ea>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f7c:	bf00      	nop
    return;
 8004f7e:	e01c      	b.n	8004fba <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004f80:	69fb      	ldr	r3, [r7, #28]
 8004f82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d008      	beq.n	8004f9c <HAL_UART_IRQHandler+0x1cc>
 8004f8a:	69bb      	ldr	r3, [r7, #24]
 8004f8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d003      	beq.n	8004f9c <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	f000 f908 	bl	80051aa <UART_Transmit_IT>
    return;
 8004f9a:	e00f      	b.n	8004fbc <HAL_UART_IRQHandler+0x1ec>
  }
  
  /* UART in mode Transmitter end --------------------------------------------*/
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004f9c:	69fb      	ldr	r3, [r7, #28]
 8004f9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d00a      	beq.n	8004fbc <HAL_UART_IRQHandler+0x1ec>
 8004fa6:	69bb      	ldr	r3, [r7, #24]
 8004fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d005      	beq.n	8004fbc <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f000 f94f 	bl	8005254 <UART_EndTransmit_IT>
    return;
 8004fb6:	bf00      	nop
 8004fb8:	e000      	b.n	8004fbc <HAL_UART_IRQHandler+0x1ec>
    return;
 8004fba:	bf00      	nop
  }
}
 8004fbc:	3720      	adds	r7, #32
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}
 8004fc2:	bf00      	nop
 8004fc4:	08005183 	.word	0x08005183

08004fc8 <HAL_UART_TxCpltCallback>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b083      	sub	sp, #12
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */ 
}
 8004fd0:	bf00      	nop
 8004fd2:	370c      	adds	r7, #12
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fda:	4770      	bx	lr

08004fdc <HAL_UART_TxHalfCpltCallback>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b083      	sub	sp, #12
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */ 
}
 8004fe4:	bf00      	nop
 8004fe6:	370c      	adds	r7, #12
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr

08004ff0 <HAL_UART_RxCpltCallback>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b083      	sub	sp, #12
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004ff8:	bf00      	nop
 8004ffa:	370c      	adds	r7, #12
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr

08005004 <HAL_UART_ErrorCallback>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005004:	b480      	push	{r7}
 8005006:	b083      	sub	sp, #12
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart); 
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */ 
}
 800500c:	bf00      	nop
 800500e:	370c      	adds	r7, #12
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr

08005018 <UART_DMATransmitCplt>:
  * @brief  DMA UART transmit process complete callback. 
  * @param  hdma DMA handle
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b084      	sub	sp, #16
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005024:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005030:	2b00      	cmp	r3, #0
 8005032:	d113      	bne.n	800505c <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0U;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2200      	movs	r2, #0
 8005038:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	68fa      	ldr	r2, [r7, #12]
 8005040:	6812      	ldr	r2, [r2, #0]
 8005042:	6952      	ldr	r2, [r2, #20]
 8005044:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005048:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	68fa      	ldr	r2, [r7, #12]
 8005050:	6812      	ldr	r2, [r2, #0]
 8005052:	68d2      	ldr	r2, [r2, #12]
 8005054:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005058:	60da      	str	r2, [r3, #12]
  /* DMA Circular mode */
  else
  {
    HAL_UART_TxCpltCallback(huart);
  }
}
 800505a:	e002      	b.n	8005062 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 800505c:	68f8      	ldr	r0, [r7, #12]
 800505e:	f7ff ffb3 	bl	8004fc8 <HAL_UART_TxCpltCallback>
}
 8005062:	bf00      	nop
 8005064:	3710      	adds	r7, #16
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}

0800506a <UART_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800506a:	b580      	push	{r7, lr}
 800506c:	b084      	sub	sp, #16
 800506e:	af00      	add	r7, sp, #0
 8005070:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005076:	60fb      	str	r3, [r7, #12]

  HAL_UART_TxHalfCpltCallback(huart);
 8005078:	68f8      	ldr	r0, [r7, #12]
 800507a:	f7ff ffaf 	bl	8004fdc <HAL_UART_TxHalfCpltCallback>
}
 800507e:	bf00      	nop
 8005080:	3710      	adds	r7, #16
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}

08005086 <UART_DMAError>:
  * @brief  DMA UART communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005086:	b580      	push	{r7, lr}
 8005088:	b084      	sub	sp, #16
 800508a:	af00      	add	r7, sp, #0
 800508c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800508e:	2300      	movs	r3, #0
 8005090:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005096:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	695b      	ldr	r3, [r3, #20]
 800509e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	bf14      	ite	ne
 80050a6:	2301      	movne	r3, #1
 80050a8:	2300      	moveq	r3, #0
 80050aa:	b2db      	uxtb	r3, r3
 80050ac:	60fb      	str	r3, [r7, #12]
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80050b4:	b2db      	uxtb	r3, r3
 80050b6:	2b21      	cmp	r3, #33	; 0x21
 80050b8:	d108      	bne.n	80050cc <UART_DMAError+0x46>
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d005      	beq.n	80050cc <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0U;
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	2200      	movs	r2, #0
 80050c4:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80050c6:	68b8      	ldr	r0, [r7, #8]
 80050c8:	f000 f827 	bl	800511a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR); 
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	695b      	ldr	r3, [r3, #20]
 80050d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	bf14      	ite	ne
 80050da:	2301      	movne	r3, #1
 80050dc:	2300      	moveq	r3, #0
 80050de:	b2db      	uxtb	r3, r3
 80050e0:	60fb      	str	r3, [r7, #12]
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	2b22      	cmp	r3, #34	; 0x22
 80050ec:	d108      	bne.n	8005100 <UART_DMAError+0x7a>
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d005      	beq.n	8005100 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0U;
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	2200      	movs	r2, #0
 80050f8:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80050fa:	68b8      	ldr	r0, [r7, #8]
 80050fc:	f000 f823 	bl	8005146 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005104:	f043 0210 	orr.w	r2, r3, #16
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	63da      	str	r2, [r3, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 800510c:	68b8      	ldr	r0, [r7, #8]
 800510e:	f7ff ff79 	bl	8005004 <HAL_UART_ErrorCallback>
}
 8005112:	bf00      	nop
 8005114:	3710      	adds	r7, #16
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}

0800511a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800511a:	b480      	push	{r7}
 800511c:	b083      	sub	sp, #12
 800511e:	af00      	add	r7, sp, #0
 8005120:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	687a      	ldr	r2, [r7, #4]
 8005128:	6812      	ldr	r2, [r2, #0]
 800512a:	68d2      	ldr	r2, [r2, #12]
 800512c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005130:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2220      	movs	r2, #32
 8005136:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800513a:	bf00      	nop
 800513c:	370c      	adds	r7, #12
 800513e:	46bd      	mov	sp, r7
 8005140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005144:	4770      	bx	lr

08005146 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005146:	b480      	push	{r7}
 8005148:	b083      	sub	sp, #12
 800514a:	af00      	add	r7, sp, #0
 800514c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	687a      	ldr	r2, [r7, #4]
 8005154:	6812      	ldr	r2, [r2, #0]
 8005156:	68d2      	ldr	r2, [r2, #12]
 8005158:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800515c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	6812      	ldr	r2, [r2, #0]
 8005166:	6952      	ldr	r2, [r2, #20]
 8005168:	f022 0201 	bic.w	r2, r2, #1
 800516c:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2220      	movs	r2, #32
 8005172:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005176:	bf00      	nop
 8005178:	370c      	adds	r7, #12
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr

08005182 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005182:	b580      	push	{r7, lr}
 8005184:	b084      	sub	sp, #16
 8005186:	af00      	add	r7, sp, #0
 8005188:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800518e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2200      	movs	r2, #0
 8005194:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0U;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2200      	movs	r2, #0
 800519a:	84da      	strh	r2, [r3, #38]	; 0x26

  HAL_UART_ErrorCallback(huart);
 800519c:	68f8      	ldr	r0, [r7, #12]
 800519e:	f7ff ff31 	bl	8005004 <HAL_UART_ErrorCallback>
}
 80051a2:	bf00      	nop
 80051a4:	3710      	adds	r7, #16
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}

080051aa <UART_Transmit_IT>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80051aa:	b480      	push	{r7}
 80051ac:	b085      	sub	sp, #20
 80051ae:	af00      	add	r7, sp, #0
 80051b0:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80051b8:	b2db      	uxtb	r3, r3
 80051ba:	2b21      	cmp	r3, #33	; 0x21
 80051bc:	d143      	bne.n	8005246 <UART_Transmit_IT+0x9c>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051c6:	d119      	bne.n	80051fc <UART_Transmit_IT+0x52>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6a1b      	ldr	r3, [r3, #32]
 80051cc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	68fa      	ldr	r2, [r7, #12]
 80051d4:	8812      	ldrh	r2, [r2, #0]
 80051d6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051da:	605a      	str	r2, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	691b      	ldr	r3, [r3, #16]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d105      	bne.n	80051f0 <UART_Transmit_IT+0x46>
      {
        huart->pTxBuffPtr += 2U;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6a1b      	ldr	r3, [r3, #32]
 80051e8:	1c9a      	adds	r2, r3, #2
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	621a      	str	r2, [r3, #32]
 80051ee:	e00e      	b.n	800520e <UART_Transmit_IT+0x64>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6a1b      	ldr	r3, [r3, #32]
 80051f4:	1c5a      	adds	r2, r3, #1
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	621a      	str	r2, [r3, #32]
 80051fa:	e008      	b.n	800520e <UART_Transmit_IT+0x64>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6a1b      	ldr	r3, [r3, #32]
 8005204:	1c58      	adds	r0, r3, #1
 8005206:	6879      	ldr	r1, [r7, #4]
 8005208:	6208      	str	r0, [r1, #32]
 800520a:	781b      	ldrb	r3, [r3, #0]
 800520c:	6053      	str	r3, [r2, #4]
    }

    if(--huart->TxXferCount == 0U)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005212:	b29b      	uxth	r3, r3
 8005214:	3b01      	subs	r3, #1
 8005216:	b29b      	uxth	r3, r3
 8005218:	687a      	ldr	r2, [r7, #4]
 800521a:	4619      	mov	r1, r3
 800521c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800521e:	2b00      	cmp	r3, #0
 8005220:	d10f      	bne.n	8005242 <UART_Transmit_IT+0x98>
    {
      /* Disable the UART Transmit Complete Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	687a      	ldr	r2, [r7, #4]
 8005228:	6812      	ldr	r2, [r2, #0]
 800522a:	68d2      	ldr	r2, [r2, #12]
 800522c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005230:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	687a      	ldr	r2, [r7, #4]
 8005238:	6812      	ldr	r2, [r2, #0]
 800523a:	68d2      	ldr	r2, [r2, #12]
 800523c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005240:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005242:	2300      	movs	r3, #0
 8005244:	e000      	b.n	8005248 <UART_Transmit_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8005246:	2302      	movs	r3, #2
  }
}
 8005248:	4618      	mov	r0, r3
 800524a:	3714      	adds	r7, #20
 800524c:	46bd      	mov	sp, r7
 800524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005252:	4770      	bx	lr

08005254 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b082      	sub	sp, #8
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */    
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	687a      	ldr	r2, [r7, #4]
 8005262:	6812      	ldr	r2, [r2, #0]
 8005264:	68d2      	ldr	r2, [r2, #12]
 8005266:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800526a:	60da      	str	r2, [r3, #12]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2220      	movs	r2, #32
 8005270:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  HAL_UART_TxCpltCallback(huart);
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	f7ff fea7 	bl	8004fc8 <HAL_UART_TxCpltCallback>
  
  return HAL_OK;
 800527a:	2300      	movs	r3, #0
}
 800527c:	4618      	mov	r0, r3
 800527e:	3708      	adds	r7, #8
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}

08005284 <UART_Receive_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b084      	sub	sp, #16
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005292:	b2db      	uxtb	r3, r3
 8005294:	2b22      	cmp	r3, #34	; 0x22
 8005296:	d169      	bne.n	800536c <UART_Receive_IT+0xe8>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052a0:	d123      	bne.n	80052ea <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052a6:	60fb      	str	r3, [r7, #12]
      if(huart->Init.Parity == UART_PARITY_NONE)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	691b      	ldr	r3, [r3, #16]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d10e      	bne.n	80052ce <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052bc:	b29a      	uxth	r2, r3
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052c6:	1c9a      	adds	r2, r3, #2
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	629a      	str	r2, [r3, #40]	; 0x28
 80052cc:	e029      	b.n	8005322 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	b29b      	uxth	r3, r3
 80052d6:	b2db      	uxtb	r3, r3
 80052d8:	b29a      	uxth	r2, r3
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052e2:	1c5a      	adds	r2, r3, #1
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	629a      	str	r2, [r3, #40]	; 0x28
 80052e8:	e01b      	b.n	8005322 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	691b      	ldr	r3, [r3, #16]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d10a      	bne.n	8005308 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052f6:	1c59      	adds	r1, r3, #1
 80052f8:	687a      	ldr	r2, [r7, #4]
 80052fa:	6291      	str	r1, [r2, #40]	; 0x28
 80052fc:	687a      	ldr	r2, [r7, #4]
 80052fe:	6812      	ldr	r2, [r2, #0]
 8005300:	6852      	ldr	r2, [r2, #4]
 8005302:	b2d2      	uxtb	r2, r2
 8005304:	701a      	strb	r2, [r3, #0]
 8005306:	e00c      	b.n	8005322 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800530c:	1c59      	adds	r1, r3, #1
 800530e:	687a      	ldr	r2, [r7, #4]
 8005310:	6291      	str	r1, [r2, #40]	; 0x28
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	6812      	ldr	r2, [r2, #0]
 8005316:	6852      	ldr	r2, [r2, #4]
 8005318:	b2d2      	uxtb	r2, r2
 800531a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800531e:	b2d2      	uxtb	r2, r2
 8005320:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0U)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005326:	b29b      	uxth	r3, r3
 8005328:	3b01      	subs	r3, #1
 800532a:	b29b      	uxth	r3, r3
 800532c:	687a      	ldr	r2, [r7, #4]
 800532e:	4619      	mov	r1, r3
 8005330:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005332:	2b00      	cmp	r3, #0
 8005334:	d118      	bne.n	8005368 <UART_Receive_IT+0xe4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	687a      	ldr	r2, [r7, #4]
 800533c:	6812      	ldr	r2, [r2, #0]
 800533e:	68d2      	ldr	r2, [r2, #12]
 8005340:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005344:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	6812      	ldr	r2, [r2, #0]
 800534e:	6952      	ldr	r2, [r2, #20]
 8005350:	f022 0201 	bic.w	r2, r2, #1
 8005354:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2220      	movs	r2, #32
 800535a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
     
      HAL_UART_RxCpltCallback(huart);
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f7ff fe46 	bl	8004ff0 <HAL_UART_RxCpltCallback>

      return HAL_OK;
 8005364:	2300      	movs	r3, #0
 8005366:	e002      	b.n	800536e <UART_Receive_IT+0xea>
    }
    return HAL_OK;
 8005368:	2300      	movs	r3, #0
 800536a:	e000      	b.n	800536e <UART_Receive_IT+0xea>
  }
  else
  {
    return HAL_BUSY;
 800536c:	2302      	movs	r3, #2
  }
}
 800536e:	4618      	mov	r0, r3
 8005370:	3710      	adds	r7, #16
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}
	...

08005378 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005378:	b5f0      	push	{r4, r5, r6, r7, lr}
 800537a:	b085      	sub	sp, #20
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8005380:	2300      	movs	r3, #0
 8005382:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	691b      	ldr	r3, [r3, #16]
 800538a:	60fb      	str	r3, [r7, #12]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005392:	60fb      	str	r3, [r7, #12]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	68db      	ldr	r3, [r3, #12]
 8005398:	68fa      	ldr	r2, [r7, #12]
 800539a:	4313      	orrs	r3, r2
 800539c:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	68fa      	ldr	r2, [r7, #12]
 80053a4:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	68db      	ldr	r3, [r3, #12]
 80053ac:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80053b4:	f023 030c 	bic.w	r3, r3, #12
 80053b8:	60fb      	str	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	689a      	ldr	r2, [r3, #8]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	691b      	ldr	r3, [r3, #16]
 80053c2:	431a      	orrs	r2, r3
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	695b      	ldr	r3, [r3, #20]
 80053c8:	431a      	orrs	r2, r3
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	69db      	ldr	r3, [r3, #28]
 80053ce:	4313      	orrs	r3, r2
 80053d0:	68fa      	ldr	r2, [r7, #12]
 80053d2:	4313      	orrs	r3, r2
 80053d4:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	68fa      	ldr	r2, [r7, #12]
 80053dc:	60da      	str	r2, [r3, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	695b      	ldr	r3, [r3, #20]
 80053e4:	60fb      	str	r3, [r7, #12]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053ec:	60fb      	str	r3, [r7, #12]
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	699b      	ldr	r3, [r3, #24]
 80053f2:	68fa      	ldr	r2, [r7, #12]
 80053f4:	4313      	orrs	r3, r2
 80053f6:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	68fa      	ldr	r2, [r7, #12]
 80053fe:	615a      	str	r2, [r3, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	69db      	ldr	r3, [r3, #28]
 8005404:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005408:	f040 80e4 	bne.w	80055d4 <UART_SetConfig+0x25c>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4aab      	ldr	r2, [pc, #684]	; (80056c0 <UART_SetConfig+0x348>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d004      	beq.n	8005420 <UART_SetConfig+0xa8>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4aaa      	ldr	r2, [pc, #680]	; (80056c4 <UART_SetConfig+0x34c>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d16c      	bne.n	80054fa <UART_SetConfig+0x182>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681c      	ldr	r4, [r3, #0]
 8005424:	f7fd f892 	bl	800254c <HAL_RCC_GetPCLK2Freq>
 8005428:	4602      	mov	r2, r0
 800542a:	4613      	mov	r3, r2
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	4413      	add	r3, r2
 8005430:	009a      	lsls	r2, r3, #2
 8005432:	441a      	add	r2, r3
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	005b      	lsls	r3, r3, #1
 800543a:	fbb2 f3f3 	udiv	r3, r2, r3
 800543e:	4aa2      	ldr	r2, [pc, #648]	; (80056c8 <UART_SetConfig+0x350>)
 8005440:	fba2 2303 	umull	r2, r3, r2, r3
 8005444:	095b      	lsrs	r3, r3, #5
 8005446:	011d      	lsls	r5, r3, #4
 8005448:	f7fd f880 	bl	800254c <HAL_RCC_GetPCLK2Freq>
 800544c:	4602      	mov	r2, r0
 800544e:	4613      	mov	r3, r2
 8005450:	009b      	lsls	r3, r3, #2
 8005452:	4413      	add	r3, r2
 8005454:	009a      	lsls	r2, r3, #2
 8005456:	441a      	add	r2, r3
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	005b      	lsls	r3, r3, #1
 800545e:	fbb2 f6f3 	udiv	r6, r2, r3
 8005462:	f7fd f873 	bl	800254c <HAL_RCC_GetPCLK2Freq>
 8005466:	4602      	mov	r2, r0
 8005468:	4613      	mov	r3, r2
 800546a:	009b      	lsls	r3, r3, #2
 800546c:	4413      	add	r3, r2
 800546e:	009a      	lsls	r2, r3, #2
 8005470:	441a      	add	r2, r3
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	005b      	lsls	r3, r3, #1
 8005478:	fbb2 f3f3 	udiv	r3, r2, r3
 800547c:	4a92      	ldr	r2, [pc, #584]	; (80056c8 <UART_SetConfig+0x350>)
 800547e:	fba2 2303 	umull	r2, r3, r2, r3
 8005482:	095b      	lsrs	r3, r3, #5
 8005484:	2264      	movs	r2, #100	; 0x64
 8005486:	fb02 f303 	mul.w	r3, r2, r3
 800548a:	1af3      	subs	r3, r6, r3
 800548c:	00db      	lsls	r3, r3, #3
 800548e:	3332      	adds	r3, #50	; 0x32
 8005490:	4a8d      	ldr	r2, [pc, #564]	; (80056c8 <UART_SetConfig+0x350>)
 8005492:	fba2 2303 	umull	r2, r3, r2, r3
 8005496:	095b      	lsrs	r3, r3, #5
 8005498:	005b      	lsls	r3, r3, #1
 800549a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800549e:	441d      	add	r5, r3
 80054a0:	f7fd f854 	bl	800254c <HAL_RCC_GetPCLK2Freq>
 80054a4:	4602      	mov	r2, r0
 80054a6:	4613      	mov	r3, r2
 80054a8:	009b      	lsls	r3, r3, #2
 80054aa:	4413      	add	r3, r2
 80054ac:	009a      	lsls	r2, r3, #2
 80054ae:	441a      	add	r2, r3
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	005b      	lsls	r3, r3, #1
 80054b6:	fbb2 f6f3 	udiv	r6, r2, r3
 80054ba:	f7fd f847 	bl	800254c <HAL_RCC_GetPCLK2Freq>
 80054be:	4602      	mov	r2, r0
 80054c0:	4613      	mov	r3, r2
 80054c2:	009b      	lsls	r3, r3, #2
 80054c4:	4413      	add	r3, r2
 80054c6:	009a      	lsls	r2, r3, #2
 80054c8:	441a      	add	r2, r3
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	005b      	lsls	r3, r3, #1
 80054d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80054d4:	4a7c      	ldr	r2, [pc, #496]	; (80056c8 <UART_SetConfig+0x350>)
 80054d6:	fba2 2303 	umull	r2, r3, r2, r3
 80054da:	095b      	lsrs	r3, r3, #5
 80054dc:	2264      	movs	r2, #100	; 0x64
 80054de:	fb02 f303 	mul.w	r3, r2, r3
 80054e2:	1af3      	subs	r3, r6, r3
 80054e4:	00db      	lsls	r3, r3, #3
 80054e6:	3332      	adds	r3, #50	; 0x32
 80054e8:	4a77      	ldr	r2, [pc, #476]	; (80056c8 <UART_SetConfig+0x350>)
 80054ea:	fba2 2303 	umull	r2, r3, r2, r3
 80054ee:	095b      	lsrs	r3, r3, #5
 80054f0:	f003 0307 	and.w	r3, r3, #7
 80054f4:	442b      	add	r3, r5
 80054f6:	60a3      	str	r3, [r4, #8]
 80054f8:	e154      	b.n	80057a4 <UART_SetConfig+0x42c>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681c      	ldr	r4, [r3, #0]
 80054fe:	f7fd f811 	bl	8002524 <HAL_RCC_GetPCLK1Freq>
 8005502:	4602      	mov	r2, r0
 8005504:	4613      	mov	r3, r2
 8005506:	009b      	lsls	r3, r3, #2
 8005508:	4413      	add	r3, r2
 800550a:	009a      	lsls	r2, r3, #2
 800550c:	441a      	add	r2, r3
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	005b      	lsls	r3, r3, #1
 8005514:	fbb2 f3f3 	udiv	r3, r2, r3
 8005518:	4a6b      	ldr	r2, [pc, #428]	; (80056c8 <UART_SetConfig+0x350>)
 800551a:	fba2 2303 	umull	r2, r3, r2, r3
 800551e:	095b      	lsrs	r3, r3, #5
 8005520:	011d      	lsls	r5, r3, #4
 8005522:	f7fc ffff 	bl	8002524 <HAL_RCC_GetPCLK1Freq>
 8005526:	4602      	mov	r2, r0
 8005528:	4613      	mov	r3, r2
 800552a:	009b      	lsls	r3, r3, #2
 800552c:	4413      	add	r3, r2
 800552e:	009a      	lsls	r2, r3, #2
 8005530:	441a      	add	r2, r3
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	005b      	lsls	r3, r3, #1
 8005538:	fbb2 f6f3 	udiv	r6, r2, r3
 800553c:	f7fc fff2 	bl	8002524 <HAL_RCC_GetPCLK1Freq>
 8005540:	4602      	mov	r2, r0
 8005542:	4613      	mov	r3, r2
 8005544:	009b      	lsls	r3, r3, #2
 8005546:	4413      	add	r3, r2
 8005548:	009a      	lsls	r2, r3, #2
 800554a:	441a      	add	r2, r3
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	005b      	lsls	r3, r3, #1
 8005552:	fbb2 f3f3 	udiv	r3, r2, r3
 8005556:	4a5c      	ldr	r2, [pc, #368]	; (80056c8 <UART_SetConfig+0x350>)
 8005558:	fba2 2303 	umull	r2, r3, r2, r3
 800555c:	095b      	lsrs	r3, r3, #5
 800555e:	2264      	movs	r2, #100	; 0x64
 8005560:	fb02 f303 	mul.w	r3, r2, r3
 8005564:	1af3      	subs	r3, r6, r3
 8005566:	00db      	lsls	r3, r3, #3
 8005568:	3332      	adds	r3, #50	; 0x32
 800556a:	4a57      	ldr	r2, [pc, #348]	; (80056c8 <UART_SetConfig+0x350>)
 800556c:	fba2 2303 	umull	r2, r3, r2, r3
 8005570:	095b      	lsrs	r3, r3, #5
 8005572:	005b      	lsls	r3, r3, #1
 8005574:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005578:	441d      	add	r5, r3
 800557a:	f7fc ffd3 	bl	8002524 <HAL_RCC_GetPCLK1Freq>
 800557e:	4602      	mov	r2, r0
 8005580:	4613      	mov	r3, r2
 8005582:	009b      	lsls	r3, r3, #2
 8005584:	4413      	add	r3, r2
 8005586:	009a      	lsls	r2, r3, #2
 8005588:	441a      	add	r2, r3
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	005b      	lsls	r3, r3, #1
 8005590:	fbb2 f6f3 	udiv	r6, r2, r3
 8005594:	f7fc ffc6 	bl	8002524 <HAL_RCC_GetPCLK1Freq>
 8005598:	4602      	mov	r2, r0
 800559a:	4613      	mov	r3, r2
 800559c:	009b      	lsls	r3, r3, #2
 800559e:	4413      	add	r3, r2
 80055a0:	009a      	lsls	r2, r3, #2
 80055a2:	441a      	add	r2, r3
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	005b      	lsls	r3, r3, #1
 80055aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80055ae:	4a46      	ldr	r2, [pc, #280]	; (80056c8 <UART_SetConfig+0x350>)
 80055b0:	fba2 2303 	umull	r2, r3, r2, r3
 80055b4:	095b      	lsrs	r3, r3, #5
 80055b6:	2264      	movs	r2, #100	; 0x64
 80055b8:	fb02 f303 	mul.w	r3, r2, r3
 80055bc:	1af3      	subs	r3, r6, r3
 80055be:	00db      	lsls	r3, r3, #3
 80055c0:	3332      	adds	r3, #50	; 0x32
 80055c2:	4a41      	ldr	r2, [pc, #260]	; (80056c8 <UART_SetConfig+0x350>)
 80055c4:	fba2 2303 	umull	r2, r3, r2, r3
 80055c8:	095b      	lsrs	r3, r3, #5
 80055ca:	f003 0307 	and.w	r3, r3, #7
 80055ce:	442b      	add	r3, r5
 80055d0:	60a3      	str	r3, [r4, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 80055d2:	e0e7      	b.n	80057a4 <UART_SetConfig+0x42c>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a39      	ldr	r2, [pc, #228]	; (80056c0 <UART_SetConfig+0x348>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d004      	beq.n	80055e8 <UART_SetConfig+0x270>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a38      	ldr	r2, [pc, #224]	; (80056c4 <UART_SetConfig+0x34c>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d171      	bne.n	80056cc <UART_SetConfig+0x354>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681c      	ldr	r4, [r3, #0]
 80055ec:	f7fc ffae 	bl	800254c <HAL_RCC_GetPCLK2Freq>
 80055f0:	4602      	mov	r2, r0
 80055f2:	4613      	mov	r3, r2
 80055f4:	009b      	lsls	r3, r3, #2
 80055f6:	4413      	add	r3, r2
 80055f8:	009a      	lsls	r2, r3, #2
 80055fa:	441a      	add	r2, r3
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	009b      	lsls	r3, r3, #2
 8005602:	fbb2 f3f3 	udiv	r3, r2, r3
 8005606:	4a30      	ldr	r2, [pc, #192]	; (80056c8 <UART_SetConfig+0x350>)
 8005608:	fba2 2303 	umull	r2, r3, r2, r3
 800560c:	095b      	lsrs	r3, r3, #5
 800560e:	011d      	lsls	r5, r3, #4
 8005610:	f7fc ff9c 	bl	800254c <HAL_RCC_GetPCLK2Freq>
 8005614:	4602      	mov	r2, r0
 8005616:	4613      	mov	r3, r2
 8005618:	009b      	lsls	r3, r3, #2
 800561a:	4413      	add	r3, r2
 800561c:	009a      	lsls	r2, r3, #2
 800561e:	441a      	add	r2, r3
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	009b      	lsls	r3, r3, #2
 8005626:	fbb2 f6f3 	udiv	r6, r2, r3
 800562a:	f7fc ff8f 	bl	800254c <HAL_RCC_GetPCLK2Freq>
 800562e:	4602      	mov	r2, r0
 8005630:	4613      	mov	r3, r2
 8005632:	009b      	lsls	r3, r3, #2
 8005634:	4413      	add	r3, r2
 8005636:	009a      	lsls	r2, r3, #2
 8005638:	441a      	add	r2, r3
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	009b      	lsls	r3, r3, #2
 8005640:	fbb2 f3f3 	udiv	r3, r2, r3
 8005644:	4a20      	ldr	r2, [pc, #128]	; (80056c8 <UART_SetConfig+0x350>)
 8005646:	fba2 2303 	umull	r2, r3, r2, r3
 800564a:	095b      	lsrs	r3, r3, #5
 800564c:	2264      	movs	r2, #100	; 0x64
 800564e:	fb02 f303 	mul.w	r3, r2, r3
 8005652:	1af3      	subs	r3, r6, r3
 8005654:	011b      	lsls	r3, r3, #4
 8005656:	3332      	adds	r3, #50	; 0x32
 8005658:	4a1b      	ldr	r2, [pc, #108]	; (80056c8 <UART_SetConfig+0x350>)
 800565a:	fba2 2303 	umull	r2, r3, r2, r3
 800565e:	095b      	lsrs	r3, r3, #5
 8005660:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005664:	441d      	add	r5, r3
 8005666:	f7fc ff71 	bl	800254c <HAL_RCC_GetPCLK2Freq>
 800566a:	4602      	mov	r2, r0
 800566c:	4613      	mov	r3, r2
 800566e:	009b      	lsls	r3, r3, #2
 8005670:	4413      	add	r3, r2
 8005672:	009a      	lsls	r2, r3, #2
 8005674:	441a      	add	r2, r3
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	009b      	lsls	r3, r3, #2
 800567c:	fbb2 f6f3 	udiv	r6, r2, r3
 8005680:	f7fc ff64 	bl	800254c <HAL_RCC_GetPCLK2Freq>
 8005684:	4602      	mov	r2, r0
 8005686:	4613      	mov	r3, r2
 8005688:	009b      	lsls	r3, r3, #2
 800568a:	4413      	add	r3, r2
 800568c:	009a      	lsls	r2, r3, #2
 800568e:	441a      	add	r2, r3
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	009b      	lsls	r3, r3, #2
 8005696:	fbb2 f3f3 	udiv	r3, r2, r3
 800569a:	4a0b      	ldr	r2, [pc, #44]	; (80056c8 <UART_SetConfig+0x350>)
 800569c:	fba2 2303 	umull	r2, r3, r2, r3
 80056a0:	095b      	lsrs	r3, r3, #5
 80056a2:	2264      	movs	r2, #100	; 0x64
 80056a4:	fb02 f303 	mul.w	r3, r2, r3
 80056a8:	1af3      	subs	r3, r6, r3
 80056aa:	011b      	lsls	r3, r3, #4
 80056ac:	3332      	adds	r3, #50	; 0x32
 80056ae:	4a06      	ldr	r2, [pc, #24]	; (80056c8 <UART_SetConfig+0x350>)
 80056b0:	fba2 2303 	umull	r2, r3, r2, r3
 80056b4:	095b      	lsrs	r3, r3, #5
 80056b6:	f003 030f 	and.w	r3, r3, #15
 80056ba:	442b      	add	r3, r5
 80056bc:	60a3      	str	r3, [r4, #8]
 80056be:	e071      	b.n	80057a4 <UART_SetConfig+0x42c>
 80056c0:	40011000 	.word	0x40011000
 80056c4:	40011400 	.word	0x40011400
 80056c8:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681c      	ldr	r4, [r3, #0]
 80056d0:	f7fc ff28 	bl	8002524 <HAL_RCC_GetPCLK1Freq>
 80056d4:	4602      	mov	r2, r0
 80056d6:	4613      	mov	r3, r2
 80056d8:	009b      	lsls	r3, r3, #2
 80056da:	4413      	add	r3, r2
 80056dc:	009a      	lsls	r2, r3, #2
 80056de:	441a      	add	r2, r3
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	009b      	lsls	r3, r3, #2
 80056e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80056ea:	4a30      	ldr	r2, [pc, #192]	; (80057ac <UART_SetConfig+0x434>)
 80056ec:	fba2 2303 	umull	r2, r3, r2, r3
 80056f0:	095b      	lsrs	r3, r3, #5
 80056f2:	011d      	lsls	r5, r3, #4
 80056f4:	f7fc ff16 	bl	8002524 <HAL_RCC_GetPCLK1Freq>
 80056f8:	4602      	mov	r2, r0
 80056fa:	4613      	mov	r3, r2
 80056fc:	009b      	lsls	r3, r3, #2
 80056fe:	4413      	add	r3, r2
 8005700:	009a      	lsls	r2, r3, #2
 8005702:	441a      	add	r2, r3
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	009b      	lsls	r3, r3, #2
 800570a:	fbb2 f6f3 	udiv	r6, r2, r3
 800570e:	f7fc ff09 	bl	8002524 <HAL_RCC_GetPCLK1Freq>
 8005712:	4602      	mov	r2, r0
 8005714:	4613      	mov	r3, r2
 8005716:	009b      	lsls	r3, r3, #2
 8005718:	4413      	add	r3, r2
 800571a:	009a      	lsls	r2, r3, #2
 800571c:	441a      	add	r2, r3
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	009b      	lsls	r3, r3, #2
 8005724:	fbb2 f3f3 	udiv	r3, r2, r3
 8005728:	4a20      	ldr	r2, [pc, #128]	; (80057ac <UART_SetConfig+0x434>)
 800572a:	fba2 2303 	umull	r2, r3, r2, r3
 800572e:	095b      	lsrs	r3, r3, #5
 8005730:	2264      	movs	r2, #100	; 0x64
 8005732:	fb02 f303 	mul.w	r3, r2, r3
 8005736:	1af3      	subs	r3, r6, r3
 8005738:	011b      	lsls	r3, r3, #4
 800573a:	3332      	adds	r3, #50	; 0x32
 800573c:	4a1b      	ldr	r2, [pc, #108]	; (80057ac <UART_SetConfig+0x434>)
 800573e:	fba2 2303 	umull	r2, r3, r2, r3
 8005742:	095b      	lsrs	r3, r3, #5
 8005744:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005748:	441d      	add	r5, r3
 800574a:	f7fc feeb 	bl	8002524 <HAL_RCC_GetPCLK1Freq>
 800574e:	4602      	mov	r2, r0
 8005750:	4613      	mov	r3, r2
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	4413      	add	r3, r2
 8005756:	009a      	lsls	r2, r3, #2
 8005758:	441a      	add	r2, r3
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	009b      	lsls	r3, r3, #2
 8005760:	fbb2 f6f3 	udiv	r6, r2, r3
 8005764:	f7fc fede 	bl	8002524 <HAL_RCC_GetPCLK1Freq>
 8005768:	4602      	mov	r2, r0
 800576a:	4613      	mov	r3, r2
 800576c:	009b      	lsls	r3, r3, #2
 800576e:	4413      	add	r3, r2
 8005770:	009a      	lsls	r2, r3, #2
 8005772:	441a      	add	r2, r3
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	009b      	lsls	r3, r3, #2
 800577a:	fbb2 f3f3 	udiv	r3, r2, r3
 800577e:	4a0b      	ldr	r2, [pc, #44]	; (80057ac <UART_SetConfig+0x434>)
 8005780:	fba2 2303 	umull	r2, r3, r2, r3
 8005784:	095b      	lsrs	r3, r3, #5
 8005786:	2264      	movs	r2, #100	; 0x64
 8005788:	fb02 f303 	mul.w	r3, r2, r3
 800578c:	1af3      	subs	r3, r6, r3
 800578e:	011b      	lsls	r3, r3, #4
 8005790:	3332      	adds	r3, #50	; 0x32
 8005792:	4a06      	ldr	r2, [pc, #24]	; (80057ac <UART_SetConfig+0x434>)
 8005794:	fba2 2303 	umull	r2, r3, r2, r3
 8005798:	095b      	lsrs	r3, r3, #5
 800579a:	f003 030f 	and.w	r3, r3, #15
 800579e:	442b      	add	r3, r5
 80057a0:	60a3      	str	r3, [r4, #8]
}
 80057a2:	e7ff      	b.n	80057a4 <UART_SetConfig+0x42c>
 80057a4:	bf00      	nop
 80057a6:	3714      	adds	r7, #20
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057ac:	51eb851f 	.word	0x51eb851f

080057b0 <SDIO_Init>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80057b0:	b084      	sub	sp, #16
 80057b2:	b480      	push	{r7}
 80057b4:	b085      	sub	sp, #20
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	6078      	str	r0, [r7, #4]
 80057ba:	f107 001c 	add.w	r0, r7, #28
 80057be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0U;
 80057c2:	2300      	movs	r3, #0
 80057c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80057c6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80057c8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80057ca:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80057cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80057ce:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80057d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80057d2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80057d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80057d6:	431a      	orrs	r2, r3
             Init.ClockDiv
 80057d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80057da:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80057dc:	68fa      	ldr	r2, [r7, #12]
 80057de:	4313      	orrs	r3, r2
 80057e0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80057ea:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80057ee:	68fa      	ldr	r2, [r7, #12]
 80057f0:	431a      	orrs	r2, r3
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80057f6:	2300      	movs	r3, #0
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	3714      	adds	r7, #20
 80057fc:	46bd      	mov	sp, r7
 80057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005802:	b004      	add	sp, #16
 8005804:	4770      	bx	lr

08005806 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8005806:	b480      	push	{r7}
 8005808:	b083      	sub	sp, #12
 800580a:	af00      	add	r7, sp, #0
 800580c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8005814:	4618      	mov	r0, r3
 8005816:	370c      	adds	r7, #12
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr

08005820 <SDIO_WriteFIFO>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8005820:	b480      	push	{r7}
 8005822:	b083      	sub	sp, #12
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005834:	2300      	movs	r3, #0
}
 8005836:	4618      	mov	r0, r3
 8005838:	370c      	adds	r7, #12
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr

08005842 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8005842:	b480      	push	{r7}
 8005844:	b083      	sub	sp, #12
 8005846:	af00      	add	r7, sp, #0
 8005848:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2203      	movs	r2, #3
 800584e:	601a      	str	r2, [r3, #0]
  
  return HAL_OK;
 8005850:	2300      	movs	r3, #0
}
 8005852:	4618      	mov	r0, r3
 8005854:	370c      	adds	r7, #12
 8005856:	46bd      	mov	sp, r7
 8005858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585c:	4770      	bx	lr

0800585e <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800585e:	b480      	push	{r7}
 8005860:	b083      	sub	sp, #12
 8005862:	af00      	add	r7, sp, #0
 8005864:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f003 0303 	and.w	r3, r3, #3
}
 800586e:	4618      	mov	r0, r3
 8005870:	370c      	adds	r7, #12
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr

0800587a <SDIO_SendCommand>:
  * @param  Command pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800587a:	b480      	push	{r7}
 800587c:	b085      	sub	sp, #20
 800587e:	af00      	add	r7, sp, #0
 8005880:	6078      	str	r0, [r7, #4]
 8005882:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005884:	2300      	movs	r3, #0
 8005886:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005898:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800589e:	431a      	orrs	r2, r3
                       Command->CPSM);
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80058a4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80058a6:	68fa      	ldr	r2, [r7, #12]
 80058a8:	4313      	orrs	r3, r2
 80058aa:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	68db      	ldr	r3, [r3, #12]
 80058b0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80058b4:	f023 030f 	bic.w	r3, r3, #15
 80058b8:	68fa      	ldr	r2, [r7, #12]
 80058ba:	431a      	orrs	r2, r3
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80058c0:	2300      	movs	r3, #0
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3714      	adds	r7, #20
 80058c6:	46bd      	mov	sp, r7
 80058c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058cc:	4770      	bx	lr

080058ce <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80058ce:	b480      	push	{r7}
 80058d0:	b083      	sub	sp, #12
 80058d2:	af00      	add	r7, sp, #0
 80058d4:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	691b      	ldr	r3, [r3, #16]
 80058da:	b2db      	uxtb	r3, r3
}
 80058dc:	4618      	mov	r0, r3
 80058de:	370c      	adds	r7, #12
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr

080058e8 <SDIO_GetResponse>:
  *            @arg SDIO_RESP1: Response Register 3
  *            @arg SDIO_RESP1: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b085      	sub	sp, #20
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
 80058f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0U;
 80058f2:	2300      	movs	r3, #0
 80058f4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)&(SDIOx->RESP1) + Response;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	3314      	adds	r3, #20
 80058fa:	461a      	mov	r2, r3
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	4413      	add	r3, r2
 8005900:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
}  
 8005906:	4618      	mov	r0, r3
 8005908:	3714      	adds	r7, #20
 800590a:	46bd      	mov	sp, r7
 800590c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005910:	4770      	bx	lr

08005912 <SDIO_ConfigData>:
  * @param  Data  pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8005912:	b480      	push	{r7}
 8005914:	b085      	sub	sp, #20
 8005916:	af00      	add	r7, sp, #0
 8005918:	6078      	str	r0, [r7, #4]
 800591a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800591c:	2300      	movs	r3, #0
 800591e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	685a      	ldr	r2, [r3, #4]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005938:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800593e:	431a      	orrs	r2, r3
                       Data->DPSM);
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8005944:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005946:	68fa      	ldr	r2, [r7, #12]
 8005948:	4313      	orrs	r3, r2
 800594a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005950:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	431a      	orrs	r2, r3
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800595c:	2300      	movs	r3, #0

}
 800595e:	4618      	mov	r0, r3
 8005960:	3714      	adds	r7, #20
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr

0800596a <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800596a:	b580      	push	{r7, lr}
 800596c:	b088      	sub	sp, #32
 800596e:	af00      	add	r7, sp, #0
 8005970:	6078      	str	r0, [r7, #4]
 8005972:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8005974:	2300      	movs	r3, #0
 8005976:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800597c:	2310      	movs	r3, #16
 800597e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005980:	2340      	movs	r3, #64	; 0x40
 8005982:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005984:	2300      	movs	r3, #0
 8005986:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005988:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800598c:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800598e:	f107 0308 	add.w	r3, r7, #8
 8005992:	4619      	mov	r1, r3
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f7ff ff70 	bl	800587a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800599a:	f241 3288 	movw	r2, #5000	; 0x1388
 800599e:	2110      	movs	r1, #16
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f000 f9d3 	bl	8005d4c <SDMMC_GetCmdResp1>
 80059a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80059a8:	69fb      	ldr	r3, [r7, #28]
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3720      	adds	r7, #32
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}
	...

080059b4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b088      	sub	sp, #32
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80059bc:	2300      	movs	r3, #0
 80059be:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80059c0:	2300      	movs	r3, #0
 80059c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80059c4:	230c      	movs	r3, #12
 80059c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80059c8:	2340      	movs	r3, #64	; 0x40
 80059ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80059cc:	2300      	movs	r3, #0
 80059ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80059d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80059d4:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80059d6:	f107 0308 	add.w	r3, r7, #8
 80059da:	4619      	mov	r1, r3
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f7ff ff4c 	bl	800587a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, 100000000U);
 80059e2:	4a05      	ldr	r2, [pc, #20]	; (80059f8 <SDMMC_CmdStopTransfer+0x44>)
 80059e4:	210c      	movs	r1, #12
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f000 f9b0 	bl	8005d4c <SDMMC_GetCmdResp1>
 80059ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80059ee:	69fb      	ldr	r3, [r7, #28]
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	3720      	adds	r7, #32
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}
 80059f8:	05f5e100 	.word	0x05f5e100

080059fc <SDMMC_CmdSelDesel>:
  * @param  SDIOx Pointer to SDIO register base 
  * @param  addr Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b08a      	sub	sp, #40	; 0x28
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	60f8      	str	r0, [r7, #12]
 8005a04:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8005a08:	2300      	movs	r3, #0
 8005a0a:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8005a10:	2307      	movs	r3, #7
 8005a12:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005a14:	2340      	movs	r3, #64	; 0x40
 8005a16:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005a1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a20:	623b      	str	r3, [r7, #32]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005a22:	f107 0310 	add.w	r3, r7, #16
 8005a26:	4619      	mov	r1, r3
 8005a28:	68f8      	ldr	r0, [r7, #12]
 8005a2a:	f7ff ff26 	bl	800587a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8005a2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a32:	2107      	movs	r1, #7
 8005a34:	68f8      	ldr	r0, [r7, #12]
 8005a36:	f000 f989 	bl	8005d4c <SDMMC_GetCmdResp1>
 8005a3a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8005a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3728      	adds	r7, #40	; 0x28
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}

08005a46 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8005a46:	b580      	push	{r7, lr}
 8005a48:	b088      	sub	sp, #32
 8005a4a:	af00      	add	r7, sp, #0
 8005a4c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = 0U;
 8005a52:	2300      	movs	r3, #0
 8005a54:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8005a56:	2300      	movs	r3, #0
 8005a58:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005a62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a66:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005a68:	f107 0308 	add.w	r3, r7, #8
 8005a6c:	4619      	mov	r1, r3
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f7ff ff03 	bl	800587a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f000 f93f 	bl	8005cf8 <SDMMC_GetCmdError>
 8005a7a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005a7c:	69fb      	ldr	r3, [r7, #28]
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3720      	adds	r7, #32
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}

08005a86 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8005a86:	b580      	push	{r7, lr}
 8005a88:	b088      	sub	sp, #32
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	61fb      	str	r3, [r7, #28]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8005a92:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8005a96:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8005a98:	2308      	movs	r3, #8
 8005a9a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005a9c:	2340      	movs	r3, #64	; 0x40
 8005a9e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005aa4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005aa8:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005aaa:	f107 0308 	add.w	r3, r7, #8
 8005aae:	4619      	mov	r1, r3
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f7ff fee2 	bl	800587a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f000 fb10 	bl	80060dc <SDMMC_GetCmdResp7>
 8005abc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005abe:	69fb      	ldr	r3, [r7, #28]
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3720      	adds	r7, #32
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}

08005ac8 <SDMMC_CmdAppCommand>:
  *         and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b088      	sub	sp, #32
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8005ada:	2337      	movs	r3, #55	; 0x37
 8005adc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005ade:	2340      	movs	r3, #64	; 0x40
 8005ae0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005ae6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005aea:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005aec:	f107 0308 	add.w	r3, r7, #8
 8005af0:	4619      	mov	r1, r3
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f7ff fec1 	bl	800587a <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8005af8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005afc:	2137      	movs	r1, #55	; 0x37
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f000 f924 	bl	8005d4c <SDMMC_GetCmdResp1>
 8005b04:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005b06:	69fb      	ldr	r3, [r7, #28]
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3720      	adds	r7, #32
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}

08005b10 <SDMMC_CmdAppOperCommand>:
  *         condition register (OCR)
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t SdType)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b088      	sub	sp, #32
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
 8005b18:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005b24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b28:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8005b2a:	2329      	movs	r3, #41	; 0x29
 8005b2c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005b2e:	2340      	movs	r3, #64	; 0x40
 8005b30:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005b32:	2300      	movs	r3, #0
 8005b34:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005b36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b3a:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005b3c:	f107 0308 	add.w	r3, r7, #8
 8005b40:	4619      	mov	r1, r3
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f7ff fe99 	bl	800587a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	f000 fa25 	bl	8005f98 <SDMMC_GetCmdResp3>
 8005b4e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005b50:	69fb      	ldr	r3, [r7, #28]
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3720      	adds	r7, #32
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}

08005b5a <SDMMC_CmdBusWidth>:
  * @brief  Send the Bus Width command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8005b5a:	b580      	push	{r7, lr}
 8005b5c:	b088      	sub	sp, #32
 8005b5e:	af00      	add	r7, sp, #0
 8005b60:	6078      	str	r0, [r7, #4]
 8005b62:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8005b64:	2300      	movs	r3, #0
 8005b66:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8005b6c:	2306      	movs	r3, #6
 8005b6e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005b70:	2340      	movs	r3, #64	; 0x40
 8005b72:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005b74:	2300      	movs	r3, #0
 8005b76:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005b78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b7c:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005b7e:	f107 0308 	add.w	r3, r7, #8
 8005b82:	4619      	mov	r1, r3
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	f7ff fe78 	bl	800587a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8005b8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b8e:	2106      	movs	r1, #6
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	f000 f8db 	bl	8005d4c <SDMMC_GetCmdResp1>
 8005b96:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005b98:	69fb      	ldr	r3, [r7, #28]
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3720      	adds	r7, #32
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}

08005ba2 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8005ba2:	b580      	push	{r7, lr}
 8005ba4:	b088      	sub	sp, #32
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8005baa:	2300      	movs	r3, #0
 8005bac:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8005bb2:	2333      	movs	r3, #51	; 0x33
 8005bb4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005bb6:	2340      	movs	r3, #64	; 0x40
 8005bb8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005bbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005bc2:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005bc4:	f107 0308 	add.w	r3, r7, #8
 8005bc8:	4619      	mov	r1, r3
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f7ff fe55 	bl	800587a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8005bd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bd4:	2133      	movs	r1, #51	; 0x33
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f000 f8b8 	bl	8005d4c <SDMMC_GetCmdResp1>
 8005bdc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005bde:	69fb      	ldr	r3, [r7, #28]
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	3720      	adds	r7, #32
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}

08005be8 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b088      	sub	sp, #32
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8005bf8:	2302      	movs	r3, #2
 8005bfa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8005bfc:	23c0      	movs	r3, #192	; 0xc0
 8005bfe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005c00:	2300      	movs	r3, #0
 8005c02:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005c04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c08:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005c0a:	f107 0308 	add.w	r3, r7, #8
 8005c0e:	4619      	mov	r1, r3
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f7ff fe32 	bl	800587a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f000 f97e 	bl	8005f18 <SDMMC_GetCmdResp2>
 8005c1c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005c1e:	69fb      	ldr	r3, [r7, #28]
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3720      	adds	r7, #32
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}

08005c28 <SDMMC_CmdSendCSD>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b088      	sub	sp, #32
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8005c32:	2300      	movs	r3, #0
 8005c34:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8005c3a:	2309      	movs	r3, #9
 8005c3c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8005c3e:	23c0      	movs	r3, #192	; 0xc0
 8005c40:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005c42:	2300      	movs	r3, #0
 8005c44:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005c46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c4a:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005c4c:	f107 0308 	add.w	r3, r7, #8
 8005c50:	4619      	mov	r1, r3
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f7ff fe11 	bl	800587a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f000 f95d 	bl	8005f18 <SDMMC_GetCmdResp2>
 8005c5e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005c60:	69fb      	ldr	r3, [r7, #28]
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3720      	adds	r7, #32
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}

08005c6a <SDMMC_CmdSetRelAdd>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8005c6a:	b580      	push	{r7, lr}
 8005c6c:	b088      	sub	sp, #32
 8005c6e:	af00      	add	r7, sp, #0
 8005c70:	6078      	str	r0, [r7, #4]
 8005c72:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8005c74:	2300      	movs	r3, #0
 8005c76:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8005c78:	2300      	movs	r3, #0
 8005c7a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8005c7c:	2303      	movs	r3, #3
 8005c7e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005c80:	2340      	movs	r3, #64	; 0x40
 8005c82:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005c84:	2300      	movs	r3, #0
 8005c86:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005c88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c8c:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005c8e:	f107 0308 	add.w	r3, r7, #8
 8005c92:	4619      	mov	r1, r3
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	f7ff fdf0 	bl	800587a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8005c9a:	683a      	ldr	r2, [r7, #0]
 8005c9c:	2103      	movs	r1, #3
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f000 f9ae 	bl	8006000 <SDMMC_GetCmdResp6>
 8005ca4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005ca6:	69fb      	ldr	r3, [r7, #28]
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3720      	adds	r7, #32
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}

08005cb0 <SDMMC_CmdSendStatus>:
  * @brief  Send the Status command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b088      	sub	sp, #32
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
 8005cb8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8005cc2:	230d      	movs	r3, #13
 8005cc4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005cc6:	2340      	movs	r3, #64	; 0x40
 8005cc8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005cce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005cd2:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005cd4:	f107 0308 	add.w	r3, r7, #8
 8005cd8:	4619      	mov	r1, r3
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f7ff fdcd 	bl	800587a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8005ce0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ce4:	210d      	movs	r1, #13
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f000 f830 	bl	8005d4c <SDMMC_GetCmdResp1>
 8005cec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005cee:	69fb      	ldr	r3, [r7, #28]
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3720      	adds	r7, #32
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}

08005cf8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8005cf8:	b490      	push	{r4, r7}
 8005cfa:	b082      	sub	sp, #8
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005d00:	4b10      	ldr	r3, [pc, #64]	; (8005d44 <SDMMC_GetCmdError+0x4c>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a10      	ldr	r2, [pc, #64]	; (8005d48 <SDMMC_GetCmdError+0x50>)
 8005d06:	fba2 2303 	umull	r2, r3, r2, r3
 8005d0a:	0a5b      	lsrs	r3, r3, #9
 8005d0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d10:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8005d14:	4623      	mov	r3, r4
 8005d16:	1e5c      	subs	r4, r3, #1
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d102      	bne.n	8005d22 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005d1c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005d20:	e00a      	b.n	8005d38 <SDMMC_GetCmdError+0x40>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d0f2      	beq.n	8005d14 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005d34:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8005d36:	2300      	movs	r3, #0
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3708      	adds	r7, #8
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bc90      	pop	{r4, r7}
 8005d40:	4770      	bx	lr
 8005d42:	bf00      	nop
 8005d44:	20000008 	.word	0x20000008
 8005d48:	10624dd3 	.word	0x10624dd3

08005d4c <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8005d4c:	b590      	push	{r4, r7, lr}
 8005d4e:	b087      	sub	sp, #28
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	60f8      	str	r0, [r7, #12]
 8005d54:	460b      	mov	r3, r1
 8005d56:	607a      	str	r2, [r7, #4]
 8005d58:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005d5a:	4b6c      	ldr	r3, [pc, #432]	; (8005f0c <SDMMC_GetCmdResp1+0x1c0>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a6c      	ldr	r2, [pc, #432]	; (8005f10 <SDMMC_GetCmdResp1+0x1c4>)
 8005d60:	fba2 2303 	umull	r2, r3, r2, r3
 8005d64:	0a5b      	lsrs	r3, r3, #9
 8005d66:	687a      	ldr	r2, [r7, #4]
 8005d68:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8005d6c:	4623      	mov	r3, r4
 8005d6e:	1e5c      	subs	r4, r3, #1
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d102      	bne.n	8005d7a <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005d74:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005d78:	e0c3      	b.n	8005f02 <SDMMC_GetCmdResp1+0x1b6>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d7e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d0f2      	beq.n	8005d6c <SDMMC_GetCmdResp1+0x20>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d8a:	f003 0304 	and.w	r3, r3, #4
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d004      	beq.n	8005d9c <SDMMC_GetCmdResp1+0x50>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2204      	movs	r2, #4
 8005d96:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005d98:	2304      	movs	r3, #4
 8005d9a:	e0b2      	b.n	8005f02 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005da0:	f003 0301 	and.w	r3, r3, #1
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d004      	beq.n	8005db2 <SDMMC_GetCmdResp1+0x66>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2201      	movs	r2, #1
 8005dac:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005dae:	2301      	movs	r3, #1
 8005db0:	e0a7      	b.n	8005f02 <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005db2:	68f8      	ldr	r0, [r7, #12]
 8005db4:	f7ff fd8b 	bl	80058ce <SDIO_GetCommandResponse>
 8005db8:	4603      	mov	r3, r0
 8005dba:	461a      	mov	r2, r3
 8005dbc:	7afb      	ldrb	r3, [r7, #11]
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d001      	beq.n	8005dc6 <SDMMC_GetCmdResp1+0x7a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	e09d      	b.n	8005f02 <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005dcc:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005dce:	2100      	movs	r1, #0
 8005dd0:	68f8      	ldr	r0, [r7, #12]
 8005dd2:	f7ff fd89 	bl	80058e8 <SDIO_GetResponse>
 8005dd6:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8005dd8:	697a      	ldr	r2, [r7, #20]
 8005dda:	4b4e      	ldr	r3, [pc, #312]	; (8005f14 <SDMMC_GetCmdResp1+0x1c8>)
 8005ddc:	4013      	ands	r3, r2
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d101      	bne.n	8005de6 <SDMMC_GetCmdResp1+0x9a>
  {
    return SDMMC_ERROR_NONE;
 8005de2:	2300      	movs	r3, #0
 8005de4:	e08d      	b.n	8005f02 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	da02      	bge.n	8005df2 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8005dec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005df0:	e087      	b.n	8005f02 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d001      	beq.n	8005e00 <SDMMC_GetCmdResp1+0xb4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8005dfc:	2340      	movs	r3, #64	; 0x40
 8005dfe:	e080      	b.n	8005f02 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d001      	beq.n	8005e0e <SDMMC_GetCmdResp1+0xc2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8005e0a:	2380      	movs	r3, #128	; 0x80
 8005e0c:	e079      	b.n	8005f02 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d002      	beq.n	8005e1e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8005e18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005e1c:	e071      	b.n	8005f02 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d002      	beq.n	8005e2e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8005e28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e2c:	e069      	b.n	8005f02 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d002      	beq.n	8005e3e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8005e38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e3c:	e061      	b.n	8005f02 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d002      	beq.n	8005e4e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8005e48:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005e4c:	e059      	b.n	8005f02 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d002      	beq.n	8005e5e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005e58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005e5c:	e051      	b.n	8005f02 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d002      	beq.n	8005e6e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005e68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005e6c:	e049      	b.n	8005f02 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d002      	beq.n	8005e7e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8005e78:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005e7c:	e041      	b.n	8005f02 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d002      	beq.n	8005e8e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CC_ERR;
 8005e88:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e8c:	e039      	b.n	8005f02 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d002      	beq.n	8005e9e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8005e98:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005e9c:	e031      	b.n	8005f02 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d002      	beq.n	8005eae <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8005ea8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005eac:	e029      	b.n	8005f02 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d002      	beq.n	8005ebe <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8005eb8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005ebc:	e021      	b.n	8005f02 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d002      	beq.n	8005ece <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8005ec8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005ecc:	e019      	b.n	8005f02 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d002      	beq.n	8005ede <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005ed8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005edc:	e011      	b.n	8005f02 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d002      	beq.n	8005eee <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8005ee8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005eec:	e009      	b.n	8005f02 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	f003 0308 	and.w	r3, r3, #8
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d002      	beq.n	8005efe <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8005ef8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005efc:	e001      	b.n	8005f02 <SDMMC_GetCmdResp1+0x1b6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005efe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	371c      	adds	r7, #28
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd90      	pop	{r4, r7, pc}
 8005f0a:	bf00      	nop
 8005f0c:	20000008 	.word	0x20000008
 8005f10:	10624dd3 	.word	0x10624dd3
 8005f14:	fdffe008 	.word	0xfdffe008

08005f18 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8005f18:	b490      	push	{r4, r7}
 8005f1a:	b082      	sub	sp, #8
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005f20:	4b1b      	ldr	r3, [pc, #108]	; (8005f90 <SDMMC_GetCmdResp2+0x78>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a1b      	ldr	r2, [pc, #108]	; (8005f94 <SDMMC_GetCmdResp2+0x7c>)
 8005f26:	fba2 2303 	umull	r2, r3, r2, r3
 8005f2a:	0a5b      	lsrs	r3, r3, #9
 8005f2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f30:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8005f34:	4623      	mov	r3, r4
 8005f36:	1e5c      	subs	r4, r3, #1
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d102      	bne.n	8005f42 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005f3c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005f40:	e020      	b.n	8005f84 <SDMMC_GetCmdResp2+0x6c>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f46:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d0f2      	beq.n	8005f34 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f52:	f003 0304 	and.w	r3, r3, #4
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d004      	beq.n	8005f64 <SDMMC_GetCmdResp2+0x4c>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2204      	movs	r2, #4
 8005f5e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005f60:	2304      	movs	r3, #4
 8005f62:	e00f      	b.n	8005f84 <SDMMC_GetCmdResp2+0x6c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f68:	f003 0301 	and.w	r3, r3, #1
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d004      	beq.n	8005f7a <SDMMC_GetCmdResp2+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2201      	movs	r2, #1
 8005f74:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005f76:	2301      	movs	r3, #1
 8005f78:	e004      	b.n	8005f84 <SDMMC_GetCmdResp2+0x6c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005f80:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8005f82:	2300      	movs	r3, #0
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3708      	adds	r7, #8
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bc90      	pop	{r4, r7}
 8005f8c:	4770      	bx	lr
 8005f8e:	bf00      	nop
 8005f90:	20000008 	.word	0x20000008
 8005f94:	10624dd3 	.word	0x10624dd3

08005f98 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8005f98:	b490      	push	{r4, r7}
 8005f9a:	b082      	sub	sp, #8
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005fa0:	4b15      	ldr	r3, [pc, #84]	; (8005ff8 <SDMMC_GetCmdResp3+0x60>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a15      	ldr	r2, [pc, #84]	; (8005ffc <SDMMC_GetCmdResp3+0x64>)
 8005fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8005faa:	0a5b      	lsrs	r3, r3, #9
 8005fac:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fb0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8005fb4:	4623      	mov	r3, r4
 8005fb6:	1e5c      	subs	r4, r3, #1
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d102      	bne.n	8005fc2 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005fbc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005fc0:	e015      	b.n	8005fee <SDMMC_GetCmdResp3+0x56>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fc6:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d0f2      	beq.n	8005fb4 <SDMMC_GetCmdResp3+0x1c>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fd2:	f003 0304 	and.w	r3, r3, #4
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d004      	beq.n	8005fe4 <SDMMC_GetCmdResp3+0x4c>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2204      	movs	r2, #4
 8005fde:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005fe0:	2304      	movs	r3, #4
 8005fe2:	e004      	b.n	8005fee <SDMMC_GetCmdResp3+0x56>
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005fea:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005fec:	2300      	movs	r3, #0
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3708      	adds	r7, #8
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bc90      	pop	{r4, r7}
 8005ff6:	4770      	bx	lr
 8005ff8:	20000008 	.word	0x20000008
 8005ffc:	10624dd3 	.word	0x10624dd3

08006000 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8006000:	b590      	push	{r4, r7, lr}
 8006002:	b087      	sub	sp, #28
 8006004:	af00      	add	r7, sp, #0
 8006006:	60f8      	str	r0, [r7, #12]
 8006008:	460b      	mov	r3, r1
 800600a:	607a      	str	r2, [r7, #4]
 800600c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800600e:	4b31      	ldr	r3, [pc, #196]	; (80060d4 <SDMMC_GetCmdResp6+0xd4>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a31      	ldr	r2, [pc, #196]	; (80060d8 <SDMMC_GetCmdResp6+0xd8>)
 8006014:	fba2 2303 	umull	r2, r3, r2, r3
 8006018:	0a5b      	lsrs	r3, r3, #9
 800601a:	f241 3288 	movw	r2, #5000	; 0x1388
 800601e:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8006022:	4623      	mov	r3, r4
 8006024:	1e5c      	subs	r4, r3, #1
 8006026:	2b00      	cmp	r3, #0
 8006028:	d102      	bne.n	8006030 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800602a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800602e:	e04c      	b.n	80060ca <SDMMC_GetCmdResp6+0xca>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006034:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8006038:	2b00      	cmp	r3, #0
 800603a:	d0f2      	beq.n	8006022 <SDMMC_GetCmdResp6+0x22>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006040:	f003 0304 	and.w	r3, r3, #4
 8006044:	2b00      	cmp	r3, #0
 8006046:	d004      	beq.n	8006052 <SDMMC_GetCmdResp6+0x52>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2204      	movs	r2, #4
 800604c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800604e:	2304      	movs	r3, #4
 8006050:	e03b      	b.n	80060ca <SDMMC_GetCmdResp6+0xca>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006056:	f003 0301 	and.w	r3, r3, #1
 800605a:	2b00      	cmp	r3, #0
 800605c:	d004      	beq.n	8006068 <SDMMC_GetCmdResp6+0x68>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2201      	movs	r2, #1
 8006062:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006064:	2301      	movs	r3, #1
 8006066:	e030      	b.n	80060ca <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8006068:	68f8      	ldr	r0, [r7, #12]
 800606a:	f7ff fc30 	bl	80058ce <SDIO_GetCommandResponse>
 800606e:	4603      	mov	r3, r0
 8006070:	461a      	mov	r2, r3
 8006072:	7afb      	ldrb	r3, [r7, #11]
 8006074:	4293      	cmp	r3, r2
 8006076:	d001      	beq.n	800607c <SDMMC_GetCmdResp6+0x7c>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006078:	2301      	movs	r3, #1
 800607a:	e026      	b.n	80060ca <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8006082:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8006084:	2100      	movs	r1, #0
 8006086:	68f8      	ldr	r0, [r7, #12]
 8006088:	f7ff fc2e 	bl	80058e8 <SDIO_GetResponse>
 800608c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8006094:	2b00      	cmp	r3, #0
 8006096:	d106      	bne.n	80060a6 <SDMMC_GetCmdResp6+0xa6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	0c1b      	lsrs	r3, r3, #16
 800609c:	b29a      	uxth	r2, r3
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80060a2:	2300      	movs	r3, #0
 80060a4:	e011      	b.n	80060ca <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d002      	beq.n	80060b6 <SDMMC_GetCmdResp6+0xb6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80060b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80060b4:	e009      	b.n	80060ca <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d002      	beq.n	80060c6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80060c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80060c4:	e001      	b.n	80060ca <SDMMC_GetCmdResp6+0xca>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80060c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	371c      	adds	r7, #28
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd90      	pop	{r4, r7, pc}
 80060d2:	bf00      	nop
 80060d4:	20000008 	.word	0x20000008
 80060d8:	10624dd3 	.word	0x10624dd3

080060dc <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80060dc:	b490      	push	{r4, r7}
 80060de:	b082      	sub	sp, #8
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80060e4:	4b18      	ldr	r3, [pc, #96]	; (8006148 <SDMMC_GetCmdResp7+0x6c>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a18      	ldr	r2, [pc, #96]	; (800614c <SDMMC_GetCmdResp7+0x70>)
 80060ea:	fba2 2303 	umull	r2, r3, r2, r3
 80060ee:	0a5b      	lsrs	r3, r3, #9
 80060f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80060f4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80060f8:	4623      	mov	r3, r4
 80060fa:	1e5c      	subs	r4, r3, #1
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d102      	bne.n	8006106 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006100:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006104:	e01a      	b.n	800613c <SDMMC_GetCmdResp7+0x60>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800610a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800610e:	2b00      	cmp	r3, #0
 8006110:	d0f2      	beq.n	80060f8 <SDMMC_GetCmdResp7+0x1c>

  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006116:	f003 0304 	and.w	r3, r3, #4
 800611a:	2b00      	cmp	r3, #0
 800611c:	d004      	beq.n	8006128 <SDMMC_GetCmdResp7+0x4c>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2240      	movs	r2, #64	; 0x40
 8006122:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006124:	2304      	movs	r3, #4
 8006126:	e009      	b.n	800613c <SDMMC_GetCmdResp7+0x60>
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800612c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006130:	2b00      	cmp	r3, #0
 8006132:	d002      	beq.n	800613a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2240      	movs	r2, #64	; 0x40
 8006138:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800613a:	2300      	movs	r3, #0
  
}
 800613c:	4618      	mov	r0, r3
 800613e:	3708      	adds	r7, #8
 8006140:	46bd      	mov	sp, r7
 8006142:	bc90      	pop	{r4, r7}
 8006144:	4770      	bx	lr
 8006146:	bf00      	nop
 8006148:	20000008 	.word	0x20000008
 800614c:	10624dd3 	.word	0x10624dd3

08006150 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b084      	sub	sp, #16
 8006154:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8006156:	463b      	mov	r3, r7
 8006158:	2200      	movs	r2, #0
 800615a:	601a      	str	r2, [r3, #0]
 800615c:	605a      	str	r2, [r3, #4]
 800615e:	609a      	str	r2, [r3, #8]
 8006160:	60da      	str	r2, [r3, #12]

  /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8006162:	4b53      	ldr	r3, [pc, #332]	; (80062b0 <MX_ADC1_Init+0x160>)
 8006164:	4a53      	ldr	r2, [pc, #332]	; (80062b4 <MX_ADC1_Init+0x164>)
 8006166:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8006168:	4b51      	ldr	r3, [pc, #324]	; (80062b0 <MX_ADC1_Init+0x160>)
 800616a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800616e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8006170:	4b4f      	ldr	r3, [pc, #316]	; (80062b0 <MX_ADC1_Init+0x160>)
 8006172:	2200      	movs	r2, #0
 8006174:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8006176:	4b4e      	ldr	r3, [pc, #312]	; (80062b0 <MX_ADC1_Init+0x160>)
 8006178:	2201      	movs	r2, #1
 800617a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800617c:	4b4c      	ldr	r3, [pc, #304]	; (80062b0 <MX_ADC1_Init+0x160>)
 800617e:	2200      	movs	r2, #0
 8006180:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8006182:	4b4b      	ldr	r3, [pc, #300]	; (80062b0 <MX_ADC1_Init+0x160>)
 8006184:	2200      	movs	r2, #0
 8006186:	621a      	str	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8006188:	4b49      	ldr	r3, [pc, #292]	; (80062b0 <MX_ADC1_Init+0x160>)
 800618a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800618e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8006190:	4b47      	ldr	r3, [pc, #284]	; (80062b0 <MX_ADC1_Init+0x160>)
 8006192:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8006196:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006198:	4b45      	ldr	r3, [pc, #276]	; (80062b0 <MX_ADC1_Init+0x160>)
 800619a:	2200      	movs	r2, #0
 800619c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 8;
 800619e:	4b44      	ldr	r3, [pc, #272]	; (80062b0 <MX_ADC1_Init+0x160>)
 80061a0:	2208      	movs	r2, #8
 80061a2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80061a4:	4b42      	ldr	r3, [pc, #264]	; (80062b0 <MX_ADC1_Init+0x160>)
 80061a6:	2201      	movs	r2, #1
 80061a8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80061aa:	4b41      	ldr	r3, [pc, #260]	; (80062b0 <MX_ADC1_Init+0x160>)
 80061ac:	2200      	movs	r2, #0
 80061ae:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80061b0:	483f      	ldr	r0, [pc, #252]	; (80062b0 <MX_ADC1_Init+0x160>)
 80061b2:	f7fa fa99 	bl	80006e8 <HAL_ADC_Init>
 80061b6:	4603      	mov	r3, r0
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d001      	beq.n	80061c0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80061bc:	f000 fd98 	bl	8006cf0 <Error_Handler>
  }
  /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80061c0:	2300      	movs	r3, #0
 80061c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80061c4:	2301      	movs	r3, #1
 80061c6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 80061c8:	2306      	movs	r3, #6
 80061ca:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80061cc:	463b      	mov	r3, r7
 80061ce:	4619      	mov	r1, r3
 80061d0:	4837      	ldr	r0, [pc, #220]	; (80062b0 <MX_ADC1_Init+0x160>)
 80061d2:	f7fa fcfd 	bl	8000bd0 <HAL_ADC_ConfigChannel>
 80061d6:	4603      	mov	r3, r0
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d001      	beq.n	80061e0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80061dc:	f000 fd88 	bl	8006cf0 <Error_Handler>
  }
  /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80061e0:	2301      	movs	r3, #1
 80061e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80061e4:	2302      	movs	r3, #2
 80061e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80061e8:	463b      	mov	r3, r7
 80061ea:	4619      	mov	r1, r3
 80061ec:	4830      	ldr	r0, [pc, #192]	; (80062b0 <MX_ADC1_Init+0x160>)
 80061ee:	f7fa fcef 	bl	8000bd0 <HAL_ADC_ConfigChannel>
 80061f2:	4603      	mov	r3, r0
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d001      	beq.n	80061fc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80061f8:	f000 fd7a 	bl	8006cf0 <Error_Handler>
  }
  /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80061fc:	2302      	movs	r3, #2
 80061fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8006200:	2303      	movs	r3, #3
 8006202:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006204:	463b      	mov	r3, r7
 8006206:	4619      	mov	r1, r3
 8006208:	4829      	ldr	r0, [pc, #164]	; (80062b0 <MX_ADC1_Init+0x160>)
 800620a:	f7fa fce1 	bl	8000bd0 <HAL_ADC_ConfigChannel>
 800620e:	4603      	mov	r3, r0
 8006210:	2b00      	cmp	r3, #0
 8006212:	d001      	beq.n	8006218 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8006214:	f000 fd6c 	bl	8006cf0 <Error_Handler>
  }
  /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8006218:	2303      	movs	r3, #3
 800621a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800621c:	2304      	movs	r3, #4
 800621e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006220:	463b      	mov	r3, r7
 8006222:	4619      	mov	r1, r3
 8006224:	4822      	ldr	r0, [pc, #136]	; (80062b0 <MX_ADC1_Init+0x160>)
 8006226:	f7fa fcd3 	bl	8000bd0 <HAL_ADC_ConfigChannel>
 800622a:	4603      	mov	r3, r0
 800622c:	2b00      	cmp	r3, #0
 800622e:	d001      	beq.n	8006234 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8006230:	f000 fd5e 	bl	8006cf0 <Error_Handler>
  }
  /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8006234:	2309      	movs	r3, #9
 8006236:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8006238:	2305      	movs	r3, #5
 800623a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800623c:	463b      	mov	r3, r7
 800623e:	4619      	mov	r1, r3
 8006240:	481b      	ldr	r0, [pc, #108]	; (80062b0 <MX_ADC1_Init+0x160>)
 8006242:	f7fa fcc5 	bl	8000bd0 <HAL_ADC_ConfigChannel>
 8006246:	4603      	mov	r3, r0
 8006248:	2b00      	cmp	r3, #0
 800624a:	d001      	beq.n	8006250 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 800624c:	f000 fd50 	bl	8006cf0 <Error_Handler>
  }
  /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8006250:	2306      	movs	r3, #6
 8006252:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8006254:	2306      	movs	r3, #6
 8006256:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8006258:	2300      	movs	r3, #0
 800625a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800625c:	463b      	mov	r3, r7
 800625e:	4619      	mov	r1, r3
 8006260:	4813      	ldr	r0, [pc, #76]	; (80062b0 <MX_ADC1_Init+0x160>)
 8006262:	f7fa fcb5 	bl	8000bd0 <HAL_ADC_ConfigChannel>
 8006266:	4603      	mov	r3, r0
 8006268:	2b00      	cmp	r3, #0
 800626a:	d001      	beq.n	8006270 <MX_ADC1_Init+0x120>
  {
    Error_Handler();
 800626c:	f000 fd40 	bl	8006cf0 <Error_Handler>
  }
  /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8006270:	2307      	movs	r3, #7
 8006272:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8006274:	2307      	movs	r3, #7
 8006276:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006278:	463b      	mov	r3, r7
 800627a:	4619      	mov	r1, r3
 800627c:	480c      	ldr	r0, [pc, #48]	; (80062b0 <MX_ADC1_Init+0x160>)
 800627e:	f7fa fca7 	bl	8000bd0 <HAL_ADC_ConfigChannel>
 8006282:	4603      	mov	r3, r0
 8006284:	2b00      	cmp	r3, #0
 8006286:	d001      	beq.n	800628c <MX_ADC1_Init+0x13c>
  {
    Error_Handler();
 8006288:	f000 fd32 	bl	8006cf0 <Error_Handler>
  }
  /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800628c:	2311      	movs	r3, #17
 800628e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8006290:	2308      	movs	r3, #8
 8006292:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006294:	463b      	mov	r3, r7
 8006296:	4619      	mov	r1, r3
 8006298:	4805      	ldr	r0, [pc, #20]	; (80062b0 <MX_ADC1_Init+0x160>)
 800629a:	f7fa fc99 	bl	8000bd0 <HAL_ADC_ConfigChannel>
 800629e:	4603      	mov	r3, r0
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d001      	beq.n	80062a8 <MX_ADC1_Init+0x158>
  {
    Error_Handler();
 80062a4:	f000 fd24 	bl	8006cf0 <Error_Handler>
  }

}
 80062a8:	bf00      	nop
 80062aa:	3710      	adds	r7, #16
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}
 80062b0:	200000a8 	.word	0x200000a8
 80062b4:	40012000 	.word	0x40012000

080062b8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b08c      	sub	sp, #48	; 0x30
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80062c0:	f107 031c 	add.w	r3, r7, #28
 80062c4:	2200      	movs	r2, #0
 80062c6:	601a      	str	r2, [r3, #0]
 80062c8:	605a      	str	r2, [r3, #4]
 80062ca:	609a      	str	r2, [r3, #8]
 80062cc:	60da      	str	r2, [r3, #12]
 80062ce:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a4e      	ldr	r2, [pc, #312]	; (8006410 <HAL_ADC_MspInit+0x158>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	f040 8095 	bne.w	8006406 <HAL_ADC_MspInit+0x14e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80062dc:	2300      	movs	r3, #0
 80062de:	61bb      	str	r3, [r7, #24]
 80062e0:	4a4c      	ldr	r2, [pc, #304]	; (8006414 <HAL_ADC_MspInit+0x15c>)
 80062e2:	4b4c      	ldr	r3, [pc, #304]	; (8006414 <HAL_ADC_MspInit+0x15c>)
 80062e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062ea:	6453      	str	r3, [r2, #68]	; 0x44
 80062ec:	4b49      	ldr	r3, [pc, #292]	; (8006414 <HAL_ADC_MspInit+0x15c>)
 80062ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062f4:	61bb      	str	r3, [r7, #24]
 80062f6:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80062f8:	2300      	movs	r3, #0
 80062fa:	617b      	str	r3, [r7, #20]
 80062fc:	4a45      	ldr	r2, [pc, #276]	; (8006414 <HAL_ADC_MspInit+0x15c>)
 80062fe:	4b45      	ldr	r3, [pc, #276]	; (8006414 <HAL_ADC_MspInit+0x15c>)
 8006300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006302:	f043 0301 	orr.w	r3, r3, #1
 8006306:	6313      	str	r3, [r2, #48]	; 0x30
 8006308:	4b42      	ldr	r3, [pc, #264]	; (8006414 <HAL_ADC_MspInit+0x15c>)
 800630a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800630c:	f003 0301 	and.w	r3, r3, #1
 8006310:	617b      	str	r3, [r7, #20]
 8006312:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006314:	2300      	movs	r3, #0
 8006316:	613b      	str	r3, [r7, #16]
 8006318:	4a3e      	ldr	r2, [pc, #248]	; (8006414 <HAL_ADC_MspInit+0x15c>)
 800631a:	4b3e      	ldr	r3, [pc, #248]	; (8006414 <HAL_ADC_MspInit+0x15c>)
 800631c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800631e:	f043 0304 	orr.w	r3, r3, #4
 8006322:	6313      	str	r3, [r2, #48]	; 0x30
 8006324:	4b3b      	ldr	r3, [pc, #236]	; (8006414 <HAL_ADC_MspInit+0x15c>)
 8006326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006328:	f003 0304 	and.w	r3, r3, #4
 800632c:	613b      	str	r3, [r7, #16]
 800632e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006330:	2300      	movs	r3, #0
 8006332:	60fb      	str	r3, [r7, #12]
 8006334:	4a37      	ldr	r2, [pc, #220]	; (8006414 <HAL_ADC_MspInit+0x15c>)
 8006336:	4b37      	ldr	r3, [pc, #220]	; (8006414 <HAL_ADC_MspInit+0x15c>)
 8006338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800633a:	f043 0302 	orr.w	r3, r3, #2
 800633e:	6313      	str	r3, [r2, #48]	; 0x30
 8006340:	4b34      	ldr	r3, [pc, #208]	; (8006414 <HAL_ADC_MspInit+0x15c>)
 8006342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006344:	f003 0302 	and.w	r3, r3, #2
 8006348:	60fb      	str	r3, [r7, #12]
 800634a:	68fb      	ldr	r3, [r7, #12]
    PA7     ------> ADC1_IN7
    PC4     ------> ADC1_IN14
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = BRAKES1_Pin|BRAKES2_Pin|APPS1_Pin|APPS2_Pin 
 800634c:	23cf      	movs	r3, #207	; 0xcf
 800634e:	61fb      	str	r3, [r7, #28]
                          |A1_Pin|A2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006350:	2303      	movs	r3, #3
 8006352:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006354:	2300      	movs	r3, #0
 8006356:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006358:	f107 031c 	add.w	r3, r7, #28
 800635c:	4619      	mov	r1, r3
 800635e:	482e      	ldr	r0, [pc, #184]	; (8006418 <HAL_ADC_MspInit+0x160>)
 8006360:	f7fb fdf6 	bl	8001f50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = A0_Pin;
 8006364:	2310      	movs	r3, #16
 8006366:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006368:	2303      	movs	r3, #3
 800636a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800636c:	2300      	movs	r3, #0
 800636e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(A0_GPIO_Port, &GPIO_InitStruct);
 8006370:	f107 031c 	add.w	r3, r7, #28
 8006374:	4619      	mov	r1, r3
 8006376:	4829      	ldr	r0, [pc, #164]	; (800641c <HAL_ADC_MspInit+0x164>)
 8006378:	f7fb fdea 	bl	8001f50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = A3_Pin|CURRENT_Pin;
 800637c:	2303      	movs	r3, #3
 800637e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006380:	2303      	movs	r3, #3
 8006382:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006384:	2300      	movs	r3, #0
 8006386:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006388:	f107 031c 	add.w	r3, r7, #28
 800638c:	4619      	mov	r1, r3
 800638e:	4824      	ldr	r0, [pc, #144]	; (8006420 <HAL_ADC_MspInit+0x168>)
 8006390:	f7fb fdde 	bl	8001f50 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8006394:	4b23      	ldr	r3, [pc, #140]	; (8006424 <HAL_ADC_MspInit+0x16c>)
 8006396:	4a24      	ldr	r2, [pc, #144]	; (8006428 <HAL_ADC_MspInit+0x170>)
 8006398:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800639a:	4b22      	ldr	r3, [pc, #136]	; (8006424 <HAL_ADC_MspInit+0x16c>)
 800639c:	2200      	movs	r2, #0
 800639e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80063a0:	4b20      	ldr	r3, [pc, #128]	; (8006424 <HAL_ADC_MspInit+0x16c>)
 80063a2:	2200      	movs	r2, #0
 80063a4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80063a6:	4b1f      	ldr	r3, [pc, #124]	; (8006424 <HAL_ADC_MspInit+0x16c>)
 80063a8:	2200      	movs	r2, #0
 80063aa:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80063ac:	4b1d      	ldr	r3, [pc, #116]	; (8006424 <HAL_ADC_MspInit+0x16c>)
 80063ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80063b2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80063b4:	4b1b      	ldr	r3, [pc, #108]	; (8006424 <HAL_ADC_MspInit+0x16c>)
 80063b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80063ba:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80063bc:	4b19      	ldr	r3, [pc, #100]	; (8006424 <HAL_ADC_MspInit+0x16c>)
 80063be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80063c2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80063c4:	4b17      	ldr	r3, [pc, #92]	; (8006424 <HAL_ADC_MspInit+0x16c>)
 80063c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80063ca:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80063cc:	4b15      	ldr	r3, [pc, #84]	; (8006424 <HAL_ADC_MspInit+0x16c>)
 80063ce:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80063d2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80063d4:	4b13      	ldr	r3, [pc, #76]	; (8006424 <HAL_ADC_MspInit+0x16c>)
 80063d6:	2200      	movs	r2, #0
 80063d8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80063da:	4812      	ldr	r0, [pc, #72]	; (8006424 <HAL_ADC_MspInit+0x16c>)
 80063dc:	f7fb fa20 	bl	8001820 <HAL_DMA_Init>
 80063e0:	4603      	mov	r3, r0
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d001      	beq.n	80063ea <HAL_ADC_MspInit+0x132>
    {
      Error_Handler();
 80063e6:	f000 fc83 	bl	8006cf0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	4a0d      	ldr	r2, [pc, #52]	; (8006424 <HAL_ADC_MspInit+0x16c>)
 80063ee:	639a      	str	r2, [r3, #56]	; 0x38
 80063f0:	4a0c      	ldr	r2, [pc, #48]	; (8006424 <HAL_ADC_MspInit+0x16c>)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80063f6:	2200      	movs	r2, #0
 80063f8:	2100      	movs	r1, #0
 80063fa:	2012      	movs	r0, #18
 80063fc:	f7fb f85d 	bl	80014ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8006400:	2012      	movs	r0, #18
 8006402:	f7fb f876 	bl	80014f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8006406:	bf00      	nop
 8006408:	3730      	adds	r7, #48	; 0x30
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}
 800640e:	bf00      	nop
 8006410:	40012000 	.word	0x40012000
 8006414:	40023800 	.word	0x40023800
 8006418:	40020000 	.word	0x40020000
 800641c:	40020800 	.word	0x40020800
 8006420:	40020400 	.word	0x40020400
 8006424:	200000f0 	.word	0x200000f0
 8006428:	40026410 	.word	0x40026410

0800642c <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 8006430:	4b16      	ldr	r3, [pc, #88]	; (800648c <MX_CAN1_Init+0x60>)
 8006432:	4a17      	ldr	r2, [pc, #92]	; (8006490 <MX_CAN1_Init+0x64>)
 8006434:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8006436:	4b15      	ldr	r3, [pc, #84]	; (800648c <MX_CAN1_Init+0x60>)
 8006438:	2210      	movs	r2, #16
 800643a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800643c:	4b13      	ldr	r3, [pc, #76]	; (800648c <MX_CAN1_Init+0x60>)
 800643e:	2200      	movs	r2, #0
 8006440:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8006442:	4b12      	ldr	r3, [pc, #72]	; (800648c <MX_CAN1_Init+0x60>)
 8006444:	2200      	movs	r2, #0
 8006446:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8006448:	4b10      	ldr	r3, [pc, #64]	; (800648c <MX_CAN1_Init+0x60>)
 800644a:	2200      	movs	r2, #0
 800644c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800644e:	4b0f      	ldr	r3, [pc, #60]	; (800648c <MX_CAN1_Init+0x60>)
 8006450:	2200      	movs	r2, #0
 8006452:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8006454:	4b0d      	ldr	r3, [pc, #52]	; (800648c <MX_CAN1_Init+0x60>)
 8006456:	2200      	movs	r2, #0
 8006458:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800645a:	4b0c      	ldr	r3, [pc, #48]	; (800648c <MX_CAN1_Init+0x60>)
 800645c:	2200      	movs	r2, #0
 800645e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8006460:	4b0a      	ldr	r3, [pc, #40]	; (800648c <MX_CAN1_Init+0x60>)
 8006462:	2200      	movs	r2, #0
 8006464:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8006466:	4b09      	ldr	r3, [pc, #36]	; (800648c <MX_CAN1_Init+0x60>)
 8006468:	2200      	movs	r2, #0
 800646a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800646c:	4b07      	ldr	r3, [pc, #28]	; (800648c <MX_CAN1_Init+0x60>)
 800646e:	2200      	movs	r2, #0
 8006470:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8006472:	4b06      	ldr	r3, [pc, #24]	; (800648c <MX_CAN1_Init+0x60>)
 8006474:	2200      	movs	r2, #0
 8006476:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8006478:	4804      	ldr	r0, [pc, #16]	; (800648c <MX_CAN1_Init+0x60>)
 800647a:	f7fa fe4d 	bl	8001118 <HAL_CAN_Init>
 800647e:	4603      	mov	r3, r0
 8006480:	2b00      	cmp	r3, #0
 8006482:	d001      	beq.n	8006488 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8006484:	f000 fc34 	bl	8006cf0 <Error_Handler>
  }

}
 8006488:	bf00      	nop
 800648a:	bd80      	pop	{r7, pc}
 800648c:	20000178 	.word	0x20000178
 8006490:	40006400 	.word	0x40006400

08006494 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	af00      	add	r7, sp, #0

  hcan2.Instance = CAN2;
 8006498:	4b16      	ldr	r3, [pc, #88]	; (80064f4 <MX_CAN2_Init+0x60>)
 800649a:	4a17      	ldr	r2, [pc, #92]	; (80064f8 <MX_CAN2_Init+0x64>)
 800649c:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 800649e:	4b15      	ldr	r3, [pc, #84]	; (80064f4 <MX_CAN2_Init+0x60>)
 80064a0:	2210      	movs	r2, #16
 80064a2:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80064a4:	4b13      	ldr	r3, [pc, #76]	; (80064f4 <MX_CAN2_Init+0x60>)
 80064a6:	2200      	movs	r2, #0
 80064a8:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80064aa:	4b12      	ldr	r3, [pc, #72]	; (80064f4 <MX_CAN2_Init+0x60>)
 80064ac:	2200      	movs	r2, #0
 80064ae:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 80064b0:	4b10      	ldr	r3, [pc, #64]	; (80064f4 <MX_CAN2_Init+0x60>)
 80064b2:	2200      	movs	r2, #0
 80064b4:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 80064b6:	4b0f      	ldr	r3, [pc, #60]	; (80064f4 <MX_CAN2_Init+0x60>)
 80064b8:	2200      	movs	r2, #0
 80064ba:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80064bc:	4b0d      	ldr	r3, [pc, #52]	; (80064f4 <MX_CAN2_Init+0x60>)
 80064be:	2200      	movs	r2, #0
 80064c0:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80064c2:	4b0c      	ldr	r3, [pc, #48]	; (80064f4 <MX_CAN2_Init+0x60>)
 80064c4:	2200      	movs	r2, #0
 80064c6:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80064c8:	4b0a      	ldr	r3, [pc, #40]	; (80064f4 <MX_CAN2_Init+0x60>)
 80064ca:	2200      	movs	r2, #0
 80064cc:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80064ce:	4b09      	ldr	r3, [pc, #36]	; (80064f4 <MX_CAN2_Init+0x60>)
 80064d0:	2200      	movs	r2, #0
 80064d2:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80064d4:	4b07      	ldr	r3, [pc, #28]	; (80064f4 <MX_CAN2_Init+0x60>)
 80064d6:	2200      	movs	r2, #0
 80064d8:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80064da:	4b06      	ldr	r3, [pc, #24]	; (80064f4 <MX_CAN2_Init+0x60>)
 80064dc:	2200      	movs	r2, #0
 80064de:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80064e0:	4804      	ldr	r0, [pc, #16]	; (80064f4 <MX_CAN2_Init+0x60>)
 80064e2:	f7fa fe19 	bl	8001118 <HAL_CAN_Init>
 80064e6:	4603      	mov	r3, r0
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d001      	beq.n	80064f0 <MX_CAN2_Init+0x5c>
  {
    Error_Handler();
 80064ec:	f000 fc00 	bl	8006cf0 <Error_Handler>
  }

}
 80064f0:	bf00      	nop
 80064f2:	bd80      	pop	{r7, pc}
 80064f4:	20000150 	.word	0x20000150
 80064f8:	40006800 	.word	0x40006800

080064fc <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b08c      	sub	sp, #48	; 0x30
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006504:	f107 031c 	add.w	r3, r7, #28
 8006508:	2200      	movs	r2, #0
 800650a:	601a      	str	r2, [r3, #0]
 800650c:	605a      	str	r2, [r3, #4]
 800650e:	609a      	str	r2, [r3, #8]
 8006510:	60da      	str	r2, [r3, #12]
 8006512:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a43      	ldr	r2, [pc, #268]	; (8006628 <HAL_CAN_MspInit+0x12c>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d136      	bne.n	800658c <HAL_CAN_MspInit+0x90>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 800651e:	4b43      	ldr	r3, [pc, #268]	; (800662c <HAL_CAN_MspInit+0x130>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	3301      	adds	r3, #1
 8006524:	4a41      	ldr	r2, [pc, #260]	; (800662c <HAL_CAN_MspInit+0x130>)
 8006526:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8006528:	4b40      	ldr	r3, [pc, #256]	; (800662c <HAL_CAN_MspInit+0x130>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	2b01      	cmp	r3, #1
 800652e:	d10d      	bne.n	800654c <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8006530:	2300      	movs	r3, #0
 8006532:	61bb      	str	r3, [r7, #24]
 8006534:	4a3e      	ldr	r2, [pc, #248]	; (8006630 <HAL_CAN_MspInit+0x134>)
 8006536:	4b3e      	ldr	r3, [pc, #248]	; (8006630 <HAL_CAN_MspInit+0x134>)
 8006538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800653a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800653e:	6413      	str	r3, [r2, #64]	; 0x40
 8006540:	4b3b      	ldr	r3, [pc, #236]	; (8006630 <HAL_CAN_MspInit+0x134>)
 8006542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006544:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006548:	61bb      	str	r3, [r7, #24]
 800654a:	69bb      	ldr	r3, [r7, #24]
    }
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800654c:	2300      	movs	r3, #0
 800654e:	617b      	str	r3, [r7, #20]
 8006550:	4a37      	ldr	r2, [pc, #220]	; (8006630 <HAL_CAN_MspInit+0x134>)
 8006552:	4b37      	ldr	r3, [pc, #220]	; (8006630 <HAL_CAN_MspInit+0x134>)
 8006554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006556:	f043 0301 	orr.w	r3, r3, #1
 800655a:	6313      	str	r3, [r2, #48]	; 0x30
 800655c:	4b34      	ldr	r3, [pc, #208]	; (8006630 <HAL_CAN_MspInit+0x134>)
 800655e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006560:	f003 0301 	and.w	r3, r3, #1
 8006564:	617b      	str	r3, [r7, #20]
 8006566:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration    
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006568:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800656c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800656e:	2302      	movs	r3, #2
 8006570:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006572:	2300      	movs	r3, #0
 8006574:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006576:	2303      	movs	r3, #3
 8006578:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800657a:	2309      	movs	r3, #9
 800657c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800657e:	f107 031c 	add.w	r3, r7, #28
 8006582:	4619      	mov	r1, r3
 8006584:	482b      	ldr	r0, [pc, #172]	; (8006634 <HAL_CAN_MspInit+0x138>)
 8006586:	f7fb fce3 	bl	8001f50 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 800658a:	e048      	b.n	800661e <HAL_CAN_MspInit+0x122>
  else if(canHandle->Instance==CAN2)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a29      	ldr	r2, [pc, #164]	; (8006638 <HAL_CAN_MspInit+0x13c>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d143      	bne.n	800661e <HAL_CAN_MspInit+0x122>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8006596:	2300      	movs	r3, #0
 8006598:	613b      	str	r3, [r7, #16]
 800659a:	4a25      	ldr	r2, [pc, #148]	; (8006630 <HAL_CAN_MspInit+0x134>)
 800659c:	4b24      	ldr	r3, [pc, #144]	; (8006630 <HAL_CAN_MspInit+0x134>)
 800659e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065a0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80065a4:	6413      	str	r3, [r2, #64]	; 0x40
 80065a6:	4b22      	ldr	r3, [pc, #136]	; (8006630 <HAL_CAN_MspInit+0x134>)
 80065a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065aa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80065ae:	613b      	str	r3, [r7, #16]
 80065b0:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80065b2:	4b1e      	ldr	r3, [pc, #120]	; (800662c <HAL_CAN_MspInit+0x130>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	3301      	adds	r3, #1
 80065b8:	4a1c      	ldr	r2, [pc, #112]	; (800662c <HAL_CAN_MspInit+0x130>)
 80065ba:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80065bc:	4b1b      	ldr	r3, [pc, #108]	; (800662c <HAL_CAN_MspInit+0x130>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	d10d      	bne.n	80065e0 <HAL_CAN_MspInit+0xe4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80065c4:	2300      	movs	r3, #0
 80065c6:	60fb      	str	r3, [r7, #12]
 80065c8:	4a19      	ldr	r2, [pc, #100]	; (8006630 <HAL_CAN_MspInit+0x134>)
 80065ca:	4b19      	ldr	r3, [pc, #100]	; (8006630 <HAL_CAN_MspInit+0x134>)
 80065cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80065d2:	6413      	str	r3, [r2, #64]	; 0x40
 80065d4:	4b16      	ldr	r3, [pc, #88]	; (8006630 <HAL_CAN_MspInit+0x134>)
 80065d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065dc:	60fb      	str	r3, [r7, #12]
 80065de:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80065e0:	2300      	movs	r3, #0
 80065e2:	60bb      	str	r3, [r7, #8]
 80065e4:	4a12      	ldr	r2, [pc, #72]	; (8006630 <HAL_CAN_MspInit+0x134>)
 80065e6:	4b12      	ldr	r3, [pc, #72]	; (8006630 <HAL_CAN_MspInit+0x134>)
 80065e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ea:	f043 0302 	orr.w	r3, r3, #2
 80065ee:	6313      	str	r3, [r2, #48]	; 0x30
 80065f0:	4b0f      	ldr	r3, [pc, #60]	; (8006630 <HAL_CAN_MspInit+0x134>)
 80065f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065f4:	f003 0302 	and.w	r3, r3, #2
 80065f8:	60bb      	str	r3, [r7, #8]
 80065fa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80065fc:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8006600:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006602:	2302      	movs	r3, #2
 8006604:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006606:	2300      	movs	r3, #0
 8006608:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800660a:	2303      	movs	r3, #3
 800660c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 800660e:	2309      	movs	r3, #9
 8006610:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006612:	f107 031c 	add.w	r3, r7, #28
 8006616:	4619      	mov	r1, r3
 8006618:	4808      	ldr	r0, [pc, #32]	; (800663c <HAL_CAN_MspInit+0x140>)
 800661a:	f7fb fc99 	bl	8001f50 <HAL_GPIO_Init>
}
 800661e:	bf00      	nop
 8006620:	3730      	adds	r7, #48	; 0x30
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}
 8006626:	bf00      	nop
 8006628:	40006400 	.word	0x40006400
 800662c:	2000008c 	.word	0x2000008c
 8006630:	40023800 	.word	0x40023800
 8006634:	40020000 	.word	0x40020000
 8006638:	40006800 	.word	0x40006800
 800663c:	40020400 	.word	0x40020400

08006640 <MX_DAC_Init>:
DAC_HandleTypeDef hdac;
DMA_HandleTypeDef hdma_dac1;

/* DAC init function */
void MX_DAC_Init(void)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b082      	sub	sp, #8
 8006644:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8006646:	463b      	mov	r3, r7
 8006648:	2200      	movs	r2, #0
 800664a:	601a      	str	r2, [r3, #0]
 800664c:	605a      	str	r2, [r3, #4]

  /**DAC Initialization 
  */
  hdac.Instance = DAC;
 800664e:	4b1c      	ldr	r3, [pc, #112]	; (80066c0 <MX_DAC_Init+0x80>)
 8006650:	4a1c      	ldr	r2, [pc, #112]	; (80066c4 <MX_DAC_Init+0x84>)
 8006652:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8006654:	481a      	ldr	r0, [pc, #104]	; (80066c0 <MX_DAC_Init+0x80>)
 8006656:	f7fa ff66 	bl	8001526 <HAL_DAC_Init>
 800665a:	4603      	mov	r3, r0
 800665c:	2b00      	cmp	r3, #0
 800665e:	d001      	beq.n	8006664 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8006660:	f000 fb46 	bl	8006cf0 <Error_Handler>
  }
  /**DAC channel OUT1 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T4_TRGO;
 8006664:	232c      	movs	r3, #44	; 0x2c
 8006666:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8006668:	2300      	movs	r3, #0
 800666a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800666c:	463b      	mov	r3, r7
 800666e:	2200      	movs	r2, #0
 8006670:	4619      	mov	r1, r3
 8006672:	4813      	ldr	r0, [pc, #76]	; (80066c0 <MX_DAC_Init+0x80>)
 8006674:	f7fb f849 	bl	800170a <HAL_DAC_ConfigChannel>
 8006678:	4603      	mov	r3, r0
 800667a:	2b00      	cmp	r3, #0
 800667c:	d001      	beq.n	8006682 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800667e:	f000 fb37 	bl	8006cf0 <Error_Handler>
  }
  /**Configure Triangle wave generation on DAC OUT1 
  */
  if (HAL_DACEx_TriangleWaveGenerate(&hdac, DAC_CHANNEL_1, DAC_TRIANGLEAMPLITUDE_4095) != HAL_OK)
 8006682:	f44f 6230 	mov.w	r2, #2816	; 0xb00
 8006686:	2100      	movs	r1, #0
 8006688:	480d      	ldr	r0, [pc, #52]	; (80066c0 <MX_DAC_Init+0x80>)
 800668a:	f7fb f88b 	bl	80017a4 <HAL_DACEx_TriangleWaveGenerate>
 800668e:	4603      	mov	r3, r0
 8006690:	2b00      	cmp	r3, #0
 8006692:	d001      	beq.n	8006698 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8006694:	f000 fb2c 	bl	8006cf0 <Error_Handler>
  }
  /**DAC channel OUT2 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8006698:	2300      	movs	r3, #0
 800669a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 800669c:	2302      	movs	r3, #2
 800669e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80066a0:	463b      	mov	r3, r7
 80066a2:	2210      	movs	r2, #16
 80066a4:	4619      	mov	r1, r3
 80066a6:	4806      	ldr	r0, [pc, #24]	; (80066c0 <MX_DAC_Init+0x80>)
 80066a8:	f7fb f82f 	bl	800170a <HAL_DAC_ConfigChannel>
 80066ac:	4603      	mov	r3, r0
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d001      	beq.n	80066b6 <MX_DAC_Init+0x76>
  {
    Error_Handler();
 80066b2:	f000 fb1d 	bl	8006cf0 <Error_Handler>
  }

}
 80066b6:	bf00      	nop
 80066b8:	3708      	adds	r7, #8
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}
 80066be:	bf00      	nop
 80066c0:	20000200 	.word	0x20000200
 80066c4:	40007400 	.word	0x40007400

080066c8 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b08a      	sub	sp, #40	; 0x28
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80066d0:	f107 0314 	add.w	r3, r7, #20
 80066d4:	2200      	movs	r2, #0
 80066d6:	601a      	str	r2, [r3, #0]
 80066d8:	605a      	str	r2, [r3, #4]
 80066da:	609a      	str	r2, [r3, #8]
 80066dc:	60da      	str	r2, [r3, #12]
 80066de:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4a34      	ldr	r2, [pc, #208]	; (80067b8 <HAL_DAC_MspInit+0xf0>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d161      	bne.n	80067ae <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80066ea:	2300      	movs	r3, #0
 80066ec:	613b      	str	r3, [r7, #16]
 80066ee:	4a33      	ldr	r2, [pc, #204]	; (80067bc <HAL_DAC_MspInit+0xf4>)
 80066f0:	4b32      	ldr	r3, [pc, #200]	; (80067bc <HAL_DAC_MspInit+0xf4>)
 80066f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066f4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80066f8:	6413      	str	r3, [r2, #64]	; 0x40
 80066fa:	4b30      	ldr	r3, [pc, #192]	; (80067bc <HAL_DAC_MspInit+0xf4>)
 80066fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006702:	613b      	str	r3, [r7, #16]
 8006704:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006706:	2300      	movs	r3, #0
 8006708:	60fb      	str	r3, [r7, #12]
 800670a:	4a2c      	ldr	r2, [pc, #176]	; (80067bc <HAL_DAC_MspInit+0xf4>)
 800670c:	4b2b      	ldr	r3, [pc, #172]	; (80067bc <HAL_DAC_MspInit+0xf4>)
 800670e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006710:	f043 0301 	orr.w	r3, r3, #1
 8006714:	6313      	str	r3, [r2, #48]	; 0x30
 8006716:	4b29      	ldr	r3, [pc, #164]	; (80067bc <HAL_DAC_MspInit+0xf4>)
 8006718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800671a:	f003 0301 	and.w	r3, r3, #1
 800671e:	60fb      	str	r3, [r7, #12]
 8006720:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration    
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2 
    */
    GPIO_InitStruct.Pin = APPS_OUT_Pin|Brakes_OUT_Pin;
 8006722:	2330      	movs	r3, #48	; 0x30
 8006724:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006726:	2303      	movs	r3, #3
 8006728:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800672a:	2300      	movs	r3, #0
 800672c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800672e:	f107 0314 	add.w	r3, r7, #20
 8006732:	4619      	mov	r1, r3
 8006734:	4822      	ldr	r0, [pc, #136]	; (80067c0 <HAL_DAC_MspInit+0xf8>)
 8006736:	f7fb fc0b 	bl	8001f50 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 800673a:	4b22      	ldr	r3, [pc, #136]	; (80067c4 <HAL_DAC_MspInit+0xfc>)
 800673c:	4a22      	ldr	r2, [pc, #136]	; (80067c8 <HAL_DAC_MspInit+0x100>)
 800673e:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8006740:	4b20      	ldr	r3, [pc, #128]	; (80067c4 <HAL_DAC_MspInit+0xfc>)
 8006742:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8006746:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006748:	4b1e      	ldr	r3, [pc, #120]	; (80067c4 <HAL_DAC_MspInit+0xfc>)
 800674a:	2240      	movs	r2, #64	; 0x40
 800674c:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 800674e:	4b1d      	ldr	r3, [pc, #116]	; (80067c4 <HAL_DAC_MspInit+0xfc>)
 8006750:	2200      	movs	r2, #0
 8006752:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8006754:	4b1b      	ldr	r3, [pc, #108]	; (80067c4 <HAL_DAC_MspInit+0xfc>)
 8006756:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800675a:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800675c:	4b19      	ldr	r3, [pc, #100]	; (80067c4 <HAL_DAC_MspInit+0xfc>)
 800675e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006762:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006764:	4b17      	ldr	r3, [pc, #92]	; (80067c4 <HAL_DAC_MspInit+0xfc>)
 8006766:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800676a:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 800676c:	4b15      	ldr	r3, [pc, #84]	; (80067c4 <HAL_DAC_MspInit+0xfc>)
 800676e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006772:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_HIGH;
 8006774:	4b13      	ldr	r3, [pc, #76]	; (80067c4 <HAL_DAC_MspInit+0xfc>)
 8006776:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800677a:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800677c:	4b11      	ldr	r3, [pc, #68]	; (80067c4 <HAL_DAC_MspInit+0xfc>)
 800677e:	2200      	movs	r2, #0
 8006780:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8006782:	4810      	ldr	r0, [pc, #64]	; (80067c4 <HAL_DAC_MspInit+0xfc>)
 8006784:	f7fb f84c 	bl	8001820 <HAL_DMA_Init>
 8006788:	4603      	mov	r3, r0
 800678a:	2b00      	cmp	r3, #0
 800678c:	d001      	beq.n	8006792 <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 800678e:	f000 faaf 	bl	8006cf0 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	4a0b      	ldr	r2, [pc, #44]	; (80067c4 <HAL_DAC_MspInit+0xfc>)
 8006796:	609a      	str	r2, [r3, #8]
 8006798:	4a0a      	ldr	r2, [pc, #40]	; (80067c4 <HAL_DAC_MspInit+0xfc>)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800679e:	2200      	movs	r2, #0
 80067a0:	2100      	movs	r1, #0
 80067a2:	2036      	movs	r0, #54	; 0x36
 80067a4:	f7fa fe89 	bl	80014ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80067a8:	2036      	movs	r0, #54	; 0x36
 80067aa:	f7fa fea2 	bl	80014f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 80067ae:	bf00      	nop
 80067b0:	3728      	adds	r7, #40	; 0x28
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}
 80067b6:	bf00      	nop
 80067b8:	40007400 	.word	0x40007400
 80067bc:	40023800 	.word	0x40023800
 80067c0:	40020000 	.word	0x40020000
 80067c4:	200001a0 	.word	0x200001a0
 80067c8:	40026088 	.word	0x40026088

080067cc <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b082      	sub	sp, #8
 80067d0:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80067d2:	2300      	movs	r3, #0
 80067d4:	607b      	str	r3, [r7, #4]
 80067d6:	4a1f      	ldr	r2, [pc, #124]	; (8006854 <MX_DMA_Init+0x88>)
 80067d8:	4b1e      	ldr	r3, [pc, #120]	; (8006854 <MX_DMA_Init+0x88>)
 80067da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80067e0:	6313      	str	r3, [r2, #48]	; 0x30
 80067e2:	4b1c      	ldr	r3, [pc, #112]	; (8006854 <MX_DMA_Init+0x88>)
 80067e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067ea:	607b      	str	r3, [r7, #4]
 80067ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80067ee:	2300      	movs	r3, #0
 80067f0:	603b      	str	r3, [r7, #0]
 80067f2:	4a18      	ldr	r2, [pc, #96]	; (8006854 <MX_DMA_Init+0x88>)
 80067f4:	4b17      	ldr	r3, [pc, #92]	; (8006854 <MX_DMA_Init+0x88>)
 80067f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80067fc:	6313      	str	r3, [r2, #48]	; 0x30
 80067fe:	4b15      	ldr	r3, [pc, #84]	; (8006854 <MX_DMA_Init+0x88>)
 8006800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006802:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006806:	603b      	str	r3, [r7, #0]
 8006808:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800680a:	2200      	movs	r2, #0
 800680c:	2100      	movs	r1, #0
 800680e:	2010      	movs	r0, #16
 8006810:	f7fa fe53 	bl	80014ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8006814:	2010      	movs	r0, #16
 8006816:	f7fa fe6c 	bl	80014f2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800681a:	2200      	movs	r2, #0
 800681c:	2100      	movs	r1, #0
 800681e:	2038      	movs	r0, #56	; 0x38
 8006820:	f7fa fe4b 	bl	80014ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8006824:	2038      	movs	r0, #56	; 0x38
 8006826:	f7fa fe64 	bl	80014f2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800682a:	2200      	movs	r2, #0
 800682c:	2100      	movs	r1, #0
 800682e:	203b      	movs	r0, #59	; 0x3b
 8006830:	f7fa fe43 	bl	80014ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8006834:	203b      	movs	r0, #59	; 0x3b
 8006836:	f7fa fe5c 	bl	80014f2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 800683a:	2200      	movs	r2, #0
 800683c:	2100      	movs	r1, #0
 800683e:	2046      	movs	r0, #70	; 0x46
 8006840:	f7fa fe3b 	bl	80014ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8006844:	2046      	movs	r0, #70	; 0x46
 8006846:	f7fa fe54 	bl	80014f2 <HAL_NVIC_EnableIRQ>

}
 800684a:	bf00      	nop
 800684c:	3708      	adds	r7, #8
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}
 8006852:	bf00      	nop
 8006854:	40023800 	.word	0x40023800

08006858 <safe_reset_ecu>:
 *      Author: A.SaleH
 */
#include "error_handling.h"
#include "logging.h"

void safe_reset_ecu(){
 8006858:	b580      	push	{r7, lr}
 800685a:	af00      	add	r7, sp, #0
	log_to_uart("Safely disabling all outputs");
 800685c:	4803      	ldr	r0, [pc, #12]	; (800686c <safe_reset_ecu+0x14>)
 800685e:	f000 f8bf 	bl	80069e0 <log_to_uart>

	log_to_uart("Reseting ECU");
 8006862:	4803      	ldr	r0, [pc, #12]	; (8006870 <safe_reset_ecu+0x18>)
 8006864:	f000 f8bc 	bl	80069e0 <log_to_uart>
}
 8006868:	bf00      	nop
 800686a:	bd80      	pop	{r7, pc}
 800686c:	080084bc 	.word	0x080084bc
 8006870:	080084dc 	.word	0x080084dc

08006874 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b08a      	sub	sp, #40	; 0x28
 8006878:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800687a:	f107 0314 	add.w	r3, r7, #20
 800687e:	2200      	movs	r2, #0
 8006880:	601a      	str	r2, [r3, #0]
 8006882:	605a      	str	r2, [r3, #4]
 8006884:	609a      	str	r2, [r3, #8]
 8006886:	60da      	str	r2, [r3, #12]
 8006888:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800688a:	2300      	movs	r3, #0
 800688c:	613b      	str	r3, [r7, #16]
 800688e:	4a4f      	ldr	r2, [pc, #316]	; (80069cc <MX_GPIO_Init+0x158>)
 8006890:	4b4e      	ldr	r3, [pc, #312]	; (80069cc <MX_GPIO_Init+0x158>)
 8006892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006894:	f043 0304 	orr.w	r3, r3, #4
 8006898:	6313      	str	r3, [r2, #48]	; 0x30
 800689a:	4b4c      	ldr	r3, [pc, #304]	; (80069cc <MX_GPIO_Init+0x158>)
 800689c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800689e:	f003 0304 	and.w	r3, r3, #4
 80068a2:	613b      	str	r3, [r7, #16]
 80068a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80068a6:	2300      	movs	r3, #0
 80068a8:	60fb      	str	r3, [r7, #12]
 80068aa:	4a48      	ldr	r2, [pc, #288]	; (80069cc <MX_GPIO_Init+0x158>)
 80068ac:	4b47      	ldr	r3, [pc, #284]	; (80069cc <MX_GPIO_Init+0x158>)
 80068ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068b4:	6313      	str	r3, [r2, #48]	; 0x30
 80068b6:	4b45      	ldr	r3, [pc, #276]	; (80069cc <MX_GPIO_Init+0x158>)
 80068b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068be:	60fb      	str	r3, [r7, #12]
 80068c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80068c2:	2300      	movs	r3, #0
 80068c4:	60bb      	str	r3, [r7, #8]
 80068c6:	4a41      	ldr	r2, [pc, #260]	; (80069cc <MX_GPIO_Init+0x158>)
 80068c8:	4b40      	ldr	r3, [pc, #256]	; (80069cc <MX_GPIO_Init+0x158>)
 80068ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068cc:	f043 0301 	orr.w	r3, r3, #1
 80068d0:	6313      	str	r3, [r2, #48]	; 0x30
 80068d2:	4b3e      	ldr	r3, [pc, #248]	; (80069cc <MX_GPIO_Init+0x158>)
 80068d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068d6:	f003 0301 	and.w	r3, r3, #1
 80068da:	60bb      	str	r3, [r7, #8]
 80068dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80068de:	2300      	movs	r3, #0
 80068e0:	607b      	str	r3, [r7, #4]
 80068e2:	4a3a      	ldr	r2, [pc, #232]	; (80069cc <MX_GPIO_Init+0x158>)
 80068e4:	4b39      	ldr	r3, [pc, #228]	; (80069cc <MX_GPIO_Init+0x158>)
 80068e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068e8:	f043 0302 	orr.w	r3, r3, #2
 80068ec:	6313      	str	r3, [r2, #48]	; 0x30
 80068ee:	4b37      	ldr	r3, [pc, #220]	; (80069cc <MX_GPIO_Init+0x158>)
 80068f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068f2:	f003 0302 	and.w	r3, r3, #2
 80068f6:	607b      	str	r3, [r7, #4]
 80068f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80068fa:	2300      	movs	r3, #0
 80068fc:	603b      	str	r3, [r7, #0]
 80068fe:	4a33      	ldr	r2, [pc, #204]	; (80069cc <MX_GPIO_Init+0x158>)
 8006900:	4b32      	ldr	r3, [pc, #200]	; (80069cc <MX_GPIO_Init+0x158>)
 8006902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006904:	f043 0308 	orr.w	r3, r3, #8
 8006908:	6313      	str	r3, [r2, #48]	; 0x30
 800690a:	4b30      	ldr	r3, [pc, #192]	; (80069cc <MX_GPIO_Init+0x158>)
 800690c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800690e:	f003 0308 	and.w	r3, r3, #8
 8006912:	603b      	str	r3, [r7, #0]
 8006914:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RTDS_Pin|SHUTDOWN_Pin|AUX1_Pin|AUX2_Pin 
 8006916:	2200      	movs	r2, #0
 8006918:	f246 0107 	movw	r1, #24583	; 0x6007
 800691c:	482c      	ldr	r0, [pc, #176]	; (80069d0 <MX_GPIO_Init+0x15c>)
 800691e:	f7fb fca9 	bl	8002274 <HAL_GPIO_WritePin>
                          |AUX3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BMS_UART_TX_SOFT_GPIO_Port, BMS_UART_TX_SOFT_Pin, GPIO_PIN_RESET);
 8006922:	2200      	movs	r2, #0
 8006924:	2101      	movs	r1, #1
 8006926:	482b      	ldr	r0, [pc, #172]	; (80069d4 <MX_GPIO_Init+0x160>)
 8006928:	f7fb fca4 	bl	8002274 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_EN_GPIO_Port, MOTOR_EN_Pin, GPIO_PIN_RESET);
 800692c:	2200      	movs	r2, #0
 800692e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006932:	4829      	ldr	r0, [pc, #164]	; (80069d8 <MX_GPIO_Init+0x164>)
 8006934:	f7fb fc9e 	bl	8002274 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin 
                           PCPin */
  GPIO_InitStruct.Pin = RTDS_Pin|SHUTDOWN_Pin|AUX1_Pin|AUX2_Pin 
 8006938:	f246 0307 	movw	r3, #24583	; 0x6007
 800693c:	617b      	str	r3, [r7, #20]
                          |AUX3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800693e:	2301      	movs	r3, #1
 8006940:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006942:	2300      	movs	r3, #0
 8006944:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006946:	2300      	movs	r3, #0
 8006948:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800694a:	f107 0314 	add.w	r3, r7, #20
 800694e:	4619      	mov	r1, r3
 8006950:	481f      	ldr	r0, [pc, #124]	; (80069d0 <MX_GPIO_Init+0x15c>)
 8006952:	f7fb fafd 	bl	8001f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RTD_BUTTON_Pin;
 8006956:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800695a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800695c:	4b1f      	ldr	r3, [pc, #124]	; (80069dc <MX_GPIO_Init+0x168>)
 800695e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006960:	2300      	movs	r3, #0
 8006962:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RTD_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8006964:	f107 0314 	add.w	r3, r7, #20
 8006968:	4619      	mov	r1, r3
 800696a:	4819      	ldr	r0, [pc, #100]	; (80069d0 <MX_GPIO_Init+0x15c>)
 800696c:	f7fb faf0 	bl	8001f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BMS_UART_TX_SOFT_Pin;
 8006970:	2301      	movs	r3, #1
 8006972:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006974:	2301      	movs	r3, #1
 8006976:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006978:	2300      	movs	r3, #0
 800697a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800697c:	2300      	movs	r3, #0
 800697e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BMS_UART_TX_SOFT_GPIO_Port, &GPIO_InitStruct);
 8006980:	f107 0314 	add.w	r3, r7, #20
 8006984:	4619      	mov	r1, r3
 8006986:	4813      	ldr	r0, [pc, #76]	; (80069d4 <MX_GPIO_Init+0x160>)
 8006988:	f7fb fae2 	bl	8001f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BMS_UART_RX_SOFT_Pin;
 800698c:	2302      	movs	r3, #2
 800698e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006990:	2300      	movs	r3, #0
 8006992:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006994:	2300      	movs	r3, #0
 8006996:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BMS_UART_RX_SOFT_GPIO_Port, &GPIO_InitStruct);
 8006998:	f107 0314 	add.w	r3, r7, #20
 800699c:	4619      	mov	r1, r3
 800699e:	480d      	ldr	r0, [pc, #52]	; (80069d4 <MX_GPIO_Init+0x160>)
 80069a0:	f7fb fad6 	bl	8001f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MOTOR_EN_Pin;
 80069a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80069a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80069aa:	2301      	movs	r3, #1
 80069ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069ae:	2300      	movs	r3, #0
 80069b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80069b2:	2300      	movs	r3, #0
 80069b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MOTOR_EN_GPIO_Port, &GPIO_InitStruct);
 80069b6:	f107 0314 	add.w	r3, r7, #20
 80069ba:	4619      	mov	r1, r3
 80069bc:	4806      	ldr	r0, [pc, #24]	; (80069d8 <MX_GPIO_Init+0x164>)
 80069be:	f7fb fac7 	bl	8001f50 <HAL_GPIO_Init>

}
 80069c2:	bf00      	nop
 80069c4:	3728      	adds	r7, #40	; 0x28
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}
 80069ca:	bf00      	nop
 80069cc:	40023800 	.word	0x40023800
 80069d0:	40020800 	.word	0x40020800
 80069d4:	40021c00 	.word	0x40021c00
 80069d8:	40020400 	.word	0x40020400
 80069dc:	10110000 	.word	0x10110000

080069e0 <log_to_uart>:
#include "logging.h"
#include "main.h"
#include "sdio.h"
#include "usart.h"

void log_to_uart(const char *s) {
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b082      	sub	sp, #8
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
	printf("%ld:: %s\r\n", HAL_GetTick(), s);
 80069e8:	f7f9 fe50 	bl	800068c <HAL_GetTick>
 80069ec:	4603      	mov	r3, r0
 80069ee:	687a      	ldr	r2, [r7, #4]
 80069f0:	4619      	mov	r1, r3
 80069f2:	4803      	ldr	r0, [pc, #12]	; (8006a00 <log_to_uart+0x20>)
 80069f4:	f000 fe28 	bl	8007648 <iprintf>
}
 80069f8:	bf00      	nop
 80069fa:	3708      	adds	r7, #8
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}
 8006a00:	080084ec 	.word	0x080084ec

08006a04 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b084      	sub	sp, #16
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	60f8      	str	r0, [r7, #12]
 8006a0c:	60b9      	str	r1, [r7, #8]
 8006a0e:	607a      	str	r2, [r7, #4]
	while (huart1.gState != HAL_UART_STATE_READY)
 8006a10:	bf00      	nop
 8006a12:	4b09      	ldr	r3, [pc, #36]	; (8006a38 <_write+0x34>)
 8006a14:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006a18:	b2db      	uxtb	r3, r3
 8006a1a:	2b20      	cmp	r3, #32
 8006a1c:	d1f9      	bne.n	8006a12 <_write+0xe>
		;
	HAL_UART_Transmit_DMA(&huart1, (uint8_t*) ptr, len);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	b29b      	uxth	r3, r3
 8006a22:	461a      	mov	r2, r3
 8006a24:	68b9      	ldr	r1, [r7, #8]
 8006a26:	4804      	ldr	r0, [pc, #16]	; (8006a38 <_write+0x34>)
 8006a28:	f7fe f966 	bl	8004cf8 <HAL_UART_Transmit_DMA>
	return len;
 8006a2c:	687b      	ldr	r3, [r7, #4]
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3710      	adds	r7, #16
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}
 8006a36:	bf00      	nop
 8006a38:	20000420 	.word	0x20000420

08006a3c <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8006a3c:	b480      	push	{r7}
 8006a3e:	b083      	sub	sp, #12
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
	adc_new_data = true;
 8006a44:	4b04      	ldr	r3, [pc, #16]	; (8006a58 <HAL_ADC_ConvCpltCallback+0x1c>)
 8006a46:	2201      	movs	r2, #1
 8006a48:	701a      	strb	r2, [r3, #0]
}
 8006a4a:	bf00      	nop
 8006a4c:	370c      	adds	r7, #12
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a54:	4770      	bx	lr
 8006a56:	bf00      	nop
 8006a58:	20000090 	.word	0x20000090

08006a5c <can_tx_test>:

void can_tx_test() {
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	af00      	add	r7, sp, #0
	static GPIO_PinState s = GPIO_PIN_RESET;
	if ((HAL_GetTick() - can_tx_delay_ticks) >= 10) {
 8006a60:	f7f9 fe14 	bl	800068c <HAL_GetTick>
 8006a64:	4602      	mov	r2, r0
 8006a66:	4b0a      	ldr	r3, [pc, #40]	; (8006a90 <can_tx_test+0x34>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	1ad3      	subs	r3, r2, r3
 8006a6c:	2b09      	cmp	r3, #9
 8006a6e:	d90c      	bls.n	8006a8a <can_tx_test+0x2e>
		can_tx_delay_ticks = HAL_GetTick();
 8006a70:	f7f9 fe0c 	bl	800068c <HAL_GetTick>
 8006a74:	4602      	mov	r2, r0
 8006a76:	4b06      	ldr	r3, [pc, #24]	; (8006a90 <can_tx_test+0x34>)
 8006a78:	601a      	str	r2, [r3, #0]
		throttle = HAL_DAC_GetValue(&hdac, DAC_CHANNEL_1);
 8006a7a:	2100      	movs	r1, #0
 8006a7c:	4805      	ldr	r0, [pc, #20]	; (8006a94 <can_tx_test+0x38>)
 8006a7e:	f7fa fddb 	bl	8001638 <HAL_DAC_GetValue>
 8006a82:	4603      	mov	r3, r0
 8006a84:	b29a      	uxth	r2, r3
 8006a86:	4b04      	ldr	r3, [pc, #16]	; (8006a98 <can_tx_test+0x3c>)
 8006a88:	801a      	strh	r2, [r3, #0]
	}
}
 8006a8a:	bf00      	nop
 8006a8c:	bd80      	pop	{r7, pc}
 8006a8e:	bf00      	nop
 8006a90:	20000094 	.word	0x20000094
 8006a94:	20000200 	.word	0x20000200
 8006a98:	20000092 	.word	0x20000092

08006a9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006aa0:	f7f9 fd8e 	bl	80005c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006aa4:	f000 f882 	bl	8006bac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006aa8:	f7ff fee4 	bl	8006874 <MX_GPIO_Init>
  MX_DMA_Init();
 8006aac:	f7ff fe8e 	bl	80067cc <MX_DMA_Init>
  MX_ADC1_Init();
 8006ab0:	f7ff fb4e 	bl	8006150 <MX_ADC1_Init>
  MX_TIM1_Init();
 8006ab4:	f000 fb20 	bl	80070f8 <MX_TIM1_Init>
  MX_DAC_Init();
 8006ab8:	f7ff fdc2 	bl	8006640 <MX_DAC_Init>
  MX_SDIO_SD_Init();
 8006abc:	f000 f920 	bl	8006d00 <MX_SDIO_SD_Init>
  MX_TIM2_Init();
 8006ac0:	f000 fb6a 	bl	8007198 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8006ac4:	f000 fc5e 	bl	8007384 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8006ac8:	f000 fbb0 	bl	800722c <MX_TIM4_Init>
  MX_USART6_UART_Init();
 8006acc:	f000 fc84 	bl	80073d8 <MX_USART6_UART_Init>
  MX_CAN2_Init();
 8006ad0:	f7ff fce0 	bl	8006494 <MX_CAN2_Init>
  MX_CAN1_Init();
 8006ad4:	f7ff fcaa 	bl	800642c <MX_CAN1_Init>
//	log_to_uart("Starting IMD timer IC");
//	if (HAL_TIM_IC_Start(&htim1, TIM_CHANNEL_1) != HAL_OK) {
//		log_to_uart("IMD timer IC start failed");
//		safe_reset_ecu();
//	}
	log_to_uart("Starting ADC timer base");
 8006ad8:	4825      	ldr	r0, [pc, #148]	; (8006b70 <main+0xd4>)
 8006ada:	f7ff ff81 	bl	80069e0 <log_to_uart>
	if (HAL_TIM_Base_Start_IT(&htim2) != HAL_OK) {
 8006ade:	4825      	ldr	r0, [pc, #148]	; (8006b74 <main+0xd8>)
 8006ae0:	f7fd fce0 	bl	80044a4 <HAL_TIM_Base_Start_IT>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d004      	beq.n	8006af4 <main+0x58>
		log_to_uart("ADC timer base start failed");
 8006aea:	4823      	ldr	r0, [pc, #140]	; (8006b78 <main+0xdc>)
 8006aec:	f7ff ff78 	bl	80069e0 <log_to_uart>
		safe_reset_ecu();
 8006af0:	f7ff feb2 	bl	8006858 <safe_reset_ecu>
	}
	log_to_uart("Starting DAC timer base");
 8006af4:	4821      	ldr	r0, [pc, #132]	; (8006b7c <main+0xe0>)
 8006af6:	f7ff ff73 	bl	80069e0 <log_to_uart>
	if (HAL_TIM_Base_Start_IT(&htim4) != HAL_OK) {
 8006afa:	4821      	ldr	r0, [pc, #132]	; (8006b80 <main+0xe4>)
 8006afc:	f7fd fcd2 	bl	80044a4 <HAL_TIM_Base_Start_IT>
 8006b00:	4603      	mov	r3, r0
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d004      	beq.n	8006b10 <main+0x74>
		log_to_uart("DAC timer base start failed");
 8006b06:	481f      	ldr	r0, [pc, #124]	; (8006b84 <main+0xe8>)
 8006b08:	f7ff ff6a 	bl	80069e0 <log_to_uart>
		safe_reset_ecu();
 8006b0c:	f7ff fea4 	bl	8006858 <safe_reset_ecu>
	}
	log_to_uart("Starting ADC DMA");
 8006b10:	481d      	ldr	r0, [pc, #116]	; (8006b88 <main+0xec>)
 8006b12:	f7ff ff65 	bl	80069e0 <log_to_uart>
	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_raw_data, 9) != HAL_OK) {
 8006b16:	2209      	movs	r2, #9
 8006b18:	491c      	ldr	r1, [pc, #112]	; (8006b8c <main+0xf0>)
 8006b1a:	481d      	ldr	r0, [pc, #116]	; (8006b90 <main+0xf4>)
 8006b1c:	f7f9 ff68 	bl	80009f0 <HAL_ADC_Start_DMA>
 8006b20:	4603      	mov	r3, r0
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d004      	beq.n	8006b30 <main+0x94>
		log_to_uart("ADC DMA start failed");
 8006b26:	481b      	ldr	r0, [pc, #108]	; (8006b94 <main+0xf8>)
 8006b28:	f7ff ff5a 	bl	80069e0 <log_to_uart>
		safe_reset_ecu();
 8006b2c:	f7ff fe94 	bl	8006858 <safe_reset_ecu>
	}
	log_to_uart("Starting DAC DMA");
 8006b30:	4819      	ldr	r0, [pc, #100]	; (8006b98 <main+0xfc>)
 8006b32:	f7ff ff55 	bl	80069e0 <log_to_uart>
	if (HAL_DAC_Start(&hdac, DAC_CHANNEL_1)
 8006b36:	2100      	movs	r1, #0
 8006b38:	4818      	ldr	r0, [pc, #96]	; (8006b9c <main+0x100>)
 8006b3a:	f7fa fd16 	bl	800156a <HAL_DAC_Start>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d004      	beq.n	8006b4e <main+0xb2>
			!= HAL_OK) {
		log_to_uart("DAC DMA failed");
 8006b44:	4816      	ldr	r0, [pc, #88]	; (8006ba0 <main+0x104>)
 8006b46:	f7ff ff4b 	bl	80069e0 <log_to_uart>
		safe_reset_ecu();
 8006b4a:	f7ff fe85 	bl	8006858 <safe_reset_ecu>
	}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 8006b4e:	2201      	movs	r2, #1
 8006b50:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006b54:	4813      	ldr	r0, [pc, #76]	; (8006ba4 <main+0x108>)
 8006b56:	f7fb fb8d 	bl	8002274 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		can_tx_test();
 8006b5a:	f7ff ff7f 	bl	8006a5c <can_tx_test>
		if (adc_new_data) {
 8006b5e:	4b12      	ldr	r3, [pc, #72]	; (8006ba8 <main+0x10c>)
 8006b60:	781b      	ldrb	r3, [r3, #0]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d0f9      	beq.n	8006b5a <main+0xbe>
			adc_new_data = false;
 8006b66:	4b10      	ldr	r3, [pc, #64]	; (8006ba8 <main+0x10c>)
 8006b68:	2200      	movs	r2, #0
 8006b6a:	701a      	strb	r2, [r3, #0]
		can_tx_test();
 8006b6c:	e7f5      	b.n	8006b5a <main+0xbe>
 8006b6e:	bf00      	nop
 8006b70:	080084f8 	.word	0x080084f8
 8006b74:	20000384 	.word	0x20000384
 8006b78:	08008510 	.word	0x08008510
 8006b7c:	0800852c 	.word	0x0800852c
 8006b80:	2000030c 	.word	0x2000030c
 8006b84:	08008544 	.word	0x08008544
 8006b88:	08008560 	.word	0x08008560
 8006b8c:	20000214 	.word	0x20000214
 8006b90:	200000a8 	.word	0x200000a8
 8006b94:	08008574 	.word	0x08008574
 8006b98:	0800858c 	.word	0x0800858c
 8006b9c:	20000200 	.word	0x20000200
 8006ba0:	080085a0 	.word	0x080085a0
 8006ba4:	40020000 	.word	0x40020000
 8006ba8:	20000090 	.word	0x20000090

08006bac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b0ac      	sub	sp, #176	; 0xb0
 8006bb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006bb2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006bb6:	2234      	movs	r2, #52	; 0x34
 8006bb8:	2100      	movs	r1, #0
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f000 fd3c 	bl	8007638 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006bc0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	601a      	str	r2, [r3, #0]
 8006bc8:	605a      	str	r2, [r3, #4]
 8006bca:	609a      	str	r2, [r3, #8]
 8006bcc:	60da      	str	r2, [r3, #12]
 8006bce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006bd0:	f107 030c 	add.w	r3, r7, #12
 8006bd4:	225c      	movs	r2, #92	; 0x5c
 8006bd6:	2100      	movs	r1, #0
 8006bd8:	4618      	mov	r0, r3
 8006bda:	f000 fd2d 	bl	8007638 <memset>

  /**Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8006bde:	2300      	movs	r3, #0
 8006be0:	60bb      	str	r3, [r7, #8]
 8006be2:	4a41      	ldr	r2, [pc, #260]	; (8006ce8 <SystemClock_Config+0x13c>)
 8006be4:	4b40      	ldr	r3, [pc, #256]	; (8006ce8 <SystemClock_Config+0x13c>)
 8006be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006be8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bec:	6413      	str	r3, [r2, #64]	; 0x40
 8006bee:	4b3e      	ldr	r3, [pc, #248]	; (8006ce8 <SystemClock_Config+0x13c>)
 8006bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bf6:	60bb      	str	r3, [r7, #8]
 8006bf8:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	607b      	str	r3, [r7, #4]
 8006bfe:	4a3b      	ldr	r2, [pc, #236]	; (8006cec <SystemClock_Config+0x140>)
 8006c00:	4b3a      	ldr	r3, [pc, #232]	; (8006cec <SystemClock_Config+0x140>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006c08:	6013      	str	r3, [r2, #0]
 8006c0a:	4b38      	ldr	r3, [pc, #224]	; (8006cec <SystemClock_Config+0x140>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006c12:	607b      	str	r3, [r7, #4]
 8006c14:	687b      	ldr	r3, [r7, #4]
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8006c16:	2302      	movs	r3, #2
 8006c18:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006c20:	2310      	movs	r3, #16
 8006c22:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006c26:	2302      	movs	r3, #2
 8006c28:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 16;
 8006c32:	2310      	movs	r3, #16
 8006c34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 360;
 8006c38:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8006c3c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006c40:	2302      	movs	r3, #2
 8006c42:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8006c46:	2308      	movs	r3, #8
 8006c48:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8006c4c:	2302      	movs	r3, #2
 8006c4e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006c52:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006c56:	4618      	mov	r0, r3
 8006c58:	f7fc f908 	bl	8002e6c <HAL_RCC_OscConfig>
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d001      	beq.n	8006c66 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8006c62:	f000 f845 	bl	8006cf0 <Error_Handler>
  }
  /**Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8006c66:	f7fb fb1f 	bl	80022a8 <HAL_PWREx_EnableOverDrive>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d001      	beq.n	8006c74 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8006c70:	f000 f83e 	bl	8006cf0 <Error_Handler>
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006c74:	230f      	movs	r3, #15
 8006c76:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006c78:	2302      	movs	r3, #2
 8006c7a:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8006c80:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8006c84:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8006c86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006c8a:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8006c8c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006c90:	2105      	movs	r1, #5
 8006c92:	4618      	mov	r0, r3
 8006c94:	f7fb fb58 	bl	8002348 <HAL_RCC_ClockConfig>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d001      	beq.n	8006ca2 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8006c9e:	f000 f827 	bl	8006cf0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_TIM|RCC_PERIPHCLK_SDIO
 8006ca2:	f44f 7344 	mov.w	r3, #784	; 0x310
 8006ca6:	60fb      	str	r3, [r7, #12]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIM = 8;
 8006ca8:	2308      	movs	r3, #8
 8006caa:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 96;
 8006cac:	2360      	movs	r3, #96	; 0x60
 8006cae:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8006cb0:	2302      	movs	r3, #2
 8006cb2:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 8006cb4:	2304      	movs	r3, #4
 8006cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8006cb8:	2301      	movs	r3, #1
 8006cba:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLSAIP;
 8006cc2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006cc6:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8006cc8:	2300      	movs	r3, #0
 8006cca:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006ccc:	f107 030c 	add.w	r3, r7, #12
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	f7fb fc4f 	bl	8002574 <HAL_RCCEx_PeriphCLKConfig>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d001      	beq.n	8006ce0 <SystemClock_Config+0x134>
  {
    Error_Handler();
 8006cdc:	f000 f808 	bl	8006cf0 <Error_Handler>
  }
}
 8006ce0:	bf00      	nop
 8006ce2:	37b0      	adds	r7, #176	; 0xb0
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}
 8006ce8:	40023800 	.word	0x40023800
 8006cec:	40007000 	.word	0x40007000

08006cf0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8006cf4:	bf00      	nop
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfc:	4770      	bx	lr
	...

08006d00 <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio_tx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	af00      	add	r7, sp, #0

  hsd.Instance = SDIO;
 8006d04:	4b14      	ldr	r3, [pc, #80]	; (8006d58 <MX_SDIO_SD_Init+0x58>)
 8006d06:	4a15      	ldr	r2, [pc, #84]	; (8006d5c <MX_SDIO_SD_Init+0x5c>)
 8006d08:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8006d0a:	4b13      	ldr	r3, [pc, #76]	; (8006d58 <MX_SDIO_SD_Init+0x58>)
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8006d10:	4b11      	ldr	r3, [pc, #68]	; (8006d58 <MX_SDIO_SD_Init+0x58>)
 8006d12:	2200      	movs	r2, #0
 8006d14:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8006d16:	4b10      	ldr	r3, [pc, #64]	; (8006d58 <MX_SDIO_SD_Init+0x58>)
 8006d18:	2200      	movs	r2, #0
 8006d1a:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8006d1c:	4b0e      	ldr	r3, [pc, #56]	; (8006d58 <MX_SDIO_SD_Init+0x58>)
 8006d1e:	2200      	movs	r2, #0
 8006d20:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_ENABLE;
 8006d22:	4b0d      	ldr	r3, [pc, #52]	; (8006d58 <MX_SDIO_SD_Init+0x58>)
 8006d24:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006d28:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8006d2a:	4b0b      	ldr	r3, [pc, #44]	; (8006d58 <MX_SDIO_SD_Init+0x58>)
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd) != HAL_OK)
 8006d30:	4809      	ldr	r0, [pc, #36]	; (8006d58 <MX_SDIO_SD_Init+0x58>)
 8006d32:	f7fc faf5 	bl	8003320 <HAL_SD_Init>
 8006d36:	4603      	mov	r3, r0
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d001      	beq.n	8006d40 <MX_SDIO_SD_Init+0x40>
  {
    Error_Handler();
 8006d3c:	f7ff ffd8 	bl	8006cf0 <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8006d40:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006d44:	4804      	ldr	r0, [pc, #16]	; (8006d58 <MX_SDIO_SD_Init+0x58>)
 8006d46:	f7fc ff1a 	bl	8003b7e <HAL_SD_ConfigWideBusOperation>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d001      	beq.n	8006d54 <MX_SDIO_SD_Init+0x54>
  {
    Error_Handler();
 8006d50:	f7ff ffce 	bl	8006cf0 <Error_Handler>
  }

}
 8006d54:	bf00      	nop
 8006d56:	bd80      	pop	{r7, pc}
 8006d58:	20000288 	.word	0x20000288
 8006d5c:	40012c00 	.word	0x40012c00

08006d60 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b08c      	sub	sp, #48	; 0x30
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d68:	f107 031c 	add.w	r3, r7, #28
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	601a      	str	r2, [r3, #0]
 8006d70:	605a      	str	r2, [r3, #4]
 8006d72:	609a      	str	r2, [r3, #8]
 8006d74:	60da      	str	r2, [r3, #12]
 8006d76:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4a5a      	ldr	r2, [pc, #360]	; (8006ee8 <HAL_SD_MspInit+0x188>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	f040 80ad 	bne.w	8006ede <HAL_SD_MspInit+0x17e>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8006d84:	2300      	movs	r3, #0
 8006d86:	61bb      	str	r3, [r7, #24]
 8006d88:	4a58      	ldr	r2, [pc, #352]	; (8006eec <HAL_SD_MspInit+0x18c>)
 8006d8a:	4b58      	ldr	r3, [pc, #352]	; (8006eec <HAL_SD_MspInit+0x18c>)
 8006d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d8e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006d92:	6453      	str	r3, [r2, #68]	; 0x44
 8006d94:	4b55      	ldr	r3, [pc, #340]	; (8006eec <HAL_SD_MspInit+0x18c>)
 8006d96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d9c:	61bb      	str	r3, [r7, #24]
 8006d9e:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006da0:	2300      	movs	r3, #0
 8006da2:	617b      	str	r3, [r7, #20]
 8006da4:	4a51      	ldr	r2, [pc, #324]	; (8006eec <HAL_SD_MspInit+0x18c>)
 8006da6:	4b51      	ldr	r3, [pc, #324]	; (8006eec <HAL_SD_MspInit+0x18c>)
 8006da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006daa:	f043 0302 	orr.w	r3, r3, #2
 8006dae:	6313      	str	r3, [r2, #48]	; 0x30
 8006db0:	4b4e      	ldr	r3, [pc, #312]	; (8006eec <HAL_SD_MspInit+0x18c>)
 8006db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006db4:	f003 0302 	and.w	r3, r3, #2
 8006db8:	617b      	str	r3, [r7, #20]
 8006dba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	613b      	str	r3, [r7, #16]
 8006dc0:	4a4a      	ldr	r2, [pc, #296]	; (8006eec <HAL_SD_MspInit+0x18c>)
 8006dc2:	4b4a      	ldr	r3, [pc, #296]	; (8006eec <HAL_SD_MspInit+0x18c>)
 8006dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dc6:	f043 0304 	orr.w	r3, r3, #4
 8006dca:	6313      	str	r3, [r2, #48]	; 0x30
 8006dcc:	4b47      	ldr	r3, [pc, #284]	; (8006eec <HAL_SD_MspInit+0x18c>)
 8006dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dd0:	f003 0304 	and.w	r3, r3, #4
 8006dd4:	613b      	str	r3, [r7, #16]
 8006dd6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006dd8:	2300      	movs	r3, #0
 8006dda:	60fb      	str	r3, [r7, #12]
 8006ddc:	4a43      	ldr	r2, [pc, #268]	; (8006eec <HAL_SD_MspInit+0x18c>)
 8006dde:	4b43      	ldr	r3, [pc, #268]	; (8006eec <HAL_SD_MspInit+0x18c>)
 8006de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006de2:	f043 0308 	orr.w	r3, r3, #8
 8006de6:	6313      	str	r3, [r2, #48]	; 0x30
 8006de8:	4b40      	ldr	r3, [pc, #256]	; (8006eec <HAL_SD_MspInit+0x18c>)
 8006dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dec:	f003 0308 	and.w	r3, r3, #8
 8006df0:	60fb      	str	r3, [r7, #12]
 8006df2:	68fb      	ldr	r3, [r7, #12]
    PC9     ------> SDIO_D1
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = SD_CLK_Pin;
 8006df4:	2304      	movs	r3, #4
 8006df6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006df8:	2302      	movs	r3, #2
 8006dfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e00:	2303      	movs	r3, #3
 8006e02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8006e04:	230c      	movs	r3, #12
 8006e06:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SD_CLK_GPIO_Port, &GPIO_InitStruct);
 8006e08:	f107 031c 	add.w	r3, r7, #28
 8006e0c:	4619      	mov	r1, r3
 8006e0e:	4838      	ldr	r0, [pc, #224]	; (8006ef0 <HAL_SD_MspInit+0x190>)
 8006e10:	f7fb f89e 	bl	8001f50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SD0_Pin|SD1_Pin|SD2_Pin|SD3_Pin;
 8006e14:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8006e18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e1a:	2302      	movs	r3, #2
 8006e1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006e1e:	2301      	movs	r3, #1
 8006e20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e22:	2303      	movs	r3, #3
 8006e24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8006e26:	230c      	movs	r3, #12
 8006e28:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006e2a:	f107 031c 	add.w	r3, r7, #28
 8006e2e:	4619      	mov	r1, r3
 8006e30:	4830      	ldr	r0, [pc, #192]	; (8006ef4 <HAL_SD_MspInit+0x194>)
 8006e32:	f7fb f88d 	bl	8001f50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SD_CMD_Pin;
 8006e36:	2304      	movs	r3, #4
 8006e38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e3a:	2302      	movs	r3, #2
 8006e3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e42:	2303      	movs	r3, #3
 8006e44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8006e46:	230c      	movs	r3, #12
 8006e48:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SD_CMD_GPIO_Port, &GPIO_InitStruct);
 8006e4a:	f107 031c 	add.w	r3, r7, #28
 8006e4e:	4619      	mov	r1, r3
 8006e50:	4829      	ldr	r0, [pc, #164]	; (8006ef8 <HAL_SD_MspInit+0x198>)
 8006e52:	f7fb f87d 	bl	8001f50 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream3;
 8006e56:	4b29      	ldr	r3, [pc, #164]	; (8006efc <HAL_SD_MspInit+0x19c>)
 8006e58:	4a29      	ldr	r2, [pc, #164]	; (8006f00 <HAL_SD_MspInit+0x1a0>)
 8006e5a:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8006e5c:	4b27      	ldr	r3, [pc, #156]	; (8006efc <HAL_SD_MspInit+0x19c>)
 8006e5e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006e62:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006e64:	4b25      	ldr	r3, [pc, #148]	; (8006efc <HAL_SD_MspInit+0x19c>)
 8006e66:	2240      	movs	r2, #64	; 0x40
 8006e68:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006e6a:	4b24      	ldr	r3, [pc, #144]	; (8006efc <HAL_SD_MspInit+0x19c>)
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006e70:	4b22      	ldr	r3, [pc, #136]	; (8006efc <HAL_SD_MspInit+0x19c>)
 8006e72:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006e76:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006e78:	4b20      	ldr	r3, [pc, #128]	; (8006efc <HAL_SD_MspInit+0x19c>)
 8006e7a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006e7e:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006e80:	4b1e      	ldr	r3, [pc, #120]	; (8006efc <HAL_SD_MspInit+0x19c>)
 8006e82:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006e86:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8006e88:	4b1c      	ldr	r3, [pc, #112]	; (8006efc <HAL_SD_MspInit+0x19c>)
 8006e8a:	2220      	movs	r2, #32
 8006e8c:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006e8e:	4b1b      	ldr	r3, [pc, #108]	; (8006efc <HAL_SD_MspInit+0x19c>)
 8006e90:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006e94:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006e96:	4b19      	ldr	r3, [pc, #100]	; (8006efc <HAL_SD_MspInit+0x19c>)
 8006e98:	2204      	movs	r2, #4
 8006e9a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8006e9c:	4b17      	ldr	r3, [pc, #92]	; (8006efc <HAL_SD_MspInit+0x19c>)
 8006e9e:	2203      	movs	r2, #3
 8006ea0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8006ea2:	4b16      	ldr	r3, [pc, #88]	; (8006efc <HAL_SD_MspInit+0x19c>)
 8006ea4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006ea8:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8006eaa:	4b14      	ldr	r3, [pc, #80]	; (8006efc <HAL_SD_MspInit+0x19c>)
 8006eac:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006eb0:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8006eb2:	4812      	ldr	r0, [pc, #72]	; (8006efc <HAL_SD_MspInit+0x19c>)
 8006eb4:	f7fa fcb4 	bl	8001820 <HAL_DMA_Init>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d001      	beq.n	8006ec2 <HAL_SD_MspInit+0x162>
    {
      Error_Handler();
 8006ebe:	f7ff ff17 	bl	8006cf0 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	4a0d      	ldr	r2, [pc, #52]	; (8006efc <HAL_SD_MspInit+0x19c>)
 8006ec6:	641a      	str	r2, [r3, #64]	; 0x40
 8006ec8:	4a0c      	ldr	r2, [pc, #48]	; (8006efc <HAL_SD_MspInit+0x19c>)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8006ece:	2200      	movs	r2, #0
 8006ed0:	2100      	movs	r1, #0
 8006ed2:	2031      	movs	r0, #49	; 0x31
 8006ed4:	f7fa faf1 	bl	80014ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8006ed8:	2031      	movs	r0, #49	; 0x31
 8006eda:	f7fa fb0a 	bl	80014f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8006ede:	bf00      	nop
 8006ee0:	3730      	adds	r7, #48	; 0x30
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}
 8006ee6:	bf00      	nop
 8006ee8:	40012c00 	.word	0x40012c00
 8006eec:	40023800 	.word	0x40023800
 8006ef0:	40020400 	.word	0x40020400
 8006ef4:	40020800 	.word	0x40020800
 8006ef8:	40020c00 	.word	0x40020c00
 8006efc:	20000228 	.word	0x20000228
 8006f00:	40026458 	.word	0x40026458

08006f04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006f04:	b480      	push	{r7}
 8006f06:	b083      	sub	sp, #12
 8006f08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	607b      	str	r3, [r7, #4]
 8006f0e:	4a10      	ldr	r2, [pc, #64]	; (8006f50 <HAL_MspInit+0x4c>)
 8006f10:	4b0f      	ldr	r3, [pc, #60]	; (8006f50 <HAL_MspInit+0x4c>)
 8006f12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006f18:	6453      	str	r3, [r2, #68]	; 0x44
 8006f1a:	4b0d      	ldr	r3, [pc, #52]	; (8006f50 <HAL_MspInit+0x4c>)
 8006f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f22:	607b      	str	r3, [r7, #4]
 8006f24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006f26:	2300      	movs	r3, #0
 8006f28:	603b      	str	r3, [r7, #0]
 8006f2a:	4a09      	ldr	r2, [pc, #36]	; (8006f50 <HAL_MspInit+0x4c>)
 8006f2c:	4b08      	ldr	r3, [pc, #32]	; (8006f50 <HAL_MspInit+0x4c>)
 8006f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f34:	6413      	str	r3, [r2, #64]	; 0x40
 8006f36:	4b06      	ldr	r3, [pc, #24]	; (8006f50 <HAL_MspInit+0x4c>)
 8006f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f3e:	603b      	str	r3, [r7, #0]
 8006f40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006f42:	bf00      	nop
 8006f44:	370c      	adds	r7, #12
 8006f46:	46bd      	mov	sp, r7
 8006f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4c:	4770      	bx	lr
 8006f4e:	bf00      	nop
 8006f50:	40023800 	.word	0x40023800

08006f54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006f54:	b480      	push	{r7}
 8006f56:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006f58:	bf00      	nop
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f60:	4770      	bx	lr

08006f62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006f62:	b480      	push	{r7}
 8006f64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006f66:	e7fe      	b.n	8006f66 <HardFault_Handler+0x4>

08006f68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006f6c:	e7fe      	b.n	8006f6c <MemManage_Handler+0x4>

08006f6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006f6e:	b480      	push	{r7}
 8006f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006f72:	e7fe      	b.n	8006f72 <BusFault_Handler+0x4>

08006f74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006f74:	b480      	push	{r7}
 8006f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006f78:	e7fe      	b.n	8006f78 <UsageFault_Handler+0x4>

08006f7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006f7a:	b480      	push	{r7}
 8006f7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006f7e:	bf00      	nop
 8006f80:	46bd      	mov	sp, r7
 8006f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f86:	4770      	bx	lr

08006f88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006f8c:	bf00      	nop
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f94:	4770      	bx	lr

08006f96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006f96:	b480      	push	{r7}
 8006f98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006f9a:	bf00      	nop
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa2:	4770      	bx	lr

08006fa4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006fa8:	f7f9 fb5c 	bl	8000664 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006fac:	bf00      	nop
 8006fae:	bd80      	pop	{r7, pc}

08006fb0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8006fb4:	4802      	ldr	r0, [pc, #8]	; (8006fc0 <DMA1_Stream5_IRQHandler+0x10>)
 8006fb6:	f7fa fd63 	bl	8001a80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8006fba:	bf00      	nop
 8006fbc:	bd80      	pop	{r7, pc}
 8006fbe:	bf00      	nop
 8006fc0:	200001a0 	.word	0x200001a0

08006fc4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8006fc8:	4802      	ldr	r0, [pc, #8]	; (8006fd4 <ADC_IRQHandler+0x10>)
 8006fca:	f7f9 fbd0 	bl	800076e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8006fce:	bf00      	nop
 8006fd0:	bd80      	pop	{r7, pc}
 8006fd2:	bf00      	nop
 8006fd4:	200000a8 	.word	0x200000a8

08006fd8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8006fdc:	4802      	ldr	r0, [pc, #8]	; (8006fe8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8006fde:	f7fd fa7c 	bl	80044da <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8006fe2:	bf00      	nop
 8006fe4:	bd80      	pop	{r7, pc}
 8006fe6:	bf00      	nop
 8006fe8:	20000348 	.word	0x20000348

08006fec <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8006ff0:	4802      	ldr	r0, [pc, #8]	; (8006ffc <TIM1_CC_IRQHandler+0x10>)
 8006ff2:	f7fd fa72 	bl	80044da <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8006ff6:	bf00      	nop
 8006ff8:	bd80      	pop	{r7, pc}
 8006ffa:	bf00      	nop
 8006ffc:	20000348 	.word	0x20000348

08007000 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8007004:	4802      	ldr	r0, [pc, #8]	; (8007010 <TIM4_IRQHandler+0x10>)
 8007006:	f7fd fa68 	bl	80044da <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800700a:	bf00      	nop
 800700c:	bd80      	pop	{r7, pc}
 800700e:	bf00      	nop
 8007010:	2000030c 	.word	0x2000030c

08007014 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8007018:	4802      	ldr	r0, [pc, #8]	; (8007024 <USART1_IRQHandler+0x10>)
 800701a:	f7fd fed9 	bl	8004dd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800701e:	bf00      	nop
 8007020:	bd80      	pop	{r7, pc}
 8007022:	bf00      	nop
 8007024:	20000420 	.word	0x20000420

08007028 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 800702c:	4802      	ldr	r0, [pc, #8]	; (8007038 <SDIO_IRQHandler+0x10>)
 800702e:	f7fc f9ff 	bl	8003430 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8007032:	bf00      	nop
 8007034:	bd80      	pop	{r7, pc}
 8007036:	bf00      	nop
 8007038:	20000288 	.word	0x20000288

0800703c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8007040:	4802      	ldr	r0, [pc, #8]	; (800704c <TIM6_DAC_IRQHandler+0x10>)
 8007042:	f7fa fb0e 	bl	8001662 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8007046:	bf00      	nop
 8007048:	bd80      	pop	{r7, pc}
 800704a:	bf00      	nop
 800704c:	20000200 	.word	0x20000200

08007050 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8007054:	4802      	ldr	r0, [pc, #8]	; (8007060 <DMA2_Stream0_IRQHandler+0x10>)
 8007056:	f7fa fd13 	bl	8001a80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800705a:	bf00      	nop
 800705c:	bd80      	pop	{r7, pc}
 800705e:	bf00      	nop
 8007060:	200000f0 	.word	0x200000f0

08007064 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8007068:	4802      	ldr	r0, [pc, #8]	; (8007074 <DMA2_Stream3_IRQHandler+0x10>)
 800706a:	f7fa fd09 	bl	8001a80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800706e:	bf00      	nop
 8007070:	bd80      	pop	{r7, pc}
 8007072:	bf00      	nop
 8007074:	20000228 	.word	0x20000228

08007078 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800707c:	4802      	ldr	r0, [pc, #8]	; (8007088 <DMA2_Stream7_IRQHandler+0x10>)
 800707e:	f7fa fcff 	bl	8001a80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8007082:	bf00      	nop
 8007084:	bd80      	pop	{r7, pc}
 8007086:	bf00      	nop
 8007088:	200003c0 	.word	0x200003c0

0800708c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800708c:	b480      	push	{r7}
 800708e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007090:	4a16      	ldr	r2, [pc, #88]	; (80070ec <SystemInit+0x60>)
 8007092:	4b16      	ldr	r3, [pc, #88]	; (80070ec <SystemInit+0x60>)
 8007094:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007098:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800709c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80070a0:	4a13      	ldr	r2, [pc, #76]	; (80070f0 <SystemInit+0x64>)
 80070a2:	4b13      	ldr	r3, [pc, #76]	; (80070f0 <SystemInit+0x64>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f043 0301 	orr.w	r3, r3, #1
 80070aa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80070ac:	4b10      	ldr	r3, [pc, #64]	; (80070f0 <SystemInit+0x64>)
 80070ae:	2200      	movs	r2, #0
 80070b0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80070b2:	4a0f      	ldr	r2, [pc, #60]	; (80070f0 <SystemInit+0x64>)
 80070b4:	4b0e      	ldr	r3, [pc, #56]	; (80070f0 <SystemInit+0x64>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80070bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070c0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80070c2:	4b0b      	ldr	r3, [pc, #44]	; (80070f0 <SystemInit+0x64>)
 80070c4:	4a0b      	ldr	r2, [pc, #44]	; (80070f4 <SystemInit+0x68>)
 80070c6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80070c8:	4a09      	ldr	r2, [pc, #36]	; (80070f0 <SystemInit+0x64>)
 80070ca:	4b09      	ldr	r3, [pc, #36]	; (80070f0 <SystemInit+0x64>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80070d2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80070d4:	4b06      	ldr	r3, [pc, #24]	; (80070f0 <SystemInit+0x64>)
 80070d6:	2200      	movs	r2, #0
 80070d8:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80070da:	4b04      	ldr	r3, [pc, #16]	; (80070ec <SystemInit+0x60>)
 80070dc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80070e0:	609a      	str	r2, [r3, #8]
#endif
}
 80070e2:	bf00      	nop
 80070e4:	46bd      	mov	sp, r7
 80070e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ea:	4770      	bx	lr
 80070ec:	e000ed00 	.word	0xe000ed00
 80070f0:	40023800 	.word	0x40023800
 80070f4:	24003010 	.word	0x24003010

080070f8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b086      	sub	sp, #24
 80070fc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80070fe:	f107 0308 	add.w	r3, r7, #8
 8007102:	2200      	movs	r2, #0
 8007104:	601a      	str	r2, [r3, #0]
 8007106:	605a      	str	r2, [r3, #4]
 8007108:	609a      	str	r2, [r3, #8]
 800710a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800710c:	463b      	mov	r3, r7
 800710e:	2200      	movs	r2, #0
 8007110:	601a      	str	r2, [r3, #0]
 8007112:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8007114:	4b1e      	ldr	r3, [pc, #120]	; (8007190 <MX_TIM1_Init+0x98>)
 8007116:	4a1f      	ldr	r2, [pc, #124]	; (8007194 <MX_TIM1_Init+0x9c>)
 8007118:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1000;
 800711a:	4b1d      	ldr	r3, [pc, #116]	; (8007190 <MX_TIM1_Init+0x98>)
 800711c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007120:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007122:	4b1b      	ldr	r3, [pc, #108]	; (8007190 <MX_TIM1_Init+0x98>)
 8007124:	2200      	movs	r2, #0
 8007126:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 45000;
 8007128:	4b19      	ldr	r3, [pc, #100]	; (8007190 <MX_TIM1_Init+0x98>)
 800712a:	f64a 72c8 	movw	r2, #45000	; 0xafc8
 800712e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8007130:	4b17      	ldr	r3, [pc, #92]	; (8007190 <MX_TIM1_Init+0x98>)
 8007132:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007136:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8007138:	4b15      	ldr	r3, [pc, #84]	; (8007190 <MX_TIM1_Init+0x98>)
 800713a:	2200      	movs	r2, #0
 800713c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800713e:	4814      	ldr	r0, [pc, #80]	; (8007190 <MX_TIM1_Init+0x98>)
 8007140:	f7fd f985 	bl	800444e <HAL_TIM_Base_Init>
 8007144:	4603      	mov	r3, r0
 8007146:	2b00      	cmp	r3, #0
 8007148:	d001      	beq.n	800714e <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 800714a:	f7ff fdd1 	bl	8006cf0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800714e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007152:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8007154:	f107 0308 	add.w	r3, r7, #8
 8007158:	4619      	mov	r1, r3
 800715a:	480d      	ldr	r0, [pc, #52]	; (8007190 <MX_TIM1_Init+0x98>)
 800715c:	f7fd fac5 	bl	80046ea <HAL_TIM_ConfigClockSource>
 8007160:	4603      	mov	r3, r0
 8007162:	2b00      	cmp	r3, #0
 8007164:	d001      	beq.n	800716a <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 8007166:	f7ff fdc3 	bl	8006cf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800716a:	2300      	movs	r3, #0
 800716c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800716e:	2300      	movs	r3, #0
 8007170:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8007172:	463b      	mov	r3, r7
 8007174:	4619      	mov	r1, r3
 8007176:	4806      	ldr	r0, [pc, #24]	; (8007190 <MX_TIM1_Init+0x98>)
 8007178:	f7fd fd17 	bl	8004baa <HAL_TIMEx_MasterConfigSynchronization>
 800717c:	4603      	mov	r3, r0
 800717e:	2b00      	cmp	r3, #0
 8007180:	d001      	beq.n	8007186 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8007182:	f7ff fdb5 	bl	8006cf0 <Error_Handler>
  }

}
 8007186:	bf00      	nop
 8007188:	3718      	adds	r7, #24
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}
 800718e:	bf00      	nop
 8007190:	20000348 	.word	0x20000348
 8007194:	40010000 	.word	0x40010000

08007198 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b086      	sub	sp, #24
 800719c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800719e:	f107 0308 	add.w	r3, r7, #8
 80071a2:	2200      	movs	r2, #0
 80071a4:	601a      	str	r2, [r3, #0]
 80071a6:	605a      	str	r2, [r3, #4]
 80071a8:	609a      	str	r2, [r3, #8]
 80071aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80071ac:	463b      	mov	r3, r7
 80071ae:	2200      	movs	r2, #0
 80071b0:	601a      	str	r2, [r3, #0]
 80071b2:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 80071b4:	4b1c      	ldr	r3, [pc, #112]	; (8007228 <MX_TIM2_Init+0x90>)
 80071b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80071ba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 179;
 80071bc:	4b1a      	ldr	r3, [pc, #104]	; (8007228 <MX_TIM2_Init+0x90>)
 80071be:	22b3      	movs	r2, #179	; 0xb3
 80071c0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80071c2:	4b19      	ldr	r3, [pc, #100]	; (8007228 <MX_TIM2_Init+0x90>)
 80071c4:	2200      	movs	r2, #0
 80071c6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80071c8:	4b17      	ldr	r3, [pc, #92]	; (8007228 <MX_TIM2_Init+0x90>)
 80071ca:	f240 32e7 	movw	r2, #999	; 0x3e7
 80071ce:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80071d0:	4b15      	ldr	r3, [pc, #84]	; (8007228 <MX_TIM2_Init+0x90>)
 80071d2:	2200      	movs	r2, #0
 80071d4:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80071d6:	4814      	ldr	r0, [pc, #80]	; (8007228 <MX_TIM2_Init+0x90>)
 80071d8:	f7fd f939 	bl	800444e <HAL_TIM_Base_Init>
 80071dc:	4603      	mov	r3, r0
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d001      	beq.n	80071e6 <MX_TIM2_Init+0x4e>
  {
    Error_Handler();
 80071e2:	f7ff fd85 	bl	8006cf0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80071e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80071ea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80071ec:	f107 0308 	add.w	r3, r7, #8
 80071f0:	4619      	mov	r1, r3
 80071f2:	480d      	ldr	r0, [pc, #52]	; (8007228 <MX_TIM2_Init+0x90>)
 80071f4:	f7fd fa79 	bl	80046ea <HAL_TIM_ConfigClockSource>
 80071f8:	4603      	mov	r3, r0
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d001      	beq.n	8007202 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80071fe:	f7ff fd77 	bl	8006cf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8007202:	2320      	movs	r3, #32
 8007204:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007206:	2300      	movs	r3, #0
 8007208:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800720a:	463b      	mov	r3, r7
 800720c:	4619      	mov	r1, r3
 800720e:	4806      	ldr	r0, [pc, #24]	; (8007228 <MX_TIM2_Init+0x90>)
 8007210:	f7fd fccb 	bl	8004baa <HAL_TIMEx_MasterConfigSynchronization>
 8007214:	4603      	mov	r3, r0
 8007216:	2b00      	cmp	r3, #0
 8007218:	d001      	beq.n	800721e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800721a:	f7ff fd69 	bl	8006cf0 <Error_Handler>
  }

}
 800721e:	bf00      	nop
 8007220:	3718      	adds	r7, #24
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}
 8007226:	bf00      	nop
 8007228:	20000384 	.word	0x20000384

0800722c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b086      	sub	sp, #24
 8007230:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007232:	f107 0308 	add.w	r3, r7, #8
 8007236:	2200      	movs	r2, #0
 8007238:	601a      	str	r2, [r3, #0]
 800723a:	605a      	str	r2, [r3, #4]
 800723c:	609a      	str	r2, [r3, #8]
 800723e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007240:	463b      	mov	r3, r7
 8007242:	2200      	movs	r2, #0
 8007244:	601a      	str	r2, [r3, #0]
 8007246:	605a      	str	r2, [r3, #4]

  htim4.Instance = TIM4;
 8007248:	4b1b      	ldr	r3, [pc, #108]	; (80072b8 <MX_TIM4_Init+0x8c>)
 800724a:	4a1c      	ldr	r2, [pc, #112]	; (80072bc <MX_TIM4_Init+0x90>)
 800724c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 179;
 800724e:	4b1a      	ldr	r3, [pc, #104]	; (80072b8 <MX_TIM4_Init+0x8c>)
 8007250:	22b3      	movs	r2, #179	; 0xb3
 8007252:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007254:	4b18      	ldr	r3, [pc, #96]	; (80072b8 <MX_TIM4_Init+0x8c>)
 8007256:	2200      	movs	r2, #0
 8007258:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 800725a:	4b17      	ldr	r3, [pc, #92]	; (80072b8 <MX_TIM4_Init+0x8c>)
 800725c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8007260:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007262:	4b15      	ldr	r3, [pc, #84]	; (80072b8 <MX_TIM4_Init+0x8c>)
 8007264:	2200      	movs	r2, #0
 8007266:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8007268:	4813      	ldr	r0, [pc, #76]	; (80072b8 <MX_TIM4_Init+0x8c>)
 800726a:	f7fd f8f0 	bl	800444e <HAL_TIM_Base_Init>
 800726e:	4603      	mov	r3, r0
 8007270:	2b00      	cmp	r3, #0
 8007272:	d001      	beq.n	8007278 <MX_TIM4_Init+0x4c>
  {
    Error_Handler();
 8007274:	f7ff fd3c 	bl	8006cf0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007278:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800727c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800727e:	f107 0308 	add.w	r3, r7, #8
 8007282:	4619      	mov	r1, r3
 8007284:	480c      	ldr	r0, [pc, #48]	; (80072b8 <MX_TIM4_Init+0x8c>)
 8007286:	f7fd fa30 	bl	80046ea <HAL_TIM_ConfigClockSource>
 800728a:	4603      	mov	r3, r0
 800728c:	2b00      	cmp	r3, #0
 800728e:	d001      	beq.n	8007294 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8007290:	f7ff fd2e 	bl	8006cf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8007294:	2320      	movs	r3, #32
 8007296:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007298:	2300      	movs	r3, #0
 800729a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800729c:	463b      	mov	r3, r7
 800729e:	4619      	mov	r1, r3
 80072a0:	4805      	ldr	r0, [pc, #20]	; (80072b8 <MX_TIM4_Init+0x8c>)
 80072a2:	f7fd fc82 	bl	8004baa <HAL_TIMEx_MasterConfigSynchronization>
 80072a6:	4603      	mov	r3, r0
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d001      	beq.n	80072b0 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80072ac:	f7ff fd20 	bl	8006cf0 <Error_Handler>
  }

}
 80072b0:	bf00      	nop
 80072b2:	3718      	adds	r7, #24
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}
 80072b8:	2000030c 	.word	0x2000030c
 80072bc:	40000800 	.word	0x40000800

080072c0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b086      	sub	sp, #24
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4a2a      	ldr	r2, [pc, #168]	; (8007378 <HAL_TIM_Base_MspInit+0xb8>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d11e      	bne.n	8007310 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80072d2:	2300      	movs	r3, #0
 80072d4:	617b      	str	r3, [r7, #20]
 80072d6:	4a29      	ldr	r2, [pc, #164]	; (800737c <HAL_TIM_Base_MspInit+0xbc>)
 80072d8:	4b28      	ldr	r3, [pc, #160]	; (800737c <HAL_TIM_Base_MspInit+0xbc>)
 80072da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072dc:	f043 0301 	orr.w	r3, r3, #1
 80072e0:	6453      	str	r3, [r2, #68]	; 0x44
 80072e2:	4b26      	ldr	r3, [pc, #152]	; (800737c <HAL_TIM_Base_MspInit+0xbc>)
 80072e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072e6:	f003 0301 	and.w	r3, r3, #1
 80072ea:	617b      	str	r3, [r7, #20]
 80072ec:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80072ee:	2200      	movs	r2, #0
 80072f0:	2100      	movs	r1, #0
 80072f2:	2019      	movs	r0, #25
 80072f4:	f7fa f8e1 	bl	80014ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80072f8:	2019      	movs	r0, #25
 80072fa:	f7fa f8fa 	bl	80014f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80072fe:	2200      	movs	r2, #0
 8007300:	2100      	movs	r1, #0
 8007302:	201b      	movs	r0, #27
 8007304:	f7fa f8d9 	bl	80014ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8007308:	201b      	movs	r0, #27
 800730a:	f7fa f8f2 	bl	80014f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800730e:	e02e      	b.n	800736e <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM2)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007318:	d10e      	bne.n	8007338 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800731a:	2300      	movs	r3, #0
 800731c:	613b      	str	r3, [r7, #16]
 800731e:	4a17      	ldr	r2, [pc, #92]	; (800737c <HAL_TIM_Base_MspInit+0xbc>)
 8007320:	4b16      	ldr	r3, [pc, #88]	; (800737c <HAL_TIM_Base_MspInit+0xbc>)
 8007322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007324:	f043 0301 	orr.w	r3, r3, #1
 8007328:	6413      	str	r3, [r2, #64]	; 0x40
 800732a:	4b14      	ldr	r3, [pc, #80]	; (800737c <HAL_TIM_Base_MspInit+0xbc>)
 800732c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800732e:	f003 0301 	and.w	r3, r3, #1
 8007332:	613b      	str	r3, [r7, #16]
 8007334:	693b      	ldr	r3, [r7, #16]
}
 8007336:	e01a      	b.n	800736e <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM4)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4a10      	ldr	r2, [pc, #64]	; (8007380 <HAL_TIM_Base_MspInit+0xc0>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d115      	bne.n	800736e <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8007342:	2300      	movs	r3, #0
 8007344:	60fb      	str	r3, [r7, #12]
 8007346:	4a0d      	ldr	r2, [pc, #52]	; (800737c <HAL_TIM_Base_MspInit+0xbc>)
 8007348:	4b0c      	ldr	r3, [pc, #48]	; (800737c <HAL_TIM_Base_MspInit+0xbc>)
 800734a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800734c:	f043 0304 	orr.w	r3, r3, #4
 8007350:	6413      	str	r3, [r2, #64]	; 0x40
 8007352:	4b0a      	ldr	r3, [pc, #40]	; (800737c <HAL_TIM_Base_MspInit+0xbc>)
 8007354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007356:	f003 0304 	and.w	r3, r3, #4
 800735a:	60fb      	str	r3, [r7, #12]
 800735c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800735e:	2200      	movs	r2, #0
 8007360:	2100      	movs	r1, #0
 8007362:	201e      	movs	r0, #30
 8007364:	f7fa f8a9 	bl	80014ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8007368:	201e      	movs	r0, #30
 800736a:	f7fa f8c2 	bl	80014f2 <HAL_NVIC_EnableIRQ>
}
 800736e:	bf00      	nop
 8007370:	3718      	adds	r7, #24
 8007372:	46bd      	mov	sp, r7
 8007374:	bd80      	pop	{r7, pc}
 8007376:	bf00      	nop
 8007378:	40010000 	.word	0x40010000
 800737c:	40023800 	.word	0x40023800
 8007380:	40000800 	.word	0x40000800

08007384 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8007388:	4b11      	ldr	r3, [pc, #68]	; (80073d0 <MX_USART1_UART_Init+0x4c>)
 800738a:	4a12      	ldr	r2, [pc, #72]	; (80073d4 <MX_USART1_UART_Init+0x50>)
 800738c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800738e:	4b10      	ldr	r3, [pc, #64]	; (80073d0 <MX_USART1_UART_Init+0x4c>)
 8007390:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007394:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007396:	4b0e      	ldr	r3, [pc, #56]	; (80073d0 <MX_USART1_UART_Init+0x4c>)
 8007398:	2200      	movs	r2, #0
 800739a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800739c:	4b0c      	ldr	r3, [pc, #48]	; (80073d0 <MX_USART1_UART_Init+0x4c>)
 800739e:	2200      	movs	r2, #0
 80073a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80073a2:	4b0b      	ldr	r3, [pc, #44]	; (80073d0 <MX_USART1_UART_Init+0x4c>)
 80073a4:	2200      	movs	r2, #0
 80073a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80073a8:	4b09      	ldr	r3, [pc, #36]	; (80073d0 <MX_USART1_UART_Init+0x4c>)
 80073aa:	220c      	movs	r2, #12
 80073ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80073ae:	4b08      	ldr	r3, [pc, #32]	; (80073d0 <MX_USART1_UART_Init+0x4c>)
 80073b0:	2200      	movs	r2, #0
 80073b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80073b4:	4b06      	ldr	r3, [pc, #24]	; (80073d0 <MX_USART1_UART_Init+0x4c>)
 80073b6:	2200      	movs	r2, #0
 80073b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80073ba:	4805      	ldr	r0, [pc, #20]	; (80073d0 <MX_USART1_UART_Init+0x4c>)
 80073bc:	f7fd fc4e 	bl	8004c5c <HAL_UART_Init>
 80073c0:	4603      	mov	r3, r0
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d001      	beq.n	80073ca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80073c6:	f7ff fc93 	bl	8006cf0 <Error_Handler>
  }

}
 80073ca:	bf00      	nop
 80073cc:	bd80      	pop	{r7, pc}
 80073ce:	bf00      	nop
 80073d0:	20000420 	.word	0x20000420
 80073d4:	40011000 	.word	0x40011000

080073d8 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	af00      	add	r7, sp, #0

  huart6.Instance = USART6;
 80073dc:	4b11      	ldr	r3, [pc, #68]	; (8007424 <MX_USART6_UART_Init+0x4c>)
 80073de:	4a12      	ldr	r2, [pc, #72]	; (8007428 <MX_USART6_UART_Init+0x50>)
 80073e0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80073e2:	4b10      	ldr	r3, [pc, #64]	; (8007424 <MX_USART6_UART_Init+0x4c>)
 80073e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80073e8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80073ea:	4b0e      	ldr	r3, [pc, #56]	; (8007424 <MX_USART6_UART_Init+0x4c>)
 80073ec:	2200      	movs	r2, #0
 80073ee:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80073f0:	4b0c      	ldr	r3, [pc, #48]	; (8007424 <MX_USART6_UART_Init+0x4c>)
 80073f2:	2200      	movs	r2, #0
 80073f4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80073f6:	4b0b      	ldr	r3, [pc, #44]	; (8007424 <MX_USART6_UART_Init+0x4c>)
 80073f8:	2200      	movs	r2, #0
 80073fa:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80073fc:	4b09      	ldr	r3, [pc, #36]	; (8007424 <MX_USART6_UART_Init+0x4c>)
 80073fe:	220c      	movs	r2, #12
 8007400:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007402:	4b08      	ldr	r3, [pc, #32]	; (8007424 <MX_USART6_UART_Init+0x4c>)
 8007404:	2200      	movs	r2, #0
 8007406:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8007408:	4b06      	ldr	r3, [pc, #24]	; (8007424 <MX_USART6_UART_Init+0x4c>)
 800740a:	2200      	movs	r2, #0
 800740c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800740e:	4805      	ldr	r0, [pc, #20]	; (8007424 <MX_USART6_UART_Init+0x4c>)
 8007410:	f7fd fc24 	bl	8004c5c <HAL_UART_Init>
 8007414:	4603      	mov	r3, r0
 8007416:	2b00      	cmp	r3, #0
 8007418:	d001      	beq.n	800741e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800741a:	f7ff fc69 	bl	8006cf0 <Error_Handler>
  }

}
 800741e:	bf00      	nop
 8007420:	bd80      	pop	{r7, pc}
 8007422:	bf00      	nop
 8007424:	20000460 	.word	0x20000460
 8007428:	40011400 	.word	0x40011400

0800742c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b08c      	sub	sp, #48	; 0x30
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007434:	f107 031c 	add.w	r3, r7, #28
 8007438:	2200      	movs	r2, #0
 800743a:	601a      	str	r2, [r3, #0]
 800743c:	605a      	str	r2, [r3, #4]
 800743e:	609a      	str	r2, [r3, #8]
 8007440:	60da      	str	r2, [r3, #12]
 8007442:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4a4d      	ldr	r2, [pc, #308]	; (8007580 <HAL_UART_MspInit+0x154>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d162      	bne.n	8007514 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800744e:	2300      	movs	r3, #0
 8007450:	61bb      	str	r3, [r7, #24]
 8007452:	4a4c      	ldr	r2, [pc, #304]	; (8007584 <HAL_UART_MspInit+0x158>)
 8007454:	4b4b      	ldr	r3, [pc, #300]	; (8007584 <HAL_UART_MspInit+0x158>)
 8007456:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007458:	f043 0310 	orr.w	r3, r3, #16
 800745c:	6453      	str	r3, [r2, #68]	; 0x44
 800745e:	4b49      	ldr	r3, [pc, #292]	; (8007584 <HAL_UART_MspInit+0x158>)
 8007460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007462:	f003 0310 	and.w	r3, r3, #16
 8007466:	61bb      	str	r3, [r7, #24]
 8007468:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800746a:	2300      	movs	r3, #0
 800746c:	617b      	str	r3, [r7, #20]
 800746e:	4a45      	ldr	r2, [pc, #276]	; (8007584 <HAL_UART_MspInit+0x158>)
 8007470:	4b44      	ldr	r3, [pc, #272]	; (8007584 <HAL_UART_MspInit+0x158>)
 8007472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007474:	f043 0302 	orr.w	r3, r3, #2
 8007478:	6313      	str	r3, [r2, #48]	; 0x30
 800747a:	4b42      	ldr	r3, [pc, #264]	; (8007584 <HAL_UART_MspInit+0x158>)
 800747c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800747e:	f003 0302 	and.w	r3, r3, #2
 8007482:	617b      	str	r3, [r7, #20]
 8007484:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007486:	23c0      	movs	r3, #192	; 0xc0
 8007488:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800748a:	2302      	movs	r3, #2
 800748c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800748e:	2301      	movs	r3, #1
 8007490:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007492:	2303      	movs	r3, #3
 8007494:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8007496:	2307      	movs	r3, #7
 8007498:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800749a:	f107 031c 	add.w	r3, r7, #28
 800749e:	4619      	mov	r1, r3
 80074a0:	4839      	ldr	r0, [pc, #228]	; (8007588 <HAL_UART_MspInit+0x15c>)
 80074a2:	f7fa fd55 	bl	8001f50 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80074a6:	4b39      	ldr	r3, [pc, #228]	; (800758c <HAL_UART_MspInit+0x160>)
 80074a8:	4a39      	ldr	r2, [pc, #228]	; (8007590 <HAL_UART_MspInit+0x164>)
 80074aa:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80074ac:	4b37      	ldr	r3, [pc, #220]	; (800758c <HAL_UART_MspInit+0x160>)
 80074ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80074b2:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80074b4:	4b35      	ldr	r3, [pc, #212]	; (800758c <HAL_UART_MspInit+0x160>)
 80074b6:	2240      	movs	r2, #64	; 0x40
 80074b8:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80074ba:	4b34      	ldr	r3, [pc, #208]	; (800758c <HAL_UART_MspInit+0x160>)
 80074bc:	2200      	movs	r2, #0
 80074be:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80074c0:	4b32      	ldr	r3, [pc, #200]	; (800758c <HAL_UART_MspInit+0x160>)
 80074c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80074c6:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80074c8:	4b30      	ldr	r3, [pc, #192]	; (800758c <HAL_UART_MspInit+0x160>)
 80074ca:	2200      	movs	r2, #0
 80074cc:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80074ce:	4b2f      	ldr	r3, [pc, #188]	; (800758c <HAL_UART_MspInit+0x160>)
 80074d0:	2200      	movs	r2, #0
 80074d2:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80074d4:	4b2d      	ldr	r3, [pc, #180]	; (800758c <HAL_UART_MspInit+0x160>)
 80074d6:	2200      	movs	r2, #0
 80074d8:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80074da:	4b2c      	ldr	r3, [pc, #176]	; (800758c <HAL_UART_MspInit+0x160>)
 80074dc:	2200      	movs	r2, #0
 80074de:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80074e0:	4b2a      	ldr	r3, [pc, #168]	; (800758c <HAL_UART_MspInit+0x160>)
 80074e2:	2200      	movs	r2, #0
 80074e4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80074e6:	4829      	ldr	r0, [pc, #164]	; (800758c <HAL_UART_MspInit+0x160>)
 80074e8:	f7fa f99a 	bl	8001820 <HAL_DMA_Init>
 80074ec:	4603      	mov	r3, r0
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d001      	beq.n	80074f6 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 80074f2:	f7ff fbfd 	bl	8006cf0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	4a24      	ldr	r2, [pc, #144]	; (800758c <HAL_UART_MspInit+0x160>)
 80074fa:	631a      	str	r2, [r3, #48]	; 0x30
 80074fc:	4a23      	ldr	r2, [pc, #140]	; (800758c <HAL_UART_MspInit+0x160>)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8007502:	2200      	movs	r2, #0
 8007504:	2100      	movs	r1, #0
 8007506:	2025      	movs	r0, #37	; 0x25
 8007508:	f7f9 ffd7 	bl	80014ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800750c:	2025      	movs	r0, #37	; 0x25
 800750e:	f7f9 fff0 	bl	80014f2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8007512:	e030      	b.n	8007576 <HAL_UART_MspInit+0x14a>
  else if(uartHandle->Instance==USART6)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4a1e      	ldr	r2, [pc, #120]	; (8007594 <HAL_UART_MspInit+0x168>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d12b      	bne.n	8007576 <HAL_UART_MspInit+0x14a>
    __HAL_RCC_USART6_CLK_ENABLE();
 800751e:	2300      	movs	r3, #0
 8007520:	613b      	str	r3, [r7, #16]
 8007522:	4a18      	ldr	r2, [pc, #96]	; (8007584 <HAL_UART_MspInit+0x158>)
 8007524:	4b17      	ldr	r3, [pc, #92]	; (8007584 <HAL_UART_MspInit+0x158>)
 8007526:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007528:	f043 0320 	orr.w	r3, r3, #32
 800752c:	6453      	str	r3, [r2, #68]	; 0x44
 800752e:	4b15      	ldr	r3, [pc, #84]	; (8007584 <HAL_UART_MspInit+0x158>)
 8007530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007532:	f003 0320 	and.w	r3, r3, #32
 8007536:	613b      	str	r3, [r7, #16]
 8007538:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800753a:	2300      	movs	r3, #0
 800753c:	60fb      	str	r3, [r7, #12]
 800753e:	4a11      	ldr	r2, [pc, #68]	; (8007584 <HAL_UART_MspInit+0x158>)
 8007540:	4b10      	ldr	r3, [pc, #64]	; (8007584 <HAL_UART_MspInit+0x158>)
 8007542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007544:	f043 0304 	orr.w	r3, r3, #4
 8007548:	6313      	str	r3, [r2, #48]	; 0x30
 800754a:	4b0e      	ldr	r3, [pc, #56]	; (8007584 <HAL_UART_MspInit+0x158>)
 800754c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800754e:	f003 0304 	and.w	r3, r3, #4
 8007552:	60fb      	str	r3, [r7, #12]
 8007554:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BMS_TX_Pin|BMS_RX_Pin;
 8007556:	23c0      	movs	r3, #192	; 0xc0
 8007558:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800755a:	2302      	movs	r3, #2
 800755c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800755e:	2301      	movs	r3, #1
 8007560:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007562:	2303      	movs	r3, #3
 8007564:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8007566:	2308      	movs	r3, #8
 8007568:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800756a:	f107 031c 	add.w	r3, r7, #28
 800756e:	4619      	mov	r1, r3
 8007570:	4809      	ldr	r0, [pc, #36]	; (8007598 <HAL_UART_MspInit+0x16c>)
 8007572:	f7fa fced 	bl	8001f50 <HAL_GPIO_Init>
}
 8007576:	bf00      	nop
 8007578:	3730      	adds	r7, #48	; 0x30
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}
 800757e:	bf00      	nop
 8007580:	40011000 	.word	0x40011000
 8007584:	40023800 	.word	0x40023800
 8007588:	40020400 	.word	0x40020400
 800758c:	200003c0 	.word	0x200003c0
 8007590:	400264b8 	.word	0x400264b8
 8007594:	40011400 	.word	0x40011400
 8007598:	40020800 	.word	0x40020800

0800759c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800759c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80075d4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80075a0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80075a2:	e003      	b.n	80075ac <LoopCopyDataInit>

080075a4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80075a4:	4b0c      	ldr	r3, [pc, #48]	; (80075d8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80075a6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80075a8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80075aa:	3104      	adds	r1, #4

080075ac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80075ac:	480b      	ldr	r0, [pc, #44]	; (80075dc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80075ae:	4b0c      	ldr	r3, [pc, #48]	; (80075e0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80075b0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80075b2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80075b4:	d3f6      	bcc.n	80075a4 <CopyDataInit>
  ldr  r2, =_sbss
 80075b6:	4a0b      	ldr	r2, [pc, #44]	; (80075e4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80075b8:	e002      	b.n	80075c0 <LoopFillZerobss>

080075ba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80075ba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80075bc:	f842 3b04 	str.w	r3, [r2], #4

080075c0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80075c0:	4b09      	ldr	r3, [pc, #36]	; (80075e8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80075c2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80075c4:	d3f9      	bcc.n	80075ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80075c6:	f7ff fd61 	bl	800708c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80075ca:	f000 f811 	bl	80075f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80075ce:	f7ff fa65 	bl	8006a9c <main>
  bx  lr    
 80075d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80075d4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80075d8:	08008678 	.word	0x08008678
  ldr  r0, =_sdata
 80075dc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80075e0:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 80075e4:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 80075e8:	200004a4 	.word	0x200004a4

080075ec <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80075ec:	e7fe      	b.n	80075ec <CAN1_RX0_IRQHandler>
	...

080075f0 <__libc_init_array>:
 80075f0:	b570      	push	{r4, r5, r6, lr}
 80075f2:	4e0d      	ldr	r6, [pc, #52]	; (8007628 <__libc_init_array+0x38>)
 80075f4:	4c0d      	ldr	r4, [pc, #52]	; (800762c <__libc_init_array+0x3c>)
 80075f6:	1ba4      	subs	r4, r4, r6
 80075f8:	10a4      	asrs	r4, r4, #2
 80075fa:	2500      	movs	r5, #0
 80075fc:	42a5      	cmp	r5, r4
 80075fe:	d109      	bne.n	8007614 <__libc_init_array+0x24>
 8007600:	4e0b      	ldr	r6, [pc, #44]	; (8007630 <__libc_init_array+0x40>)
 8007602:	4c0c      	ldr	r4, [pc, #48]	; (8007634 <__libc_init_array+0x44>)
 8007604:	f000 ff4e 	bl	80084a4 <_init>
 8007608:	1ba4      	subs	r4, r4, r6
 800760a:	10a4      	asrs	r4, r4, #2
 800760c:	2500      	movs	r5, #0
 800760e:	42a5      	cmp	r5, r4
 8007610:	d105      	bne.n	800761e <__libc_init_array+0x2e>
 8007612:	bd70      	pop	{r4, r5, r6, pc}
 8007614:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007618:	4798      	blx	r3
 800761a:	3501      	adds	r5, #1
 800761c:	e7ee      	b.n	80075fc <__libc_init_array+0xc>
 800761e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007622:	4798      	blx	r3
 8007624:	3501      	adds	r5, #1
 8007626:	e7f2      	b.n	800760e <__libc_init_array+0x1e>
 8007628:	08008670 	.word	0x08008670
 800762c:	08008670 	.word	0x08008670
 8007630:	08008670 	.word	0x08008670
 8007634:	08008674 	.word	0x08008674

08007638 <memset>:
 8007638:	4402      	add	r2, r0
 800763a:	4603      	mov	r3, r0
 800763c:	4293      	cmp	r3, r2
 800763e:	d100      	bne.n	8007642 <memset+0xa>
 8007640:	4770      	bx	lr
 8007642:	f803 1b01 	strb.w	r1, [r3], #1
 8007646:	e7f9      	b.n	800763c <memset+0x4>

08007648 <iprintf>:
 8007648:	b40f      	push	{r0, r1, r2, r3}
 800764a:	4b0a      	ldr	r3, [pc, #40]	; (8007674 <iprintf+0x2c>)
 800764c:	b513      	push	{r0, r1, r4, lr}
 800764e:	681c      	ldr	r4, [r3, #0]
 8007650:	b124      	cbz	r4, 800765c <iprintf+0x14>
 8007652:	69a3      	ldr	r3, [r4, #24]
 8007654:	b913      	cbnz	r3, 800765c <iprintf+0x14>
 8007656:	4620      	mov	r0, r4
 8007658:	f000 f84e 	bl	80076f8 <__sinit>
 800765c:	ab05      	add	r3, sp, #20
 800765e:	9a04      	ldr	r2, [sp, #16]
 8007660:	68a1      	ldr	r1, [r4, #8]
 8007662:	9301      	str	r3, [sp, #4]
 8007664:	4620      	mov	r0, r4
 8007666:	f000 f959 	bl	800791c <_vfiprintf_r>
 800766a:	b002      	add	sp, #8
 800766c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007670:	b004      	add	sp, #16
 8007672:	4770      	bx	lr
 8007674:	2000000c 	.word	0x2000000c

08007678 <_cleanup_r>:
 8007678:	4901      	ldr	r1, [pc, #4]	; (8007680 <_cleanup_r+0x8>)
 800767a:	f000 b8a9 	b.w	80077d0 <_fwalk_reent>
 800767e:	bf00      	nop
 8007680:	080081f1 	.word	0x080081f1

08007684 <std.isra.0>:
 8007684:	2300      	movs	r3, #0
 8007686:	b510      	push	{r4, lr}
 8007688:	4604      	mov	r4, r0
 800768a:	6003      	str	r3, [r0, #0]
 800768c:	6043      	str	r3, [r0, #4]
 800768e:	6083      	str	r3, [r0, #8]
 8007690:	8181      	strh	r1, [r0, #12]
 8007692:	6643      	str	r3, [r0, #100]	; 0x64
 8007694:	81c2      	strh	r2, [r0, #14]
 8007696:	6103      	str	r3, [r0, #16]
 8007698:	6143      	str	r3, [r0, #20]
 800769a:	6183      	str	r3, [r0, #24]
 800769c:	4619      	mov	r1, r3
 800769e:	2208      	movs	r2, #8
 80076a0:	305c      	adds	r0, #92	; 0x5c
 80076a2:	f7ff ffc9 	bl	8007638 <memset>
 80076a6:	4b05      	ldr	r3, [pc, #20]	; (80076bc <std.isra.0+0x38>)
 80076a8:	6263      	str	r3, [r4, #36]	; 0x24
 80076aa:	4b05      	ldr	r3, [pc, #20]	; (80076c0 <std.isra.0+0x3c>)
 80076ac:	62a3      	str	r3, [r4, #40]	; 0x28
 80076ae:	4b05      	ldr	r3, [pc, #20]	; (80076c4 <std.isra.0+0x40>)
 80076b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80076b2:	4b05      	ldr	r3, [pc, #20]	; (80076c8 <std.isra.0+0x44>)
 80076b4:	6224      	str	r4, [r4, #32]
 80076b6:	6323      	str	r3, [r4, #48]	; 0x30
 80076b8:	bd10      	pop	{r4, pc}
 80076ba:	bf00      	nop
 80076bc:	08007e95 	.word	0x08007e95
 80076c0:	08007eb7 	.word	0x08007eb7
 80076c4:	08007eef 	.word	0x08007eef
 80076c8:	08007f13 	.word	0x08007f13

080076cc <__sfmoreglue>:
 80076cc:	b570      	push	{r4, r5, r6, lr}
 80076ce:	1e4a      	subs	r2, r1, #1
 80076d0:	2568      	movs	r5, #104	; 0x68
 80076d2:	4355      	muls	r5, r2
 80076d4:	460e      	mov	r6, r1
 80076d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80076da:	f000 f897 	bl	800780c <_malloc_r>
 80076de:	4604      	mov	r4, r0
 80076e0:	b140      	cbz	r0, 80076f4 <__sfmoreglue+0x28>
 80076e2:	2100      	movs	r1, #0
 80076e4:	e880 0042 	stmia.w	r0, {r1, r6}
 80076e8:	300c      	adds	r0, #12
 80076ea:	60a0      	str	r0, [r4, #8]
 80076ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80076f0:	f7ff ffa2 	bl	8007638 <memset>
 80076f4:	4620      	mov	r0, r4
 80076f6:	bd70      	pop	{r4, r5, r6, pc}

080076f8 <__sinit>:
 80076f8:	6983      	ldr	r3, [r0, #24]
 80076fa:	b510      	push	{r4, lr}
 80076fc:	4604      	mov	r4, r0
 80076fe:	bb33      	cbnz	r3, 800774e <__sinit+0x56>
 8007700:	6483      	str	r3, [r0, #72]	; 0x48
 8007702:	64c3      	str	r3, [r0, #76]	; 0x4c
 8007704:	6503      	str	r3, [r0, #80]	; 0x50
 8007706:	4b12      	ldr	r3, [pc, #72]	; (8007750 <__sinit+0x58>)
 8007708:	4a12      	ldr	r2, [pc, #72]	; (8007754 <__sinit+0x5c>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	6282      	str	r2, [r0, #40]	; 0x28
 800770e:	4298      	cmp	r0, r3
 8007710:	bf04      	itt	eq
 8007712:	2301      	moveq	r3, #1
 8007714:	6183      	streq	r3, [r0, #24]
 8007716:	f000 f81f 	bl	8007758 <__sfp>
 800771a:	6060      	str	r0, [r4, #4]
 800771c:	4620      	mov	r0, r4
 800771e:	f000 f81b 	bl	8007758 <__sfp>
 8007722:	60a0      	str	r0, [r4, #8]
 8007724:	4620      	mov	r0, r4
 8007726:	f000 f817 	bl	8007758 <__sfp>
 800772a:	2200      	movs	r2, #0
 800772c:	60e0      	str	r0, [r4, #12]
 800772e:	2104      	movs	r1, #4
 8007730:	6860      	ldr	r0, [r4, #4]
 8007732:	f7ff ffa7 	bl	8007684 <std.isra.0>
 8007736:	2201      	movs	r2, #1
 8007738:	2109      	movs	r1, #9
 800773a:	68a0      	ldr	r0, [r4, #8]
 800773c:	f7ff ffa2 	bl	8007684 <std.isra.0>
 8007740:	2202      	movs	r2, #2
 8007742:	2112      	movs	r1, #18
 8007744:	68e0      	ldr	r0, [r4, #12]
 8007746:	f7ff ff9d 	bl	8007684 <std.isra.0>
 800774a:	2301      	movs	r3, #1
 800774c:	61a3      	str	r3, [r4, #24]
 800774e:	bd10      	pop	{r4, pc}
 8007750:	08008630 	.word	0x08008630
 8007754:	08007679 	.word	0x08007679

08007758 <__sfp>:
 8007758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800775a:	4b1c      	ldr	r3, [pc, #112]	; (80077cc <__sfp+0x74>)
 800775c:	681e      	ldr	r6, [r3, #0]
 800775e:	69b3      	ldr	r3, [r6, #24]
 8007760:	4607      	mov	r7, r0
 8007762:	b913      	cbnz	r3, 800776a <__sfp+0x12>
 8007764:	4630      	mov	r0, r6
 8007766:	f7ff ffc7 	bl	80076f8 <__sinit>
 800776a:	3648      	adds	r6, #72	; 0x48
 800776c:	68b4      	ldr	r4, [r6, #8]
 800776e:	6873      	ldr	r3, [r6, #4]
 8007770:	3b01      	subs	r3, #1
 8007772:	d503      	bpl.n	800777c <__sfp+0x24>
 8007774:	6833      	ldr	r3, [r6, #0]
 8007776:	b133      	cbz	r3, 8007786 <__sfp+0x2e>
 8007778:	6836      	ldr	r6, [r6, #0]
 800777a:	e7f7      	b.n	800776c <__sfp+0x14>
 800777c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007780:	b16d      	cbz	r5, 800779e <__sfp+0x46>
 8007782:	3468      	adds	r4, #104	; 0x68
 8007784:	e7f4      	b.n	8007770 <__sfp+0x18>
 8007786:	2104      	movs	r1, #4
 8007788:	4638      	mov	r0, r7
 800778a:	f7ff ff9f 	bl	80076cc <__sfmoreglue>
 800778e:	6030      	str	r0, [r6, #0]
 8007790:	2800      	cmp	r0, #0
 8007792:	d1f1      	bne.n	8007778 <__sfp+0x20>
 8007794:	230c      	movs	r3, #12
 8007796:	603b      	str	r3, [r7, #0]
 8007798:	4604      	mov	r4, r0
 800779a:	4620      	mov	r0, r4
 800779c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800779e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80077a2:	81e3      	strh	r3, [r4, #14]
 80077a4:	2301      	movs	r3, #1
 80077a6:	81a3      	strh	r3, [r4, #12]
 80077a8:	6665      	str	r5, [r4, #100]	; 0x64
 80077aa:	6025      	str	r5, [r4, #0]
 80077ac:	60a5      	str	r5, [r4, #8]
 80077ae:	6065      	str	r5, [r4, #4]
 80077b0:	6125      	str	r5, [r4, #16]
 80077b2:	6165      	str	r5, [r4, #20]
 80077b4:	61a5      	str	r5, [r4, #24]
 80077b6:	2208      	movs	r2, #8
 80077b8:	4629      	mov	r1, r5
 80077ba:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80077be:	f7ff ff3b 	bl	8007638 <memset>
 80077c2:	6365      	str	r5, [r4, #52]	; 0x34
 80077c4:	63a5      	str	r5, [r4, #56]	; 0x38
 80077c6:	64a5      	str	r5, [r4, #72]	; 0x48
 80077c8:	64e5      	str	r5, [r4, #76]	; 0x4c
 80077ca:	e7e6      	b.n	800779a <__sfp+0x42>
 80077cc:	08008630 	.word	0x08008630

080077d0 <_fwalk_reent>:
 80077d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077d4:	4680      	mov	r8, r0
 80077d6:	4689      	mov	r9, r1
 80077d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80077dc:	2600      	movs	r6, #0
 80077de:	b914      	cbnz	r4, 80077e6 <_fwalk_reent+0x16>
 80077e0:	4630      	mov	r0, r6
 80077e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077e6:	68a5      	ldr	r5, [r4, #8]
 80077e8:	6867      	ldr	r7, [r4, #4]
 80077ea:	3f01      	subs	r7, #1
 80077ec:	d501      	bpl.n	80077f2 <_fwalk_reent+0x22>
 80077ee:	6824      	ldr	r4, [r4, #0]
 80077f0:	e7f5      	b.n	80077de <_fwalk_reent+0xe>
 80077f2:	89ab      	ldrh	r3, [r5, #12]
 80077f4:	2b01      	cmp	r3, #1
 80077f6:	d907      	bls.n	8007808 <_fwalk_reent+0x38>
 80077f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80077fc:	3301      	adds	r3, #1
 80077fe:	d003      	beq.n	8007808 <_fwalk_reent+0x38>
 8007800:	4629      	mov	r1, r5
 8007802:	4640      	mov	r0, r8
 8007804:	47c8      	blx	r9
 8007806:	4306      	orrs	r6, r0
 8007808:	3568      	adds	r5, #104	; 0x68
 800780a:	e7ee      	b.n	80077ea <_fwalk_reent+0x1a>

0800780c <_malloc_r>:
 800780c:	b570      	push	{r4, r5, r6, lr}
 800780e:	1ccd      	adds	r5, r1, #3
 8007810:	f025 0503 	bic.w	r5, r5, #3
 8007814:	3508      	adds	r5, #8
 8007816:	2d0c      	cmp	r5, #12
 8007818:	bf38      	it	cc
 800781a:	250c      	movcc	r5, #12
 800781c:	2d00      	cmp	r5, #0
 800781e:	4606      	mov	r6, r0
 8007820:	db01      	blt.n	8007826 <_malloc_r+0x1a>
 8007822:	42a9      	cmp	r1, r5
 8007824:	d903      	bls.n	800782e <_malloc_r+0x22>
 8007826:	230c      	movs	r3, #12
 8007828:	6033      	str	r3, [r6, #0]
 800782a:	2000      	movs	r0, #0
 800782c:	bd70      	pop	{r4, r5, r6, pc}
 800782e:	f000 fd7f 	bl	8008330 <__malloc_lock>
 8007832:	4a23      	ldr	r2, [pc, #140]	; (80078c0 <_malloc_r+0xb4>)
 8007834:	6814      	ldr	r4, [r2, #0]
 8007836:	4621      	mov	r1, r4
 8007838:	b991      	cbnz	r1, 8007860 <_malloc_r+0x54>
 800783a:	4c22      	ldr	r4, [pc, #136]	; (80078c4 <_malloc_r+0xb8>)
 800783c:	6823      	ldr	r3, [r4, #0]
 800783e:	b91b      	cbnz	r3, 8007848 <_malloc_r+0x3c>
 8007840:	4630      	mov	r0, r6
 8007842:	f000 fb17 	bl	8007e74 <_sbrk_r>
 8007846:	6020      	str	r0, [r4, #0]
 8007848:	4629      	mov	r1, r5
 800784a:	4630      	mov	r0, r6
 800784c:	f000 fb12 	bl	8007e74 <_sbrk_r>
 8007850:	1c43      	adds	r3, r0, #1
 8007852:	d126      	bne.n	80078a2 <_malloc_r+0x96>
 8007854:	230c      	movs	r3, #12
 8007856:	6033      	str	r3, [r6, #0]
 8007858:	4630      	mov	r0, r6
 800785a:	f000 fd6a 	bl	8008332 <__malloc_unlock>
 800785e:	e7e4      	b.n	800782a <_malloc_r+0x1e>
 8007860:	680b      	ldr	r3, [r1, #0]
 8007862:	1b5b      	subs	r3, r3, r5
 8007864:	d41a      	bmi.n	800789c <_malloc_r+0x90>
 8007866:	2b0b      	cmp	r3, #11
 8007868:	d90f      	bls.n	800788a <_malloc_r+0x7e>
 800786a:	600b      	str	r3, [r1, #0]
 800786c:	50cd      	str	r5, [r1, r3]
 800786e:	18cc      	adds	r4, r1, r3
 8007870:	4630      	mov	r0, r6
 8007872:	f000 fd5e 	bl	8008332 <__malloc_unlock>
 8007876:	f104 000b 	add.w	r0, r4, #11
 800787a:	1d23      	adds	r3, r4, #4
 800787c:	f020 0007 	bic.w	r0, r0, #7
 8007880:	1ac3      	subs	r3, r0, r3
 8007882:	d01b      	beq.n	80078bc <_malloc_r+0xb0>
 8007884:	425a      	negs	r2, r3
 8007886:	50e2      	str	r2, [r4, r3]
 8007888:	bd70      	pop	{r4, r5, r6, pc}
 800788a:	428c      	cmp	r4, r1
 800788c:	bf0d      	iteet	eq
 800788e:	6863      	ldreq	r3, [r4, #4]
 8007890:	684b      	ldrne	r3, [r1, #4]
 8007892:	6063      	strne	r3, [r4, #4]
 8007894:	6013      	streq	r3, [r2, #0]
 8007896:	bf18      	it	ne
 8007898:	460c      	movne	r4, r1
 800789a:	e7e9      	b.n	8007870 <_malloc_r+0x64>
 800789c:	460c      	mov	r4, r1
 800789e:	6849      	ldr	r1, [r1, #4]
 80078a0:	e7ca      	b.n	8007838 <_malloc_r+0x2c>
 80078a2:	1cc4      	adds	r4, r0, #3
 80078a4:	f024 0403 	bic.w	r4, r4, #3
 80078a8:	42a0      	cmp	r0, r4
 80078aa:	d005      	beq.n	80078b8 <_malloc_r+0xac>
 80078ac:	1a21      	subs	r1, r4, r0
 80078ae:	4630      	mov	r0, r6
 80078b0:	f000 fae0 	bl	8007e74 <_sbrk_r>
 80078b4:	3001      	adds	r0, #1
 80078b6:	d0cd      	beq.n	8007854 <_malloc_r+0x48>
 80078b8:	6025      	str	r5, [r4, #0]
 80078ba:	e7d9      	b.n	8007870 <_malloc_r+0x64>
 80078bc:	bd70      	pop	{r4, r5, r6, pc}
 80078be:	bf00      	nop
 80078c0:	20000098 	.word	0x20000098
 80078c4:	2000009c 	.word	0x2000009c

080078c8 <__sfputc_r>:
 80078c8:	6893      	ldr	r3, [r2, #8]
 80078ca:	3b01      	subs	r3, #1
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	b410      	push	{r4}
 80078d0:	6093      	str	r3, [r2, #8]
 80078d2:	da09      	bge.n	80078e8 <__sfputc_r+0x20>
 80078d4:	6994      	ldr	r4, [r2, #24]
 80078d6:	42a3      	cmp	r3, r4
 80078d8:	db02      	blt.n	80078e0 <__sfputc_r+0x18>
 80078da:	b2cb      	uxtb	r3, r1
 80078dc:	2b0a      	cmp	r3, #10
 80078de:	d103      	bne.n	80078e8 <__sfputc_r+0x20>
 80078e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80078e4:	f000 bb1a 	b.w	8007f1c <__swbuf_r>
 80078e8:	6813      	ldr	r3, [r2, #0]
 80078ea:	1c58      	adds	r0, r3, #1
 80078ec:	6010      	str	r0, [r2, #0]
 80078ee:	7019      	strb	r1, [r3, #0]
 80078f0:	b2c8      	uxtb	r0, r1
 80078f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80078f6:	4770      	bx	lr

080078f8 <__sfputs_r>:
 80078f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078fa:	4606      	mov	r6, r0
 80078fc:	460f      	mov	r7, r1
 80078fe:	4614      	mov	r4, r2
 8007900:	18d5      	adds	r5, r2, r3
 8007902:	42ac      	cmp	r4, r5
 8007904:	d101      	bne.n	800790a <__sfputs_r+0x12>
 8007906:	2000      	movs	r0, #0
 8007908:	e007      	b.n	800791a <__sfputs_r+0x22>
 800790a:	463a      	mov	r2, r7
 800790c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007910:	4630      	mov	r0, r6
 8007912:	f7ff ffd9 	bl	80078c8 <__sfputc_r>
 8007916:	1c43      	adds	r3, r0, #1
 8007918:	d1f3      	bne.n	8007902 <__sfputs_r+0xa>
 800791a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800791c <_vfiprintf_r>:
 800791c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007920:	b09d      	sub	sp, #116	; 0x74
 8007922:	460c      	mov	r4, r1
 8007924:	4617      	mov	r7, r2
 8007926:	9303      	str	r3, [sp, #12]
 8007928:	4606      	mov	r6, r0
 800792a:	b118      	cbz	r0, 8007934 <_vfiprintf_r+0x18>
 800792c:	6983      	ldr	r3, [r0, #24]
 800792e:	b90b      	cbnz	r3, 8007934 <_vfiprintf_r+0x18>
 8007930:	f7ff fee2 	bl	80076f8 <__sinit>
 8007934:	4b7c      	ldr	r3, [pc, #496]	; (8007b28 <_vfiprintf_r+0x20c>)
 8007936:	429c      	cmp	r4, r3
 8007938:	d157      	bne.n	80079ea <_vfiprintf_r+0xce>
 800793a:	6874      	ldr	r4, [r6, #4]
 800793c:	89a3      	ldrh	r3, [r4, #12]
 800793e:	0718      	lsls	r0, r3, #28
 8007940:	d55d      	bpl.n	80079fe <_vfiprintf_r+0xe2>
 8007942:	6923      	ldr	r3, [r4, #16]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d05a      	beq.n	80079fe <_vfiprintf_r+0xe2>
 8007948:	2300      	movs	r3, #0
 800794a:	9309      	str	r3, [sp, #36]	; 0x24
 800794c:	2320      	movs	r3, #32
 800794e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007952:	2330      	movs	r3, #48	; 0x30
 8007954:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007958:	f04f 0b01 	mov.w	fp, #1
 800795c:	46b8      	mov	r8, r7
 800795e:	4645      	mov	r5, r8
 8007960:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007964:	2b00      	cmp	r3, #0
 8007966:	d155      	bne.n	8007a14 <_vfiprintf_r+0xf8>
 8007968:	ebb8 0a07 	subs.w	sl, r8, r7
 800796c:	d00b      	beq.n	8007986 <_vfiprintf_r+0x6a>
 800796e:	4653      	mov	r3, sl
 8007970:	463a      	mov	r2, r7
 8007972:	4621      	mov	r1, r4
 8007974:	4630      	mov	r0, r6
 8007976:	f7ff ffbf 	bl	80078f8 <__sfputs_r>
 800797a:	3001      	adds	r0, #1
 800797c:	f000 80c4 	beq.w	8007b08 <_vfiprintf_r+0x1ec>
 8007980:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007982:	4453      	add	r3, sl
 8007984:	9309      	str	r3, [sp, #36]	; 0x24
 8007986:	f898 3000 	ldrb.w	r3, [r8]
 800798a:	2b00      	cmp	r3, #0
 800798c:	f000 80bc 	beq.w	8007b08 <_vfiprintf_r+0x1ec>
 8007990:	2300      	movs	r3, #0
 8007992:	f04f 32ff 	mov.w	r2, #4294967295
 8007996:	9304      	str	r3, [sp, #16]
 8007998:	9307      	str	r3, [sp, #28]
 800799a:	9205      	str	r2, [sp, #20]
 800799c:	9306      	str	r3, [sp, #24]
 800799e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80079a2:	931a      	str	r3, [sp, #104]	; 0x68
 80079a4:	2205      	movs	r2, #5
 80079a6:	7829      	ldrb	r1, [r5, #0]
 80079a8:	4860      	ldr	r0, [pc, #384]	; (8007b2c <_vfiprintf_r+0x210>)
 80079aa:	f7f8 fc31 	bl	8000210 <memchr>
 80079ae:	f105 0801 	add.w	r8, r5, #1
 80079b2:	9b04      	ldr	r3, [sp, #16]
 80079b4:	2800      	cmp	r0, #0
 80079b6:	d131      	bne.n	8007a1c <_vfiprintf_r+0x100>
 80079b8:	06d9      	lsls	r1, r3, #27
 80079ba:	bf44      	itt	mi
 80079bc:	2220      	movmi	r2, #32
 80079be:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80079c2:	071a      	lsls	r2, r3, #28
 80079c4:	bf44      	itt	mi
 80079c6:	222b      	movmi	r2, #43	; 0x2b
 80079c8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80079cc:	782a      	ldrb	r2, [r5, #0]
 80079ce:	2a2a      	cmp	r2, #42	; 0x2a
 80079d0:	d02c      	beq.n	8007a2c <_vfiprintf_r+0x110>
 80079d2:	9a07      	ldr	r2, [sp, #28]
 80079d4:	2100      	movs	r1, #0
 80079d6:	200a      	movs	r0, #10
 80079d8:	46a8      	mov	r8, r5
 80079da:	3501      	adds	r5, #1
 80079dc:	f898 3000 	ldrb.w	r3, [r8]
 80079e0:	3b30      	subs	r3, #48	; 0x30
 80079e2:	2b09      	cmp	r3, #9
 80079e4:	d96d      	bls.n	8007ac2 <_vfiprintf_r+0x1a6>
 80079e6:	b371      	cbz	r1, 8007a46 <_vfiprintf_r+0x12a>
 80079e8:	e026      	b.n	8007a38 <_vfiprintf_r+0x11c>
 80079ea:	4b51      	ldr	r3, [pc, #324]	; (8007b30 <_vfiprintf_r+0x214>)
 80079ec:	429c      	cmp	r4, r3
 80079ee:	d101      	bne.n	80079f4 <_vfiprintf_r+0xd8>
 80079f0:	68b4      	ldr	r4, [r6, #8]
 80079f2:	e7a3      	b.n	800793c <_vfiprintf_r+0x20>
 80079f4:	4b4f      	ldr	r3, [pc, #316]	; (8007b34 <_vfiprintf_r+0x218>)
 80079f6:	429c      	cmp	r4, r3
 80079f8:	bf08      	it	eq
 80079fa:	68f4      	ldreq	r4, [r6, #12]
 80079fc:	e79e      	b.n	800793c <_vfiprintf_r+0x20>
 80079fe:	4621      	mov	r1, r4
 8007a00:	4630      	mov	r0, r6
 8007a02:	f000 faef 	bl	8007fe4 <__swsetup_r>
 8007a06:	2800      	cmp	r0, #0
 8007a08:	d09e      	beq.n	8007948 <_vfiprintf_r+0x2c>
 8007a0a:	f04f 30ff 	mov.w	r0, #4294967295
 8007a0e:	b01d      	add	sp, #116	; 0x74
 8007a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a14:	2b25      	cmp	r3, #37	; 0x25
 8007a16:	d0a7      	beq.n	8007968 <_vfiprintf_r+0x4c>
 8007a18:	46a8      	mov	r8, r5
 8007a1a:	e7a0      	b.n	800795e <_vfiprintf_r+0x42>
 8007a1c:	4a43      	ldr	r2, [pc, #268]	; (8007b2c <_vfiprintf_r+0x210>)
 8007a1e:	1a80      	subs	r0, r0, r2
 8007a20:	fa0b f000 	lsl.w	r0, fp, r0
 8007a24:	4318      	orrs	r0, r3
 8007a26:	9004      	str	r0, [sp, #16]
 8007a28:	4645      	mov	r5, r8
 8007a2a:	e7bb      	b.n	80079a4 <_vfiprintf_r+0x88>
 8007a2c:	9a03      	ldr	r2, [sp, #12]
 8007a2e:	1d11      	adds	r1, r2, #4
 8007a30:	6812      	ldr	r2, [r2, #0]
 8007a32:	9103      	str	r1, [sp, #12]
 8007a34:	2a00      	cmp	r2, #0
 8007a36:	db01      	blt.n	8007a3c <_vfiprintf_r+0x120>
 8007a38:	9207      	str	r2, [sp, #28]
 8007a3a:	e004      	b.n	8007a46 <_vfiprintf_r+0x12a>
 8007a3c:	4252      	negs	r2, r2
 8007a3e:	f043 0302 	orr.w	r3, r3, #2
 8007a42:	9207      	str	r2, [sp, #28]
 8007a44:	9304      	str	r3, [sp, #16]
 8007a46:	f898 3000 	ldrb.w	r3, [r8]
 8007a4a:	2b2e      	cmp	r3, #46	; 0x2e
 8007a4c:	d110      	bne.n	8007a70 <_vfiprintf_r+0x154>
 8007a4e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8007a52:	2b2a      	cmp	r3, #42	; 0x2a
 8007a54:	f108 0101 	add.w	r1, r8, #1
 8007a58:	d137      	bne.n	8007aca <_vfiprintf_r+0x1ae>
 8007a5a:	9b03      	ldr	r3, [sp, #12]
 8007a5c:	1d1a      	adds	r2, r3, #4
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	9203      	str	r2, [sp, #12]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	bfb8      	it	lt
 8007a66:	f04f 33ff 	movlt.w	r3, #4294967295
 8007a6a:	f108 0802 	add.w	r8, r8, #2
 8007a6e:	9305      	str	r3, [sp, #20]
 8007a70:	4d31      	ldr	r5, [pc, #196]	; (8007b38 <_vfiprintf_r+0x21c>)
 8007a72:	f898 1000 	ldrb.w	r1, [r8]
 8007a76:	2203      	movs	r2, #3
 8007a78:	4628      	mov	r0, r5
 8007a7a:	f7f8 fbc9 	bl	8000210 <memchr>
 8007a7e:	b140      	cbz	r0, 8007a92 <_vfiprintf_r+0x176>
 8007a80:	2340      	movs	r3, #64	; 0x40
 8007a82:	1b40      	subs	r0, r0, r5
 8007a84:	fa03 f000 	lsl.w	r0, r3, r0
 8007a88:	9b04      	ldr	r3, [sp, #16]
 8007a8a:	4303      	orrs	r3, r0
 8007a8c:	9304      	str	r3, [sp, #16]
 8007a8e:	f108 0801 	add.w	r8, r8, #1
 8007a92:	f898 1000 	ldrb.w	r1, [r8]
 8007a96:	4829      	ldr	r0, [pc, #164]	; (8007b3c <_vfiprintf_r+0x220>)
 8007a98:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007a9c:	2206      	movs	r2, #6
 8007a9e:	f108 0701 	add.w	r7, r8, #1
 8007aa2:	f7f8 fbb5 	bl	8000210 <memchr>
 8007aa6:	2800      	cmp	r0, #0
 8007aa8:	d034      	beq.n	8007b14 <_vfiprintf_r+0x1f8>
 8007aaa:	4b25      	ldr	r3, [pc, #148]	; (8007b40 <_vfiprintf_r+0x224>)
 8007aac:	bb03      	cbnz	r3, 8007af0 <_vfiprintf_r+0x1d4>
 8007aae:	9b03      	ldr	r3, [sp, #12]
 8007ab0:	3307      	adds	r3, #7
 8007ab2:	f023 0307 	bic.w	r3, r3, #7
 8007ab6:	3308      	adds	r3, #8
 8007ab8:	9303      	str	r3, [sp, #12]
 8007aba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007abc:	444b      	add	r3, r9
 8007abe:	9309      	str	r3, [sp, #36]	; 0x24
 8007ac0:	e74c      	b.n	800795c <_vfiprintf_r+0x40>
 8007ac2:	fb00 3202 	mla	r2, r0, r2, r3
 8007ac6:	2101      	movs	r1, #1
 8007ac8:	e786      	b.n	80079d8 <_vfiprintf_r+0xbc>
 8007aca:	2300      	movs	r3, #0
 8007acc:	9305      	str	r3, [sp, #20]
 8007ace:	4618      	mov	r0, r3
 8007ad0:	250a      	movs	r5, #10
 8007ad2:	4688      	mov	r8, r1
 8007ad4:	3101      	adds	r1, #1
 8007ad6:	f898 2000 	ldrb.w	r2, [r8]
 8007ada:	3a30      	subs	r2, #48	; 0x30
 8007adc:	2a09      	cmp	r2, #9
 8007ade:	d903      	bls.n	8007ae8 <_vfiprintf_r+0x1cc>
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d0c5      	beq.n	8007a70 <_vfiprintf_r+0x154>
 8007ae4:	9005      	str	r0, [sp, #20]
 8007ae6:	e7c3      	b.n	8007a70 <_vfiprintf_r+0x154>
 8007ae8:	fb05 2000 	mla	r0, r5, r0, r2
 8007aec:	2301      	movs	r3, #1
 8007aee:	e7f0      	b.n	8007ad2 <_vfiprintf_r+0x1b6>
 8007af0:	ab03      	add	r3, sp, #12
 8007af2:	9300      	str	r3, [sp, #0]
 8007af4:	4622      	mov	r2, r4
 8007af6:	4b13      	ldr	r3, [pc, #76]	; (8007b44 <_vfiprintf_r+0x228>)
 8007af8:	a904      	add	r1, sp, #16
 8007afa:	4630      	mov	r0, r6
 8007afc:	f3af 8000 	nop.w
 8007b00:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007b04:	4681      	mov	r9, r0
 8007b06:	d1d8      	bne.n	8007aba <_vfiprintf_r+0x19e>
 8007b08:	89a3      	ldrh	r3, [r4, #12]
 8007b0a:	065b      	lsls	r3, r3, #25
 8007b0c:	f53f af7d 	bmi.w	8007a0a <_vfiprintf_r+0xee>
 8007b10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007b12:	e77c      	b.n	8007a0e <_vfiprintf_r+0xf2>
 8007b14:	ab03      	add	r3, sp, #12
 8007b16:	9300      	str	r3, [sp, #0]
 8007b18:	4622      	mov	r2, r4
 8007b1a:	4b0a      	ldr	r3, [pc, #40]	; (8007b44 <_vfiprintf_r+0x228>)
 8007b1c:	a904      	add	r1, sp, #16
 8007b1e:	4630      	mov	r0, r6
 8007b20:	f000 f888 	bl	8007c34 <_printf_i>
 8007b24:	e7ec      	b.n	8007b00 <_vfiprintf_r+0x1e4>
 8007b26:	bf00      	nop
 8007b28:	080085f0 	.word	0x080085f0
 8007b2c:	08008634 	.word	0x08008634
 8007b30:	08008610 	.word	0x08008610
 8007b34:	080085d0 	.word	0x080085d0
 8007b38:	0800863a 	.word	0x0800863a
 8007b3c:	0800863e 	.word	0x0800863e
 8007b40:	00000000 	.word	0x00000000
 8007b44:	080078f9 	.word	0x080078f9

08007b48 <_printf_common>:
 8007b48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b4c:	4691      	mov	r9, r2
 8007b4e:	461f      	mov	r7, r3
 8007b50:	688a      	ldr	r2, [r1, #8]
 8007b52:	690b      	ldr	r3, [r1, #16]
 8007b54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	bfb8      	it	lt
 8007b5c:	4613      	movlt	r3, r2
 8007b5e:	f8c9 3000 	str.w	r3, [r9]
 8007b62:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007b66:	4606      	mov	r6, r0
 8007b68:	460c      	mov	r4, r1
 8007b6a:	b112      	cbz	r2, 8007b72 <_printf_common+0x2a>
 8007b6c:	3301      	adds	r3, #1
 8007b6e:	f8c9 3000 	str.w	r3, [r9]
 8007b72:	6823      	ldr	r3, [r4, #0]
 8007b74:	0699      	lsls	r1, r3, #26
 8007b76:	bf42      	ittt	mi
 8007b78:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007b7c:	3302      	addmi	r3, #2
 8007b7e:	f8c9 3000 	strmi.w	r3, [r9]
 8007b82:	6825      	ldr	r5, [r4, #0]
 8007b84:	f015 0506 	ands.w	r5, r5, #6
 8007b88:	d107      	bne.n	8007b9a <_printf_common+0x52>
 8007b8a:	f104 0a19 	add.w	sl, r4, #25
 8007b8e:	68e3      	ldr	r3, [r4, #12]
 8007b90:	f8d9 2000 	ldr.w	r2, [r9]
 8007b94:	1a9b      	subs	r3, r3, r2
 8007b96:	429d      	cmp	r5, r3
 8007b98:	db29      	blt.n	8007bee <_printf_common+0xa6>
 8007b9a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007b9e:	6822      	ldr	r2, [r4, #0]
 8007ba0:	3300      	adds	r3, #0
 8007ba2:	bf18      	it	ne
 8007ba4:	2301      	movne	r3, #1
 8007ba6:	0692      	lsls	r2, r2, #26
 8007ba8:	d42e      	bmi.n	8007c08 <_printf_common+0xc0>
 8007baa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007bae:	4639      	mov	r1, r7
 8007bb0:	4630      	mov	r0, r6
 8007bb2:	47c0      	blx	r8
 8007bb4:	3001      	adds	r0, #1
 8007bb6:	d021      	beq.n	8007bfc <_printf_common+0xb4>
 8007bb8:	6823      	ldr	r3, [r4, #0]
 8007bba:	68e5      	ldr	r5, [r4, #12]
 8007bbc:	f8d9 2000 	ldr.w	r2, [r9]
 8007bc0:	f003 0306 	and.w	r3, r3, #6
 8007bc4:	2b04      	cmp	r3, #4
 8007bc6:	bf08      	it	eq
 8007bc8:	1aad      	subeq	r5, r5, r2
 8007bca:	68a3      	ldr	r3, [r4, #8]
 8007bcc:	6922      	ldr	r2, [r4, #16]
 8007bce:	bf0c      	ite	eq
 8007bd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007bd4:	2500      	movne	r5, #0
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	bfc4      	itt	gt
 8007bda:	1a9b      	subgt	r3, r3, r2
 8007bdc:	18ed      	addgt	r5, r5, r3
 8007bde:	f04f 0900 	mov.w	r9, #0
 8007be2:	341a      	adds	r4, #26
 8007be4:	454d      	cmp	r5, r9
 8007be6:	d11b      	bne.n	8007c20 <_printf_common+0xd8>
 8007be8:	2000      	movs	r0, #0
 8007bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bee:	2301      	movs	r3, #1
 8007bf0:	4652      	mov	r2, sl
 8007bf2:	4639      	mov	r1, r7
 8007bf4:	4630      	mov	r0, r6
 8007bf6:	47c0      	blx	r8
 8007bf8:	3001      	adds	r0, #1
 8007bfa:	d103      	bne.n	8007c04 <_printf_common+0xbc>
 8007bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8007c00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c04:	3501      	adds	r5, #1
 8007c06:	e7c2      	b.n	8007b8e <_printf_common+0x46>
 8007c08:	18e1      	adds	r1, r4, r3
 8007c0a:	1c5a      	adds	r2, r3, #1
 8007c0c:	2030      	movs	r0, #48	; 0x30
 8007c0e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007c12:	4422      	add	r2, r4
 8007c14:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007c18:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007c1c:	3302      	adds	r3, #2
 8007c1e:	e7c4      	b.n	8007baa <_printf_common+0x62>
 8007c20:	2301      	movs	r3, #1
 8007c22:	4622      	mov	r2, r4
 8007c24:	4639      	mov	r1, r7
 8007c26:	4630      	mov	r0, r6
 8007c28:	47c0      	blx	r8
 8007c2a:	3001      	adds	r0, #1
 8007c2c:	d0e6      	beq.n	8007bfc <_printf_common+0xb4>
 8007c2e:	f109 0901 	add.w	r9, r9, #1
 8007c32:	e7d7      	b.n	8007be4 <_printf_common+0x9c>

08007c34 <_printf_i>:
 8007c34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007c38:	4617      	mov	r7, r2
 8007c3a:	7e0a      	ldrb	r2, [r1, #24]
 8007c3c:	b085      	sub	sp, #20
 8007c3e:	2a6e      	cmp	r2, #110	; 0x6e
 8007c40:	4698      	mov	r8, r3
 8007c42:	4606      	mov	r6, r0
 8007c44:	460c      	mov	r4, r1
 8007c46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007c48:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8007c4c:	f000 80bc 	beq.w	8007dc8 <_printf_i+0x194>
 8007c50:	d81a      	bhi.n	8007c88 <_printf_i+0x54>
 8007c52:	2a63      	cmp	r2, #99	; 0x63
 8007c54:	d02e      	beq.n	8007cb4 <_printf_i+0x80>
 8007c56:	d80a      	bhi.n	8007c6e <_printf_i+0x3a>
 8007c58:	2a00      	cmp	r2, #0
 8007c5a:	f000 80c8 	beq.w	8007dee <_printf_i+0x1ba>
 8007c5e:	2a58      	cmp	r2, #88	; 0x58
 8007c60:	f000 808a 	beq.w	8007d78 <_printf_i+0x144>
 8007c64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c68:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8007c6c:	e02a      	b.n	8007cc4 <_printf_i+0x90>
 8007c6e:	2a64      	cmp	r2, #100	; 0x64
 8007c70:	d001      	beq.n	8007c76 <_printf_i+0x42>
 8007c72:	2a69      	cmp	r2, #105	; 0x69
 8007c74:	d1f6      	bne.n	8007c64 <_printf_i+0x30>
 8007c76:	6821      	ldr	r1, [r4, #0]
 8007c78:	681a      	ldr	r2, [r3, #0]
 8007c7a:	f011 0f80 	tst.w	r1, #128	; 0x80
 8007c7e:	d023      	beq.n	8007cc8 <_printf_i+0x94>
 8007c80:	1d11      	adds	r1, r2, #4
 8007c82:	6019      	str	r1, [r3, #0]
 8007c84:	6813      	ldr	r3, [r2, #0]
 8007c86:	e027      	b.n	8007cd8 <_printf_i+0xa4>
 8007c88:	2a73      	cmp	r2, #115	; 0x73
 8007c8a:	f000 80b4 	beq.w	8007df6 <_printf_i+0x1c2>
 8007c8e:	d808      	bhi.n	8007ca2 <_printf_i+0x6e>
 8007c90:	2a6f      	cmp	r2, #111	; 0x6f
 8007c92:	d02a      	beq.n	8007cea <_printf_i+0xb6>
 8007c94:	2a70      	cmp	r2, #112	; 0x70
 8007c96:	d1e5      	bne.n	8007c64 <_printf_i+0x30>
 8007c98:	680a      	ldr	r2, [r1, #0]
 8007c9a:	f042 0220 	orr.w	r2, r2, #32
 8007c9e:	600a      	str	r2, [r1, #0]
 8007ca0:	e003      	b.n	8007caa <_printf_i+0x76>
 8007ca2:	2a75      	cmp	r2, #117	; 0x75
 8007ca4:	d021      	beq.n	8007cea <_printf_i+0xb6>
 8007ca6:	2a78      	cmp	r2, #120	; 0x78
 8007ca8:	d1dc      	bne.n	8007c64 <_printf_i+0x30>
 8007caa:	2278      	movs	r2, #120	; 0x78
 8007cac:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8007cb0:	496e      	ldr	r1, [pc, #440]	; (8007e6c <_printf_i+0x238>)
 8007cb2:	e064      	b.n	8007d7e <_printf_i+0x14a>
 8007cb4:	681a      	ldr	r2, [r3, #0]
 8007cb6:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8007cba:	1d11      	adds	r1, r2, #4
 8007cbc:	6019      	str	r1, [r3, #0]
 8007cbe:	6813      	ldr	r3, [r2, #0]
 8007cc0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007cc4:	2301      	movs	r3, #1
 8007cc6:	e0a3      	b.n	8007e10 <_printf_i+0x1dc>
 8007cc8:	f011 0f40 	tst.w	r1, #64	; 0x40
 8007ccc:	f102 0104 	add.w	r1, r2, #4
 8007cd0:	6019      	str	r1, [r3, #0]
 8007cd2:	d0d7      	beq.n	8007c84 <_printf_i+0x50>
 8007cd4:	f9b2 3000 	ldrsh.w	r3, [r2]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	da03      	bge.n	8007ce4 <_printf_i+0xb0>
 8007cdc:	222d      	movs	r2, #45	; 0x2d
 8007cde:	425b      	negs	r3, r3
 8007ce0:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007ce4:	4962      	ldr	r1, [pc, #392]	; (8007e70 <_printf_i+0x23c>)
 8007ce6:	220a      	movs	r2, #10
 8007ce8:	e017      	b.n	8007d1a <_printf_i+0xe6>
 8007cea:	6820      	ldr	r0, [r4, #0]
 8007cec:	6819      	ldr	r1, [r3, #0]
 8007cee:	f010 0f80 	tst.w	r0, #128	; 0x80
 8007cf2:	d003      	beq.n	8007cfc <_printf_i+0xc8>
 8007cf4:	1d08      	adds	r0, r1, #4
 8007cf6:	6018      	str	r0, [r3, #0]
 8007cf8:	680b      	ldr	r3, [r1, #0]
 8007cfa:	e006      	b.n	8007d0a <_printf_i+0xd6>
 8007cfc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007d00:	f101 0004 	add.w	r0, r1, #4
 8007d04:	6018      	str	r0, [r3, #0]
 8007d06:	d0f7      	beq.n	8007cf8 <_printf_i+0xc4>
 8007d08:	880b      	ldrh	r3, [r1, #0]
 8007d0a:	4959      	ldr	r1, [pc, #356]	; (8007e70 <_printf_i+0x23c>)
 8007d0c:	2a6f      	cmp	r2, #111	; 0x6f
 8007d0e:	bf14      	ite	ne
 8007d10:	220a      	movne	r2, #10
 8007d12:	2208      	moveq	r2, #8
 8007d14:	2000      	movs	r0, #0
 8007d16:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8007d1a:	6865      	ldr	r5, [r4, #4]
 8007d1c:	60a5      	str	r5, [r4, #8]
 8007d1e:	2d00      	cmp	r5, #0
 8007d20:	f2c0 809c 	blt.w	8007e5c <_printf_i+0x228>
 8007d24:	6820      	ldr	r0, [r4, #0]
 8007d26:	f020 0004 	bic.w	r0, r0, #4
 8007d2a:	6020      	str	r0, [r4, #0]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d13f      	bne.n	8007db0 <_printf_i+0x17c>
 8007d30:	2d00      	cmp	r5, #0
 8007d32:	f040 8095 	bne.w	8007e60 <_printf_i+0x22c>
 8007d36:	4675      	mov	r5, lr
 8007d38:	2a08      	cmp	r2, #8
 8007d3a:	d10b      	bne.n	8007d54 <_printf_i+0x120>
 8007d3c:	6823      	ldr	r3, [r4, #0]
 8007d3e:	07da      	lsls	r2, r3, #31
 8007d40:	d508      	bpl.n	8007d54 <_printf_i+0x120>
 8007d42:	6923      	ldr	r3, [r4, #16]
 8007d44:	6862      	ldr	r2, [r4, #4]
 8007d46:	429a      	cmp	r2, r3
 8007d48:	bfde      	ittt	le
 8007d4a:	2330      	movle	r3, #48	; 0x30
 8007d4c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007d50:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007d54:	ebae 0305 	sub.w	r3, lr, r5
 8007d58:	6123      	str	r3, [r4, #16]
 8007d5a:	f8cd 8000 	str.w	r8, [sp]
 8007d5e:	463b      	mov	r3, r7
 8007d60:	aa03      	add	r2, sp, #12
 8007d62:	4621      	mov	r1, r4
 8007d64:	4630      	mov	r0, r6
 8007d66:	f7ff feef 	bl	8007b48 <_printf_common>
 8007d6a:	3001      	adds	r0, #1
 8007d6c:	d155      	bne.n	8007e1a <_printf_i+0x1e6>
 8007d6e:	f04f 30ff 	mov.w	r0, #4294967295
 8007d72:	b005      	add	sp, #20
 8007d74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007d78:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8007d7c:	493c      	ldr	r1, [pc, #240]	; (8007e70 <_printf_i+0x23c>)
 8007d7e:	6822      	ldr	r2, [r4, #0]
 8007d80:	6818      	ldr	r0, [r3, #0]
 8007d82:	f012 0f80 	tst.w	r2, #128	; 0x80
 8007d86:	f100 0504 	add.w	r5, r0, #4
 8007d8a:	601d      	str	r5, [r3, #0]
 8007d8c:	d001      	beq.n	8007d92 <_printf_i+0x15e>
 8007d8e:	6803      	ldr	r3, [r0, #0]
 8007d90:	e002      	b.n	8007d98 <_printf_i+0x164>
 8007d92:	0655      	lsls	r5, r2, #25
 8007d94:	d5fb      	bpl.n	8007d8e <_printf_i+0x15a>
 8007d96:	8803      	ldrh	r3, [r0, #0]
 8007d98:	07d0      	lsls	r0, r2, #31
 8007d9a:	bf44      	itt	mi
 8007d9c:	f042 0220 	orrmi.w	r2, r2, #32
 8007da0:	6022      	strmi	r2, [r4, #0]
 8007da2:	b91b      	cbnz	r3, 8007dac <_printf_i+0x178>
 8007da4:	6822      	ldr	r2, [r4, #0]
 8007da6:	f022 0220 	bic.w	r2, r2, #32
 8007daa:	6022      	str	r2, [r4, #0]
 8007dac:	2210      	movs	r2, #16
 8007dae:	e7b1      	b.n	8007d14 <_printf_i+0xe0>
 8007db0:	4675      	mov	r5, lr
 8007db2:	fbb3 f0f2 	udiv	r0, r3, r2
 8007db6:	fb02 3310 	mls	r3, r2, r0, r3
 8007dba:	5ccb      	ldrb	r3, [r1, r3]
 8007dbc:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	2800      	cmp	r0, #0
 8007dc4:	d1f5      	bne.n	8007db2 <_printf_i+0x17e>
 8007dc6:	e7b7      	b.n	8007d38 <_printf_i+0x104>
 8007dc8:	6808      	ldr	r0, [r1, #0]
 8007dca:	681a      	ldr	r2, [r3, #0]
 8007dcc:	6949      	ldr	r1, [r1, #20]
 8007dce:	f010 0f80 	tst.w	r0, #128	; 0x80
 8007dd2:	d004      	beq.n	8007dde <_printf_i+0x1aa>
 8007dd4:	1d10      	adds	r0, r2, #4
 8007dd6:	6018      	str	r0, [r3, #0]
 8007dd8:	6813      	ldr	r3, [r2, #0]
 8007dda:	6019      	str	r1, [r3, #0]
 8007ddc:	e007      	b.n	8007dee <_printf_i+0x1ba>
 8007dde:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007de2:	f102 0004 	add.w	r0, r2, #4
 8007de6:	6018      	str	r0, [r3, #0]
 8007de8:	6813      	ldr	r3, [r2, #0]
 8007dea:	d0f6      	beq.n	8007dda <_printf_i+0x1a6>
 8007dec:	8019      	strh	r1, [r3, #0]
 8007dee:	2300      	movs	r3, #0
 8007df0:	6123      	str	r3, [r4, #16]
 8007df2:	4675      	mov	r5, lr
 8007df4:	e7b1      	b.n	8007d5a <_printf_i+0x126>
 8007df6:	681a      	ldr	r2, [r3, #0]
 8007df8:	1d11      	adds	r1, r2, #4
 8007dfa:	6019      	str	r1, [r3, #0]
 8007dfc:	6815      	ldr	r5, [r2, #0]
 8007dfe:	6862      	ldr	r2, [r4, #4]
 8007e00:	2100      	movs	r1, #0
 8007e02:	4628      	mov	r0, r5
 8007e04:	f7f8 fa04 	bl	8000210 <memchr>
 8007e08:	b108      	cbz	r0, 8007e0e <_printf_i+0x1da>
 8007e0a:	1b40      	subs	r0, r0, r5
 8007e0c:	6060      	str	r0, [r4, #4]
 8007e0e:	6863      	ldr	r3, [r4, #4]
 8007e10:	6123      	str	r3, [r4, #16]
 8007e12:	2300      	movs	r3, #0
 8007e14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e18:	e79f      	b.n	8007d5a <_printf_i+0x126>
 8007e1a:	6923      	ldr	r3, [r4, #16]
 8007e1c:	462a      	mov	r2, r5
 8007e1e:	4639      	mov	r1, r7
 8007e20:	4630      	mov	r0, r6
 8007e22:	47c0      	blx	r8
 8007e24:	3001      	adds	r0, #1
 8007e26:	d0a2      	beq.n	8007d6e <_printf_i+0x13a>
 8007e28:	6823      	ldr	r3, [r4, #0]
 8007e2a:	079b      	lsls	r3, r3, #30
 8007e2c:	d507      	bpl.n	8007e3e <_printf_i+0x20a>
 8007e2e:	2500      	movs	r5, #0
 8007e30:	f104 0919 	add.w	r9, r4, #25
 8007e34:	68e3      	ldr	r3, [r4, #12]
 8007e36:	9a03      	ldr	r2, [sp, #12]
 8007e38:	1a9b      	subs	r3, r3, r2
 8007e3a:	429d      	cmp	r5, r3
 8007e3c:	db05      	blt.n	8007e4a <_printf_i+0x216>
 8007e3e:	68e0      	ldr	r0, [r4, #12]
 8007e40:	9b03      	ldr	r3, [sp, #12]
 8007e42:	4298      	cmp	r0, r3
 8007e44:	bfb8      	it	lt
 8007e46:	4618      	movlt	r0, r3
 8007e48:	e793      	b.n	8007d72 <_printf_i+0x13e>
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	464a      	mov	r2, r9
 8007e4e:	4639      	mov	r1, r7
 8007e50:	4630      	mov	r0, r6
 8007e52:	47c0      	blx	r8
 8007e54:	3001      	adds	r0, #1
 8007e56:	d08a      	beq.n	8007d6e <_printf_i+0x13a>
 8007e58:	3501      	adds	r5, #1
 8007e5a:	e7eb      	b.n	8007e34 <_printf_i+0x200>
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d1a7      	bne.n	8007db0 <_printf_i+0x17c>
 8007e60:	780b      	ldrb	r3, [r1, #0]
 8007e62:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007e66:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e6a:	e765      	b.n	8007d38 <_printf_i+0x104>
 8007e6c:	08008656 	.word	0x08008656
 8007e70:	08008645 	.word	0x08008645

08007e74 <_sbrk_r>:
 8007e74:	b538      	push	{r3, r4, r5, lr}
 8007e76:	4c06      	ldr	r4, [pc, #24]	; (8007e90 <_sbrk_r+0x1c>)
 8007e78:	2300      	movs	r3, #0
 8007e7a:	4605      	mov	r5, r0
 8007e7c:	4608      	mov	r0, r1
 8007e7e:	6023      	str	r3, [r4, #0]
 8007e80:	f000 fb02 	bl	8008488 <_sbrk>
 8007e84:	1c43      	adds	r3, r0, #1
 8007e86:	d102      	bne.n	8007e8e <_sbrk_r+0x1a>
 8007e88:	6823      	ldr	r3, [r4, #0]
 8007e8a:	b103      	cbz	r3, 8007e8e <_sbrk_r+0x1a>
 8007e8c:	602b      	str	r3, [r5, #0]
 8007e8e:	bd38      	pop	{r3, r4, r5, pc}
 8007e90:	200004a0 	.word	0x200004a0

08007e94 <__sread>:
 8007e94:	b510      	push	{r4, lr}
 8007e96:	460c      	mov	r4, r1
 8007e98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e9c:	f000 fa98 	bl	80083d0 <_read_r>
 8007ea0:	2800      	cmp	r0, #0
 8007ea2:	bfab      	itete	ge
 8007ea4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007ea6:	89a3      	ldrhlt	r3, [r4, #12]
 8007ea8:	181b      	addge	r3, r3, r0
 8007eaa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007eae:	bfac      	ite	ge
 8007eb0:	6563      	strge	r3, [r4, #84]	; 0x54
 8007eb2:	81a3      	strhlt	r3, [r4, #12]
 8007eb4:	bd10      	pop	{r4, pc}

08007eb6 <__swrite>:
 8007eb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007eba:	461f      	mov	r7, r3
 8007ebc:	898b      	ldrh	r3, [r1, #12]
 8007ebe:	05db      	lsls	r3, r3, #23
 8007ec0:	4605      	mov	r5, r0
 8007ec2:	460c      	mov	r4, r1
 8007ec4:	4616      	mov	r6, r2
 8007ec6:	d505      	bpl.n	8007ed4 <__swrite+0x1e>
 8007ec8:	2302      	movs	r3, #2
 8007eca:	2200      	movs	r2, #0
 8007ecc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ed0:	f000 f9b8 	bl	8008244 <_lseek_r>
 8007ed4:	89a3      	ldrh	r3, [r4, #12]
 8007ed6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007eda:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007ede:	81a3      	strh	r3, [r4, #12]
 8007ee0:	4632      	mov	r2, r6
 8007ee2:	463b      	mov	r3, r7
 8007ee4:	4628      	mov	r0, r5
 8007ee6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007eea:	f000 b869 	b.w	8007fc0 <_write_r>

08007eee <__sseek>:
 8007eee:	b510      	push	{r4, lr}
 8007ef0:	460c      	mov	r4, r1
 8007ef2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ef6:	f000 f9a5 	bl	8008244 <_lseek_r>
 8007efa:	1c43      	adds	r3, r0, #1
 8007efc:	89a3      	ldrh	r3, [r4, #12]
 8007efe:	bf15      	itete	ne
 8007f00:	6560      	strne	r0, [r4, #84]	; 0x54
 8007f02:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007f06:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007f0a:	81a3      	strheq	r3, [r4, #12]
 8007f0c:	bf18      	it	ne
 8007f0e:	81a3      	strhne	r3, [r4, #12]
 8007f10:	bd10      	pop	{r4, pc}

08007f12 <__sclose>:
 8007f12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f16:	f000 b8d3 	b.w	80080c0 <_close_r>
	...

08007f1c <__swbuf_r>:
 8007f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f1e:	460e      	mov	r6, r1
 8007f20:	4614      	mov	r4, r2
 8007f22:	4605      	mov	r5, r0
 8007f24:	b118      	cbz	r0, 8007f2e <__swbuf_r+0x12>
 8007f26:	6983      	ldr	r3, [r0, #24]
 8007f28:	b90b      	cbnz	r3, 8007f2e <__swbuf_r+0x12>
 8007f2a:	f7ff fbe5 	bl	80076f8 <__sinit>
 8007f2e:	4b21      	ldr	r3, [pc, #132]	; (8007fb4 <__swbuf_r+0x98>)
 8007f30:	429c      	cmp	r4, r3
 8007f32:	d12a      	bne.n	8007f8a <__swbuf_r+0x6e>
 8007f34:	686c      	ldr	r4, [r5, #4]
 8007f36:	69a3      	ldr	r3, [r4, #24]
 8007f38:	60a3      	str	r3, [r4, #8]
 8007f3a:	89a3      	ldrh	r3, [r4, #12]
 8007f3c:	071a      	lsls	r2, r3, #28
 8007f3e:	d52e      	bpl.n	8007f9e <__swbuf_r+0x82>
 8007f40:	6923      	ldr	r3, [r4, #16]
 8007f42:	b363      	cbz	r3, 8007f9e <__swbuf_r+0x82>
 8007f44:	6923      	ldr	r3, [r4, #16]
 8007f46:	6820      	ldr	r0, [r4, #0]
 8007f48:	1ac0      	subs	r0, r0, r3
 8007f4a:	6963      	ldr	r3, [r4, #20]
 8007f4c:	b2f6      	uxtb	r6, r6
 8007f4e:	4298      	cmp	r0, r3
 8007f50:	4637      	mov	r7, r6
 8007f52:	db04      	blt.n	8007f5e <__swbuf_r+0x42>
 8007f54:	4621      	mov	r1, r4
 8007f56:	4628      	mov	r0, r5
 8007f58:	f000 f94a 	bl	80081f0 <_fflush_r>
 8007f5c:	bb28      	cbnz	r0, 8007faa <__swbuf_r+0x8e>
 8007f5e:	68a3      	ldr	r3, [r4, #8]
 8007f60:	3b01      	subs	r3, #1
 8007f62:	60a3      	str	r3, [r4, #8]
 8007f64:	6823      	ldr	r3, [r4, #0]
 8007f66:	1c5a      	adds	r2, r3, #1
 8007f68:	6022      	str	r2, [r4, #0]
 8007f6a:	701e      	strb	r6, [r3, #0]
 8007f6c:	6963      	ldr	r3, [r4, #20]
 8007f6e:	3001      	adds	r0, #1
 8007f70:	4298      	cmp	r0, r3
 8007f72:	d004      	beq.n	8007f7e <__swbuf_r+0x62>
 8007f74:	89a3      	ldrh	r3, [r4, #12]
 8007f76:	07db      	lsls	r3, r3, #31
 8007f78:	d519      	bpl.n	8007fae <__swbuf_r+0x92>
 8007f7a:	2e0a      	cmp	r6, #10
 8007f7c:	d117      	bne.n	8007fae <__swbuf_r+0x92>
 8007f7e:	4621      	mov	r1, r4
 8007f80:	4628      	mov	r0, r5
 8007f82:	f000 f935 	bl	80081f0 <_fflush_r>
 8007f86:	b190      	cbz	r0, 8007fae <__swbuf_r+0x92>
 8007f88:	e00f      	b.n	8007faa <__swbuf_r+0x8e>
 8007f8a:	4b0b      	ldr	r3, [pc, #44]	; (8007fb8 <__swbuf_r+0x9c>)
 8007f8c:	429c      	cmp	r4, r3
 8007f8e:	d101      	bne.n	8007f94 <__swbuf_r+0x78>
 8007f90:	68ac      	ldr	r4, [r5, #8]
 8007f92:	e7d0      	b.n	8007f36 <__swbuf_r+0x1a>
 8007f94:	4b09      	ldr	r3, [pc, #36]	; (8007fbc <__swbuf_r+0xa0>)
 8007f96:	429c      	cmp	r4, r3
 8007f98:	bf08      	it	eq
 8007f9a:	68ec      	ldreq	r4, [r5, #12]
 8007f9c:	e7cb      	b.n	8007f36 <__swbuf_r+0x1a>
 8007f9e:	4621      	mov	r1, r4
 8007fa0:	4628      	mov	r0, r5
 8007fa2:	f000 f81f 	bl	8007fe4 <__swsetup_r>
 8007fa6:	2800      	cmp	r0, #0
 8007fa8:	d0cc      	beq.n	8007f44 <__swbuf_r+0x28>
 8007faa:	f04f 37ff 	mov.w	r7, #4294967295
 8007fae:	4638      	mov	r0, r7
 8007fb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fb2:	bf00      	nop
 8007fb4:	080085f0 	.word	0x080085f0
 8007fb8:	08008610 	.word	0x08008610
 8007fbc:	080085d0 	.word	0x080085d0

08007fc0 <_write_r>:
 8007fc0:	b538      	push	{r3, r4, r5, lr}
 8007fc2:	4c07      	ldr	r4, [pc, #28]	; (8007fe0 <_write_r+0x20>)
 8007fc4:	4605      	mov	r5, r0
 8007fc6:	4608      	mov	r0, r1
 8007fc8:	4611      	mov	r1, r2
 8007fca:	2200      	movs	r2, #0
 8007fcc:	6022      	str	r2, [r4, #0]
 8007fce:	461a      	mov	r2, r3
 8007fd0:	f7fe fd18 	bl	8006a04 <_write>
 8007fd4:	1c43      	adds	r3, r0, #1
 8007fd6:	d102      	bne.n	8007fde <_write_r+0x1e>
 8007fd8:	6823      	ldr	r3, [r4, #0]
 8007fda:	b103      	cbz	r3, 8007fde <_write_r+0x1e>
 8007fdc:	602b      	str	r3, [r5, #0]
 8007fde:	bd38      	pop	{r3, r4, r5, pc}
 8007fe0:	200004a0 	.word	0x200004a0

08007fe4 <__swsetup_r>:
 8007fe4:	4b32      	ldr	r3, [pc, #200]	; (80080b0 <__swsetup_r+0xcc>)
 8007fe6:	b570      	push	{r4, r5, r6, lr}
 8007fe8:	681d      	ldr	r5, [r3, #0]
 8007fea:	4606      	mov	r6, r0
 8007fec:	460c      	mov	r4, r1
 8007fee:	b125      	cbz	r5, 8007ffa <__swsetup_r+0x16>
 8007ff0:	69ab      	ldr	r3, [r5, #24]
 8007ff2:	b913      	cbnz	r3, 8007ffa <__swsetup_r+0x16>
 8007ff4:	4628      	mov	r0, r5
 8007ff6:	f7ff fb7f 	bl	80076f8 <__sinit>
 8007ffa:	4b2e      	ldr	r3, [pc, #184]	; (80080b4 <__swsetup_r+0xd0>)
 8007ffc:	429c      	cmp	r4, r3
 8007ffe:	d10f      	bne.n	8008020 <__swsetup_r+0x3c>
 8008000:	686c      	ldr	r4, [r5, #4]
 8008002:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008006:	b29a      	uxth	r2, r3
 8008008:	0715      	lsls	r5, r2, #28
 800800a:	d42c      	bmi.n	8008066 <__swsetup_r+0x82>
 800800c:	06d0      	lsls	r0, r2, #27
 800800e:	d411      	bmi.n	8008034 <__swsetup_r+0x50>
 8008010:	2209      	movs	r2, #9
 8008012:	6032      	str	r2, [r6, #0]
 8008014:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008018:	81a3      	strh	r3, [r4, #12]
 800801a:	f04f 30ff 	mov.w	r0, #4294967295
 800801e:	bd70      	pop	{r4, r5, r6, pc}
 8008020:	4b25      	ldr	r3, [pc, #148]	; (80080b8 <__swsetup_r+0xd4>)
 8008022:	429c      	cmp	r4, r3
 8008024:	d101      	bne.n	800802a <__swsetup_r+0x46>
 8008026:	68ac      	ldr	r4, [r5, #8]
 8008028:	e7eb      	b.n	8008002 <__swsetup_r+0x1e>
 800802a:	4b24      	ldr	r3, [pc, #144]	; (80080bc <__swsetup_r+0xd8>)
 800802c:	429c      	cmp	r4, r3
 800802e:	bf08      	it	eq
 8008030:	68ec      	ldreq	r4, [r5, #12]
 8008032:	e7e6      	b.n	8008002 <__swsetup_r+0x1e>
 8008034:	0751      	lsls	r1, r2, #29
 8008036:	d512      	bpl.n	800805e <__swsetup_r+0x7a>
 8008038:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800803a:	b141      	cbz	r1, 800804e <__swsetup_r+0x6a>
 800803c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008040:	4299      	cmp	r1, r3
 8008042:	d002      	beq.n	800804a <__swsetup_r+0x66>
 8008044:	4630      	mov	r0, r6
 8008046:	f000 f975 	bl	8008334 <_free_r>
 800804a:	2300      	movs	r3, #0
 800804c:	6363      	str	r3, [r4, #52]	; 0x34
 800804e:	89a3      	ldrh	r3, [r4, #12]
 8008050:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008054:	81a3      	strh	r3, [r4, #12]
 8008056:	2300      	movs	r3, #0
 8008058:	6063      	str	r3, [r4, #4]
 800805a:	6923      	ldr	r3, [r4, #16]
 800805c:	6023      	str	r3, [r4, #0]
 800805e:	89a3      	ldrh	r3, [r4, #12]
 8008060:	f043 0308 	orr.w	r3, r3, #8
 8008064:	81a3      	strh	r3, [r4, #12]
 8008066:	6923      	ldr	r3, [r4, #16]
 8008068:	b94b      	cbnz	r3, 800807e <__swsetup_r+0x9a>
 800806a:	89a3      	ldrh	r3, [r4, #12]
 800806c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008070:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008074:	d003      	beq.n	800807e <__swsetup_r+0x9a>
 8008076:	4621      	mov	r1, r4
 8008078:	4630      	mov	r0, r6
 800807a:	f000 f919 	bl	80082b0 <__smakebuf_r>
 800807e:	89a2      	ldrh	r2, [r4, #12]
 8008080:	f012 0301 	ands.w	r3, r2, #1
 8008084:	d00c      	beq.n	80080a0 <__swsetup_r+0xbc>
 8008086:	2300      	movs	r3, #0
 8008088:	60a3      	str	r3, [r4, #8]
 800808a:	6963      	ldr	r3, [r4, #20]
 800808c:	425b      	negs	r3, r3
 800808e:	61a3      	str	r3, [r4, #24]
 8008090:	6923      	ldr	r3, [r4, #16]
 8008092:	b953      	cbnz	r3, 80080aa <__swsetup_r+0xc6>
 8008094:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008098:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800809c:	d1ba      	bne.n	8008014 <__swsetup_r+0x30>
 800809e:	bd70      	pop	{r4, r5, r6, pc}
 80080a0:	0792      	lsls	r2, r2, #30
 80080a2:	bf58      	it	pl
 80080a4:	6963      	ldrpl	r3, [r4, #20]
 80080a6:	60a3      	str	r3, [r4, #8]
 80080a8:	e7f2      	b.n	8008090 <__swsetup_r+0xac>
 80080aa:	2000      	movs	r0, #0
 80080ac:	e7f7      	b.n	800809e <__swsetup_r+0xba>
 80080ae:	bf00      	nop
 80080b0:	2000000c 	.word	0x2000000c
 80080b4:	080085f0 	.word	0x080085f0
 80080b8:	08008610 	.word	0x08008610
 80080bc:	080085d0 	.word	0x080085d0

080080c0 <_close_r>:
 80080c0:	b538      	push	{r3, r4, r5, lr}
 80080c2:	4c06      	ldr	r4, [pc, #24]	; (80080dc <_close_r+0x1c>)
 80080c4:	2300      	movs	r3, #0
 80080c6:	4605      	mov	r5, r0
 80080c8:	4608      	mov	r0, r1
 80080ca:	6023      	str	r3, [r4, #0]
 80080cc:	f000 f9b4 	bl	8008438 <_close>
 80080d0:	1c43      	adds	r3, r0, #1
 80080d2:	d102      	bne.n	80080da <_close_r+0x1a>
 80080d4:	6823      	ldr	r3, [r4, #0]
 80080d6:	b103      	cbz	r3, 80080da <_close_r+0x1a>
 80080d8:	602b      	str	r3, [r5, #0]
 80080da:	bd38      	pop	{r3, r4, r5, pc}
 80080dc:	200004a0 	.word	0x200004a0

080080e0 <__sflush_r>:
 80080e0:	898a      	ldrh	r2, [r1, #12]
 80080e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080e6:	4605      	mov	r5, r0
 80080e8:	0710      	lsls	r0, r2, #28
 80080ea:	460c      	mov	r4, r1
 80080ec:	d45a      	bmi.n	80081a4 <__sflush_r+0xc4>
 80080ee:	684b      	ldr	r3, [r1, #4]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	dc05      	bgt.n	8008100 <__sflush_r+0x20>
 80080f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	dc02      	bgt.n	8008100 <__sflush_r+0x20>
 80080fa:	2000      	movs	r0, #0
 80080fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008100:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008102:	2e00      	cmp	r6, #0
 8008104:	d0f9      	beq.n	80080fa <__sflush_r+0x1a>
 8008106:	2300      	movs	r3, #0
 8008108:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800810c:	682f      	ldr	r7, [r5, #0]
 800810e:	602b      	str	r3, [r5, #0]
 8008110:	d033      	beq.n	800817a <__sflush_r+0x9a>
 8008112:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008114:	89a3      	ldrh	r3, [r4, #12]
 8008116:	075a      	lsls	r2, r3, #29
 8008118:	d505      	bpl.n	8008126 <__sflush_r+0x46>
 800811a:	6863      	ldr	r3, [r4, #4]
 800811c:	1ac0      	subs	r0, r0, r3
 800811e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008120:	b10b      	cbz	r3, 8008126 <__sflush_r+0x46>
 8008122:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008124:	1ac0      	subs	r0, r0, r3
 8008126:	2300      	movs	r3, #0
 8008128:	4602      	mov	r2, r0
 800812a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800812c:	6a21      	ldr	r1, [r4, #32]
 800812e:	4628      	mov	r0, r5
 8008130:	47b0      	blx	r6
 8008132:	1c43      	adds	r3, r0, #1
 8008134:	89a3      	ldrh	r3, [r4, #12]
 8008136:	d106      	bne.n	8008146 <__sflush_r+0x66>
 8008138:	6829      	ldr	r1, [r5, #0]
 800813a:	291d      	cmp	r1, #29
 800813c:	d84b      	bhi.n	80081d6 <__sflush_r+0xf6>
 800813e:	4a2b      	ldr	r2, [pc, #172]	; (80081ec <__sflush_r+0x10c>)
 8008140:	40ca      	lsrs	r2, r1
 8008142:	07d6      	lsls	r6, r2, #31
 8008144:	d547      	bpl.n	80081d6 <__sflush_r+0xf6>
 8008146:	2200      	movs	r2, #0
 8008148:	6062      	str	r2, [r4, #4]
 800814a:	04d9      	lsls	r1, r3, #19
 800814c:	6922      	ldr	r2, [r4, #16]
 800814e:	6022      	str	r2, [r4, #0]
 8008150:	d504      	bpl.n	800815c <__sflush_r+0x7c>
 8008152:	1c42      	adds	r2, r0, #1
 8008154:	d101      	bne.n	800815a <__sflush_r+0x7a>
 8008156:	682b      	ldr	r3, [r5, #0]
 8008158:	b903      	cbnz	r3, 800815c <__sflush_r+0x7c>
 800815a:	6560      	str	r0, [r4, #84]	; 0x54
 800815c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800815e:	602f      	str	r7, [r5, #0]
 8008160:	2900      	cmp	r1, #0
 8008162:	d0ca      	beq.n	80080fa <__sflush_r+0x1a>
 8008164:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008168:	4299      	cmp	r1, r3
 800816a:	d002      	beq.n	8008172 <__sflush_r+0x92>
 800816c:	4628      	mov	r0, r5
 800816e:	f000 f8e1 	bl	8008334 <_free_r>
 8008172:	2000      	movs	r0, #0
 8008174:	6360      	str	r0, [r4, #52]	; 0x34
 8008176:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800817a:	6a21      	ldr	r1, [r4, #32]
 800817c:	2301      	movs	r3, #1
 800817e:	4628      	mov	r0, r5
 8008180:	47b0      	blx	r6
 8008182:	1c41      	adds	r1, r0, #1
 8008184:	d1c6      	bne.n	8008114 <__sflush_r+0x34>
 8008186:	682b      	ldr	r3, [r5, #0]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d0c3      	beq.n	8008114 <__sflush_r+0x34>
 800818c:	2b1d      	cmp	r3, #29
 800818e:	d001      	beq.n	8008194 <__sflush_r+0xb4>
 8008190:	2b16      	cmp	r3, #22
 8008192:	d101      	bne.n	8008198 <__sflush_r+0xb8>
 8008194:	602f      	str	r7, [r5, #0]
 8008196:	e7b0      	b.n	80080fa <__sflush_r+0x1a>
 8008198:	89a3      	ldrh	r3, [r4, #12]
 800819a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800819e:	81a3      	strh	r3, [r4, #12]
 80081a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081a4:	690f      	ldr	r7, [r1, #16]
 80081a6:	2f00      	cmp	r7, #0
 80081a8:	d0a7      	beq.n	80080fa <__sflush_r+0x1a>
 80081aa:	0793      	lsls	r3, r2, #30
 80081ac:	680e      	ldr	r6, [r1, #0]
 80081ae:	bf08      	it	eq
 80081b0:	694b      	ldreq	r3, [r1, #20]
 80081b2:	600f      	str	r7, [r1, #0]
 80081b4:	bf18      	it	ne
 80081b6:	2300      	movne	r3, #0
 80081b8:	eba6 0807 	sub.w	r8, r6, r7
 80081bc:	608b      	str	r3, [r1, #8]
 80081be:	f1b8 0f00 	cmp.w	r8, #0
 80081c2:	dd9a      	ble.n	80080fa <__sflush_r+0x1a>
 80081c4:	4643      	mov	r3, r8
 80081c6:	463a      	mov	r2, r7
 80081c8:	6a21      	ldr	r1, [r4, #32]
 80081ca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80081cc:	4628      	mov	r0, r5
 80081ce:	47b0      	blx	r6
 80081d0:	2800      	cmp	r0, #0
 80081d2:	dc07      	bgt.n	80081e4 <__sflush_r+0x104>
 80081d4:	89a3      	ldrh	r3, [r4, #12]
 80081d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081da:	81a3      	strh	r3, [r4, #12]
 80081dc:	f04f 30ff 	mov.w	r0, #4294967295
 80081e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081e4:	4407      	add	r7, r0
 80081e6:	eba8 0800 	sub.w	r8, r8, r0
 80081ea:	e7e8      	b.n	80081be <__sflush_r+0xde>
 80081ec:	20400001 	.word	0x20400001

080081f0 <_fflush_r>:
 80081f0:	b538      	push	{r3, r4, r5, lr}
 80081f2:	690b      	ldr	r3, [r1, #16]
 80081f4:	4605      	mov	r5, r0
 80081f6:	460c      	mov	r4, r1
 80081f8:	b1db      	cbz	r3, 8008232 <_fflush_r+0x42>
 80081fa:	b118      	cbz	r0, 8008204 <_fflush_r+0x14>
 80081fc:	6983      	ldr	r3, [r0, #24]
 80081fe:	b90b      	cbnz	r3, 8008204 <_fflush_r+0x14>
 8008200:	f7ff fa7a 	bl	80076f8 <__sinit>
 8008204:	4b0c      	ldr	r3, [pc, #48]	; (8008238 <_fflush_r+0x48>)
 8008206:	429c      	cmp	r4, r3
 8008208:	d109      	bne.n	800821e <_fflush_r+0x2e>
 800820a:	686c      	ldr	r4, [r5, #4]
 800820c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008210:	b17b      	cbz	r3, 8008232 <_fflush_r+0x42>
 8008212:	4621      	mov	r1, r4
 8008214:	4628      	mov	r0, r5
 8008216:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800821a:	f7ff bf61 	b.w	80080e0 <__sflush_r>
 800821e:	4b07      	ldr	r3, [pc, #28]	; (800823c <_fflush_r+0x4c>)
 8008220:	429c      	cmp	r4, r3
 8008222:	d101      	bne.n	8008228 <_fflush_r+0x38>
 8008224:	68ac      	ldr	r4, [r5, #8]
 8008226:	e7f1      	b.n	800820c <_fflush_r+0x1c>
 8008228:	4b05      	ldr	r3, [pc, #20]	; (8008240 <_fflush_r+0x50>)
 800822a:	429c      	cmp	r4, r3
 800822c:	bf08      	it	eq
 800822e:	68ec      	ldreq	r4, [r5, #12]
 8008230:	e7ec      	b.n	800820c <_fflush_r+0x1c>
 8008232:	2000      	movs	r0, #0
 8008234:	bd38      	pop	{r3, r4, r5, pc}
 8008236:	bf00      	nop
 8008238:	080085f0 	.word	0x080085f0
 800823c:	08008610 	.word	0x08008610
 8008240:	080085d0 	.word	0x080085d0

08008244 <_lseek_r>:
 8008244:	b538      	push	{r3, r4, r5, lr}
 8008246:	4c07      	ldr	r4, [pc, #28]	; (8008264 <_lseek_r+0x20>)
 8008248:	4605      	mov	r5, r0
 800824a:	4608      	mov	r0, r1
 800824c:	4611      	mov	r1, r2
 800824e:	2200      	movs	r2, #0
 8008250:	6022      	str	r2, [r4, #0]
 8008252:	461a      	mov	r2, r3
 8008254:	f000 f908 	bl	8008468 <_lseek>
 8008258:	1c43      	adds	r3, r0, #1
 800825a:	d102      	bne.n	8008262 <_lseek_r+0x1e>
 800825c:	6823      	ldr	r3, [r4, #0]
 800825e:	b103      	cbz	r3, 8008262 <_lseek_r+0x1e>
 8008260:	602b      	str	r3, [r5, #0]
 8008262:	bd38      	pop	{r3, r4, r5, pc}
 8008264:	200004a0 	.word	0x200004a0

08008268 <__swhatbuf_r>:
 8008268:	b570      	push	{r4, r5, r6, lr}
 800826a:	460e      	mov	r6, r1
 800826c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008270:	2900      	cmp	r1, #0
 8008272:	b090      	sub	sp, #64	; 0x40
 8008274:	4614      	mov	r4, r2
 8008276:	461d      	mov	r5, r3
 8008278:	da07      	bge.n	800828a <__swhatbuf_r+0x22>
 800827a:	2300      	movs	r3, #0
 800827c:	602b      	str	r3, [r5, #0]
 800827e:	89b3      	ldrh	r3, [r6, #12]
 8008280:	061a      	lsls	r2, r3, #24
 8008282:	d410      	bmi.n	80082a6 <__swhatbuf_r+0x3e>
 8008284:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008288:	e00e      	b.n	80082a8 <__swhatbuf_r+0x40>
 800828a:	aa01      	add	r2, sp, #4
 800828c:	f000 f8b2 	bl	80083f4 <_fstat_r>
 8008290:	2800      	cmp	r0, #0
 8008292:	dbf2      	blt.n	800827a <__swhatbuf_r+0x12>
 8008294:	9a02      	ldr	r2, [sp, #8]
 8008296:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800829a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800829e:	425a      	negs	r2, r3
 80082a0:	415a      	adcs	r2, r3
 80082a2:	602a      	str	r2, [r5, #0]
 80082a4:	e7ee      	b.n	8008284 <__swhatbuf_r+0x1c>
 80082a6:	2340      	movs	r3, #64	; 0x40
 80082a8:	2000      	movs	r0, #0
 80082aa:	6023      	str	r3, [r4, #0]
 80082ac:	b010      	add	sp, #64	; 0x40
 80082ae:	bd70      	pop	{r4, r5, r6, pc}

080082b0 <__smakebuf_r>:
 80082b0:	898b      	ldrh	r3, [r1, #12]
 80082b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80082b4:	079d      	lsls	r5, r3, #30
 80082b6:	4606      	mov	r6, r0
 80082b8:	460c      	mov	r4, r1
 80082ba:	d507      	bpl.n	80082cc <__smakebuf_r+0x1c>
 80082bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80082c0:	6023      	str	r3, [r4, #0]
 80082c2:	6123      	str	r3, [r4, #16]
 80082c4:	2301      	movs	r3, #1
 80082c6:	6163      	str	r3, [r4, #20]
 80082c8:	b002      	add	sp, #8
 80082ca:	bd70      	pop	{r4, r5, r6, pc}
 80082cc:	ab01      	add	r3, sp, #4
 80082ce:	466a      	mov	r2, sp
 80082d0:	f7ff ffca 	bl	8008268 <__swhatbuf_r>
 80082d4:	9900      	ldr	r1, [sp, #0]
 80082d6:	4605      	mov	r5, r0
 80082d8:	4630      	mov	r0, r6
 80082da:	f7ff fa97 	bl	800780c <_malloc_r>
 80082de:	b948      	cbnz	r0, 80082f4 <__smakebuf_r+0x44>
 80082e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082e4:	059a      	lsls	r2, r3, #22
 80082e6:	d4ef      	bmi.n	80082c8 <__smakebuf_r+0x18>
 80082e8:	f023 0303 	bic.w	r3, r3, #3
 80082ec:	f043 0302 	orr.w	r3, r3, #2
 80082f0:	81a3      	strh	r3, [r4, #12]
 80082f2:	e7e3      	b.n	80082bc <__smakebuf_r+0xc>
 80082f4:	4b0d      	ldr	r3, [pc, #52]	; (800832c <__smakebuf_r+0x7c>)
 80082f6:	62b3      	str	r3, [r6, #40]	; 0x28
 80082f8:	89a3      	ldrh	r3, [r4, #12]
 80082fa:	6020      	str	r0, [r4, #0]
 80082fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008300:	81a3      	strh	r3, [r4, #12]
 8008302:	9b00      	ldr	r3, [sp, #0]
 8008304:	6163      	str	r3, [r4, #20]
 8008306:	9b01      	ldr	r3, [sp, #4]
 8008308:	6120      	str	r0, [r4, #16]
 800830a:	b15b      	cbz	r3, 8008324 <__smakebuf_r+0x74>
 800830c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008310:	4630      	mov	r0, r6
 8008312:	f000 f881 	bl	8008418 <_isatty_r>
 8008316:	b128      	cbz	r0, 8008324 <__smakebuf_r+0x74>
 8008318:	89a3      	ldrh	r3, [r4, #12]
 800831a:	f023 0303 	bic.w	r3, r3, #3
 800831e:	f043 0301 	orr.w	r3, r3, #1
 8008322:	81a3      	strh	r3, [r4, #12]
 8008324:	89a3      	ldrh	r3, [r4, #12]
 8008326:	431d      	orrs	r5, r3
 8008328:	81a5      	strh	r5, [r4, #12]
 800832a:	e7cd      	b.n	80082c8 <__smakebuf_r+0x18>
 800832c:	08007679 	.word	0x08007679

08008330 <__malloc_lock>:
 8008330:	4770      	bx	lr

08008332 <__malloc_unlock>:
 8008332:	4770      	bx	lr

08008334 <_free_r>:
 8008334:	b538      	push	{r3, r4, r5, lr}
 8008336:	4605      	mov	r5, r0
 8008338:	2900      	cmp	r1, #0
 800833a:	d045      	beq.n	80083c8 <_free_r+0x94>
 800833c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008340:	1f0c      	subs	r4, r1, #4
 8008342:	2b00      	cmp	r3, #0
 8008344:	bfb8      	it	lt
 8008346:	18e4      	addlt	r4, r4, r3
 8008348:	f7ff fff2 	bl	8008330 <__malloc_lock>
 800834c:	4a1f      	ldr	r2, [pc, #124]	; (80083cc <_free_r+0x98>)
 800834e:	6813      	ldr	r3, [r2, #0]
 8008350:	4610      	mov	r0, r2
 8008352:	b933      	cbnz	r3, 8008362 <_free_r+0x2e>
 8008354:	6063      	str	r3, [r4, #4]
 8008356:	6014      	str	r4, [r2, #0]
 8008358:	4628      	mov	r0, r5
 800835a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800835e:	f7ff bfe8 	b.w	8008332 <__malloc_unlock>
 8008362:	42a3      	cmp	r3, r4
 8008364:	d90c      	bls.n	8008380 <_free_r+0x4c>
 8008366:	6821      	ldr	r1, [r4, #0]
 8008368:	1862      	adds	r2, r4, r1
 800836a:	4293      	cmp	r3, r2
 800836c:	bf04      	itt	eq
 800836e:	681a      	ldreq	r2, [r3, #0]
 8008370:	685b      	ldreq	r3, [r3, #4]
 8008372:	6063      	str	r3, [r4, #4]
 8008374:	bf04      	itt	eq
 8008376:	1852      	addeq	r2, r2, r1
 8008378:	6022      	streq	r2, [r4, #0]
 800837a:	6004      	str	r4, [r0, #0]
 800837c:	e7ec      	b.n	8008358 <_free_r+0x24>
 800837e:	4613      	mov	r3, r2
 8008380:	685a      	ldr	r2, [r3, #4]
 8008382:	b10a      	cbz	r2, 8008388 <_free_r+0x54>
 8008384:	42a2      	cmp	r2, r4
 8008386:	d9fa      	bls.n	800837e <_free_r+0x4a>
 8008388:	6819      	ldr	r1, [r3, #0]
 800838a:	1858      	adds	r0, r3, r1
 800838c:	42a0      	cmp	r0, r4
 800838e:	d10b      	bne.n	80083a8 <_free_r+0x74>
 8008390:	6820      	ldr	r0, [r4, #0]
 8008392:	4401      	add	r1, r0
 8008394:	1858      	adds	r0, r3, r1
 8008396:	4282      	cmp	r2, r0
 8008398:	6019      	str	r1, [r3, #0]
 800839a:	d1dd      	bne.n	8008358 <_free_r+0x24>
 800839c:	6810      	ldr	r0, [r2, #0]
 800839e:	6852      	ldr	r2, [r2, #4]
 80083a0:	605a      	str	r2, [r3, #4]
 80083a2:	4401      	add	r1, r0
 80083a4:	6019      	str	r1, [r3, #0]
 80083a6:	e7d7      	b.n	8008358 <_free_r+0x24>
 80083a8:	d902      	bls.n	80083b0 <_free_r+0x7c>
 80083aa:	230c      	movs	r3, #12
 80083ac:	602b      	str	r3, [r5, #0]
 80083ae:	e7d3      	b.n	8008358 <_free_r+0x24>
 80083b0:	6820      	ldr	r0, [r4, #0]
 80083b2:	1821      	adds	r1, r4, r0
 80083b4:	428a      	cmp	r2, r1
 80083b6:	bf04      	itt	eq
 80083b8:	6811      	ldreq	r1, [r2, #0]
 80083ba:	6852      	ldreq	r2, [r2, #4]
 80083bc:	6062      	str	r2, [r4, #4]
 80083be:	bf04      	itt	eq
 80083c0:	1809      	addeq	r1, r1, r0
 80083c2:	6021      	streq	r1, [r4, #0]
 80083c4:	605c      	str	r4, [r3, #4]
 80083c6:	e7c7      	b.n	8008358 <_free_r+0x24>
 80083c8:	bd38      	pop	{r3, r4, r5, pc}
 80083ca:	bf00      	nop
 80083cc:	20000098 	.word	0x20000098

080083d0 <_read_r>:
 80083d0:	b538      	push	{r3, r4, r5, lr}
 80083d2:	4c07      	ldr	r4, [pc, #28]	; (80083f0 <_read_r+0x20>)
 80083d4:	4605      	mov	r5, r0
 80083d6:	4608      	mov	r0, r1
 80083d8:	4611      	mov	r1, r2
 80083da:	2200      	movs	r2, #0
 80083dc:	6022      	str	r2, [r4, #0]
 80083de:	461a      	mov	r2, r3
 80083e0:	f000 f84a 	bl	8008478 <_read>
 80083e4:	1c43      	adds	r3, r0, #1
 80083e6:	d102      	bne.n	80083ee <_read_r+0x1e>
 80083e8:	6823      	ldr	r3, [r4, #0]
 80083ea:	b103      	cbz	r3, 80083ee <_read_r+0x1e>
 80083ec:	602b      	str	r3, [r5, #0]
 80083ee:	bd38      	pop	{r3, r4, r5, pc}
 80083f0:	200004a0 	.word	0x200004a0

080083f4 <_fstat_r>:
 80083f4:	b538      	push	{r3, r4, r5, lr}
 80083f6:	4c07      	ldr	r4, [pc, #28]	; (8008414 <_fstat_r+0x20>)
 80083f8:	2300      	movs	r3, #0
 80083fa:	4605      	mov	r5, r0
 80083fc:	4608      	mov	r0, r1
 80083fe:	4611      	mov	r1, r2
 8008400:	6023      	str	r3, [r4, #0]
 8008402:	f000 f821 	bl	8008448 <_fstat>
 8008406:	1c43      	adds	r3, r0, #1
 8008408:	d102      	bne.n	8008410 <_fstat_r+0x1c>
 800840a:	6823      	ldr	r3, [r4, #0]
 800840c:	b103      	cbz	r3, 8008410 <_fstat_r+0x1c>
 800840e:	602b      	str	r3, [r5, #0]
 8008410:	bd38      	pop	{r3, r4, r5, pc}
 8008412:	bf00      	nop
 8008414:	200004a0 	.word	0x200004a0

08008418 <_isatty_r>:
 8008418:	b538      	push	{r3, r4, r5, lr}
 800841a:	4c06      	ldr	r4, [pc, #24]	; (8008434 <_isatty_r+0x1c>)
 800841c:	2300      	movs	r3, #0
 800841e:	4605      	mov	r5, r0
 8008420:	4608      	mov	r0, r1
 8008422:	6023      	str	r3, [r4, #0]
 8008424:	f000 f818 	bl	8008458 <_isatty>
 8008428:	1c43      	adds	r3, r0, #1
 800842a:	d102      	bne.n	8008432 <_isatty_r+0x1a>
 800842c:	6823      	ldr	r3, [r4, #0]
 800842e:	b103      	cbz	r3, 8008432 <_isatty_r+0x1a>
 8008430:	602b      	str	r3, [r5, #0]
 8008432:	bd38      	pop	{r3, r4, r5, pc}
 8008434:	200004a0 	.word	0x200004a0

08008438 <_close>:
 8008438:	4b02      	ldr	r3, [pc, #8]	; (8008444 <_close+0xc>)
 800843a:	2258      	movs	r2, #88	; 0x58
 800843c:	601a      	str	r2, [r3, #0]
 800843e:	f04f 30ff 	mov.w	r0, #4294967295
 8008442:	4770      	bx	lr
 8008444:	200004a0 	.word	0x200004a0

08008448 <_fstat>:
 8008448:	4b02      	ldr	r3, [pc, #8]	; (8008454 <_fstat+0xc>)
 800844a:	2258      	movs	r2, #88	; 0x58
 800844c:	601a      	str	r2, [r3, #0]
 800844e:	f04f 30ff 	mov.w	r0, #4294967295
 8008452:	4770      	bx	lr
 8008454:	200004a0 	.word	0x200004a0

08008458 <_isatty>:
 8008458:	4b02      	ldr	r3, [pc, #8]	; (8008464 <_isatty+0xc>)
 800845a:	2258      	movs	r2, #88	; 0x58
 800845c:	601a      	str	r2, [r3, #0]
 800845e:	2000      	movs	r0, #0
 8008460:	4770      	bx	lr
 8008462:	bf00      	nop
 8008464:	200004a0 	.word	0x200004a0

08008468 <_lseek>:
 8008468:	4b02      	ldr	r3, [pc, #8]	; (8008474 <_lseek+0xc>)
 800846a:	2258      	movs	r2, #88	; 0x58
 800846c:	601a      	str	r2, [r3, #0]
 800846e:	f04f 30ff 	mov.w	r0, #4294967295
 8008472:	4770      	bx	lr
 8008474:	200004a0 	.word	0x200004a0

08008478 <_read>:
 8008478:	4b02      	ldr	r3, [pc, #8]	; (8008484 <_read+0xc>)
 800847a:	2258      	movs	r2, #88	; 0x58
 800847c:	601a      	str	r2, [r3, #0]
 800847e:	f04f 30ff 	mov.w	r0, #4294967295
 8008482:	4770      	bx	lr
 8008484:	200004a0 	.word	0x200004a0

08008488 <_sbrk>:
 8008488:	4b04      	ldr	r3, [pc, #16]	; (800849c <_sbrk+0x14>)
 800848a:	6819      	ldr	r1, [r3, #0]
 800848c:	4602      	mov	r2, r0
 800848e:	b909      	cbnz	r1, 8008494 <_sbrk+0xc>
 8008490:	4903      	ldr	r1, [pc, #12]	; (80084a0 <_sbrk+0x18>)
 8008492:	6019      	str	r1, [r3, #0]
 8008494:	6818      	ldr	r0, [r3, #0]
 8008496:	4402      	add	r2, r0
 8008498:	601a      	str	r2, [r3, #0]
 800849a:	4770      	bx	lr
 800849c:	200000a0 	.word	0x200000a0
 80084a0:	200004a4 	.word	0x200004a4

080084a4 <_init>:
 80084a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084a6:	bf00      	nop
 80084a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084aa:	bc08      	pop	{r3}
 80084ac:	469e      	mov	lr, r3
 80084ae:	4770      	bx	lr

080084b0 <_fini>:
 80084b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084b2:	bf00      	nop
 80084b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084b6:	bc08      	pop	{r3}
 80084b8:	469e      	mov	lr, r3
 80084ba:	4770      	bx	lr
